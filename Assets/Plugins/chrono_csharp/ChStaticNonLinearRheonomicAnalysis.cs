//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChStaticNonLinearRheonomicAnalysis : ChStaticAnalysis {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChStaticNonLinearRheonomicAnalysis(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChStaticNonLinearRheonomicAnalysis obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChStaticNonLinearRheonomicAnalysis(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChStaticNonLinearRheonomicAnalysis() : this(chronoPINVOKE.new_ChStaticNonLinearRheonomicAnalysis(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVerbose(bool verbose) {
    chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_SetVerbose(swigCPtr, verbose);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaxIterations(int max_iters) {
    chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_SetMaxIterations(swigCPtr, max_iters);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIncrementalSteps(int incr_steps) {
    chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_SetIncrementalSteps(swigCPtr, incr_steps);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCorrectionTolerance(double reltol, double abstol) {
    chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_SetCorrectionTolerance(swigCPtr, reltol, abstol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetResidualTolerance(double tol) {
    chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_SetResidualTolerance(swigCPtr, tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetMaxIterations() {
    int ret = chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_GetMaxIterations(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetIncrementalSteps() {
    int ret = chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_GetIncrementalSteps(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCallbackIterationBegin(SWIGTYPE_p_std__shared_ptrT_chrono__ChStaticNonLinearRheonomicAnalysis__IterationCallback_t callback) {
    chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_SetCallbackIterationBegin(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__ChStaticNonLinearRheonomicAnalysis__IterationCallback_t.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAutomaticSpeedAndAccelerationComputation(bool val) {
    chronoPINVOKE.ChStaticNonLinearRheonomicAnalysis_SetAutomaticSpeedAndAccelerationComputation(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
