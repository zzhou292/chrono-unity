//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChWorldFrame : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChWorldFrame(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChWorldFrame obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChWorldFrame() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chrono_vehiclePINVOKE.delete_ChWorldFrame(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public static void Set(ChMatrix33d rot) {
    chrono_vehiclePINVOKE.ChWorldFrame_Set(ChMatrix33d.getCPtr(rot));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetYUP() {
    chrono_vehiclePINVOKE.ChWorldFrame_SetYUP();
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool IsISO() {
    bool ret = chrono_vehiclePINVOKE.ChWorldFrame_IsISO();
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChMatrix33d Rotation() {
    ChMatrix33d ret = new ChMatrix33d(chrono_vehiclePINVOKE.ChWorldFrame_Rotation(), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond Quaternion() {
    ChQuaterniond ret = new ChQuaterniond(chrono_vehiclePINVOKE.ChWorldFrame_Quaternion(), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d Vertical() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChWorldFrame_Vertical(), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d Forward() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChWorldFrame_Forward(), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d ToISO(ChVector3d v) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChWorldFrame_ToISO(ChVector3d.getCPtr(v)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d FromISO(ChVector3d v) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChWorldFrame_FromISO(ChVector3d.getCPtr(v)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Height(ChVector3d v) {
    double ret = chrono_vehiclePINVOKE.ChWorldFrame_Height(ChVector3d.getCPtr(v));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void Project(ChVector3d v) {
    chrono_vehiclePINVOKE.ChWorldFrame_Project(ChVector3d.getCPtr(v));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
