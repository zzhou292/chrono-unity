//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkMotorLinearDriveline : ChLinkMotorLinear {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkMotorLinearDriveline(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkMotorLinearDriveline_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkMotorLinearDriveline obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkMotorLinearDriveline(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkMotorLinearDriveline() : this(chronoPINVOKE.new_ChLinkMotorLinearDriveline__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMotorLinearDriveline(ChLinkMotorLinearDriveline other) : this(chronoPINVOKE.new_ChLinkMotorLinearDriveline__SWIG_1(ChLinkMotorLinearDriveline.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetSystem(ChSystem m_system) {
    chronoPINVOKE.ChLinkMotorLinearDriveline_SetSystem(swigCPtr, ChSystem.getCPtr(m_system));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChShaft GetInnerShaft1Lin() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkMotorLinearDriveline_GetInnerShaft1Lin(swigCPtr);
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChShaft GetInnerShaft2Lin() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkMotorLinearDriveline_GetInnerShaft2Lin(swigCPtr);
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChShaft GetInnerShaft2Rot() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkMotorLinearDriveline_GetInnerShaft2Rot(swigCPtr);
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInnerShaft2RotDirection(ChVector3d md) {
    chronoPINVOKE.ChLinkMotorLinearDriveline_SetInnerShaft2RotDirection(swigCPtr, ChVector3d.getCPtr(md));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetInnerShaft2RotDirection() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkMotorLinearDriveline_GetInnerShaft2RotDirection(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInnerForce1() {
    double ret = chronoPINVOKE.ChLinkMotorLinearDriveline_GetInnerForce1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInnerForce2() {
    double ret = chronoPINVOKE.ChLinkMotorLinearDriveline_GetInnerForce2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInnerTorque2() {
    double ret = chronoPINVOKE.ChLinkMotorLinearDriveline_GetInnerTorque2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetMotorForce() {
    double ret = chronoPINVOKE.ChLinkMotorLinearDriveline_GetMotorForce(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Initialize(ChBodyFrame mbody1, ChBodyFrame mbody2, ChFramed mabsframe) {
    chronoPINVOKE.ChLinkMotorLinearDriveline_Initialize__SWIG_0(swigCPtr, ChBodyFrame.getCPtr(mbody1), ChBodyFrame.getCPtr(mbody2), ChFramed.getCPtr(mabsframe));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Initialize(ChBodyFrame mbody1, ChBodyFrame mbody2, bool pos_are_relative, ChFramed mframe1, ChFramed mframe2) {
    chronoPINVOKE.ChLinkMotorLinearDriveline_Initialize__SWIG_1(swigCPtr, ChBodyFrame.getCPtr(mbody1), ChBodyFrame.getCPtr(mbody2), pos_are_relative, ChFramed.getCPtr(mframe1), ChFramed.getCPtr(mframe2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Initialize(ChBodyFrame mbody1, ChBodyFrame mbody2, bool pos_are_relative, ChVector3d mpt1, ChVector3d mpt2, ChVector3d mnorm1, ChVector3d mnorm2) {
    chronoPINVOKE.ChLinkMotorLinearDriveline_Initialize__SWIG_2(swigCPtr, ChBodyFrame.getCPtr(mbody1), ChBodyFrame.getCPtr(mbody2), pos_are_relative, ChVector3d.getCPtr(mpt1), ChVector3d.getCPtr(mpt2), ChVector3d.getCPtr(mnorm1), ChVector3d.getCPtr(mnorm2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Setup() {
    chronoPINVOKE.ChLinkMotorLinearDriveline_Setup(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkMotorLinearDriveline_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkMotorLinearDriveline_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
