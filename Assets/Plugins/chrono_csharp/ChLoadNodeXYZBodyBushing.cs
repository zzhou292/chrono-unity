//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoadNodeXYZBodyBushing : ChLoadNodeXYZBody {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLoadNodeXYZBodyBushing(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLoadNodeXYZBodyBushing_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoadNodeXYZBodyBushing obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLoadNodeXYZBodyBushing(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLoadNodeXYZBodyBushing(ChNodeXYZ nodeA, ChBody bodyB) : this(chronoPINVOKE.new_ChLoadNodeXYZBodyBushing(ChNodeXYZ.getCPtr(nodeA), ChBody.getCPtr(bodyB)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ComputeForce(ChFrameMovingd rel_AB, ChVector3d loc_force) {
    chronoPINVOKE.ChLoadNodeXYZBodyBushing_ComputeForce(swigCPtr, ChFrameMovingd.getCPtr(rel_AB), ChVector3d.getCPtr(loc_force));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFunctionForceX(ChFunction fx) {
    chronoPINVOKE.ChLoadNodeXYZBodyBushing_SetFunctionForceX(swigCPtr, ChFunction.getCPtr(fx));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFunctionForceY(ChFunction fy) {
    chronoPINVOKE.ChLoadNodeXYZBodyBushing_SetFunctionForceY(swigCPtr, ChFunction.getCPtr(fy));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFunctionForceZ(ChFunction fz) {
    chronoPINVOKE.ChLoadNodeXYZBodyBushing_SetFunctionForceZ(swigCPtr, ChFunction.getCPtr(fz));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDamping(ChVector3d damping) {
    chronoPINVOKE.ChLoadNodeXYZBodyBushing_SetDamping(swigCPtr, ChVector3d.getCPtr(damping));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetDamping() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLoadNodeXYZBodyBushing_GetDamping(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStiff(bool ms) {
    chronoPINVOKE.ChLoadNodeXYZBodyBushing_SetStiff(swigCPtr, ms);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
