//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChConvexDecomposition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChConvexDecomposition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChConvexDecomposition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChConvexDecomposition() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ChConvexDecomposition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void Reset() {
    chronoPINVOKE.ChConvexDecomposition_Reset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool AddTriangle(ChVector3d v1, ChVector3d v2, ChVector3d v3) {
    bool ret = chronoPINVOKE.ChConvexDecomposition_AddTriangle__SWIG_0(swigCPtr, ChVector3d.getCPtr(v1), ChVector3d.getCPtr(v2), ChVector3d.getCPtr(v3));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangle(ChTriangle t1) {
    bool ret = chronoPINVOKE.ChConvexDecomposition_AddTriangle__SWIG_1(swigCPtr, ChTriangle.getCPtr(t1));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool AddTriangleMesh(ChTriangleMesh tm) {
    bool ret = chronoPINVOKE.ChConvexDecomposition_AddTriangleMesh(swigCPtr, ChTriangleMesh.getCPtr(tm));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int ComputeConvexDecomposition() {
    int ret = chronoPINVOKE.ChConvexDecomposition_ComputeConvexDecomposition(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetHullCount() {
    uint ret = chronoPINVOKE.ChConvexDecomposition_GetHullCount(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetConvexHullResult(uint hullIndex, ChTriangleMesh convextrimesh) {
    bool ret = chronoPINVOKE.ChConvexDecomposition_GetConvexHullResult__SWIG_0(swigCPtr, hullIndex, ChTriangleMesh.getCPtr(convextrimesh));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool GetConvexHullResult(uint hullIndex, vector_ChVector3d convexhull) {
    bool ret = chronoPINVOKE.ChConvexDecomposition_GetConvexHullResult__SWIG_1(swigCPtr, hullIndex, vector_ChVector3d.getCPtr(convexhull));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool WriteConvexHullsAsChullsFile(SWIGTYPE_p_std__ostream mstream) {
    bool ret = chronoPINVOKE.ChConvexDecomposition_WriteConvexHullsAsChullsFile(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(mstream));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void WriteConvexHullsAsWavefrontObj(SWIGTYPE_p_std__ostream mstream) {
    chronoPINVOKE.ChConvexDecomposition_WriteConvexHullsAsWavefrontObj(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(mstream));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
