//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkDistance : ChLink {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkDistance(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkDistance_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkDistance obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkDistance(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkDistance() : this(chronoPINVOKE.new_ChLinkDistance__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkDistance(ChLinkDistance other) : this(chronoPINVOKE.new_ChLinkDistance__SWIG_1(ChLinkDistance.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int Initialize(ChBodyFrame body1, ChBodyFrame body2, bool pos_are_relative, ChVector3d pos1, ChVector3d pos2, bool auto_distance, double mdistance, ChLinkDistance.Mode mode) {
    int ret = chronoPINVOKE.ChLinkDistance_Initialize__SWIG_0(swigCPtr, ChBodyFrame.getCPtr(body1), ChBodyFrame.getCPtr(body2), pos_are_relative, ChVector3d.getCPtr(pos1), ChVector3d.getCPtr(pos2), auto_distance, mdistance, (int)mode);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Initialize(ChBodyFrame body1, ChBodyFrame body2, bool pos_are_relative, ChVector3d pos1, ChVector3d pos2, bool auto_distance, double mdistance) {
    int ret = chronoPINVOKE.ChLinkDistance_Initialize__SWIG_1(swigCPtr, ChBodyFrame.getCPtr(body1), ChBodyFrame.getCPtr(body2), pos_are_relative, ChVector3d.getCPtr(pos1), ChVector3d.getCPtr(pos2), auto_distance, mdistance);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Initialize(ChBodyFrame body1, ChBodyFrame body2, bool pos_are_relative, ChVector3d pos1, ChVector3d pos2, bool auto_distance) {
    int ret = chronoPINVOKE.ChLinkDistance_Initialize__SWIG_2(swigCPtr, ChBodyFrame.getCPtr(body1), ChBodyFrame.getCPtr(body2), pos_are_relative, ChVector3d.getCPtr(pos1), ChVector3d.getCPtr(pos2), auto_distance);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int Initialize(ChBodyFrame body1, ChBodyFrame body2, bool pos_are_relative, ChVector3d pos1, ChVector3d pos2) {
    int ret = chronoPINVOKE.ChLinkDistance_Initialize__SWIG_3(swigCPtr, ChBodyFrame.getCPtr(body1), ChBodyFrame.getCPtr(body2), pos_are_relative, ChVector3d.getCPtr(pos1), ChVector3d.getCPtr(pos2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraintsBilateral() {
    uint ret = chronoPINVOKE.ChLinkDistance_GetNumConstraintsBilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame1Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkDistance_GetFrame1Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame2Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkDistance_GetFrame2Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetEndPoint1Rel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkDistance_GetEndPoint1Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndPoint1Rel(ChVector3d mset) {
    chronoPINVOKE.ChLinkDistance_SetEndPoint1Rel(swigCPtr, ChVector3d.getCPtr(mset));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetEndPoint1Abs() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkDistance_GetEndPoint1Abs(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndPoint1Abs(ChVector3d mset) {
    chronoPINVOKE.ChLinkDistance_SetEndPoint1Abs(swigCPtr, ChVector3d.getCPtr(mset));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetEndPoint2Rel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkDistance_GetEndPoint2Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndPoint2Rel(ChVector3d mset) {
    chronoPINVOKE.ChLinkDistance_SetEndPoint2Rel(swigCPtr, ChVector3d.getCPtr(mset));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetEndPoint2Abs() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkDistance_GetEndPoint2Abs(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEndPoint2Abs(ChVector3d mset) {
    chronoPINVOKE.ChLinkDistance_SetEndPoint2Abs(swigCPtr, ChVector3d.getCPtr(mset));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetImposedDistance(double mset) {
    chronoPINVOKE.ChLinkDistance_SetImposedDistance(swigCPtr, mset);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetImposedDistance() {
    double ret = chronoPINVOKE.ChLinkDistance_GetImposedDistance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetCurrentDistance() {
    double ret = chronoPINVOKE.ChLinkDistance_GetCurrentDistance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMode(ChLinkDistance.Mode mode) {
    chronoPINVOKE.ChLinkDistance_SetMode(swigCPtr, (int)mode);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkDistance.Mode GetMode() {
    ChLinkDistance.Mode ret = (ChLinkDistance.Mode)chronoPINVOKE.ChLinkDistance_GetMode(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVectorDynamicd GetConstraintViolation() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChLinkDistance_GetConstraintViolation(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkDistance_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkDistance_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody body1, ChBody body2, bool pos_are_relative, ChVector3d pos1, ChVector3d pos2) {
    chronoPINVOKE.ChLinkDistance_Initialize__SWIG_4(swigCPtr, ChBody.getCPtr(body1), ChBody.getCPtr(body2), pos_are_relative, ChVector3d.getCPtr(pos1), ChVector3d.getCPtr(pos2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Mode {
    BILATERAL,
    UNILATERAL_MAXDISTANCE,
    UNILATERAL_MINDISTANCE
  }

}
