//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChShaftBodyRotation : ChPhysicsItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChShaftBodyRotation(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChShaftBodyRotation_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChShaftBodyRotation obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChShaftBodyRotation(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChShaftBodyRotation() : this(chronoPINVOKE.new_ChShaftBodyRotation__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChShaftBodyRotation(ChShaftBodyRotation other) : this(chronoPINVOKE.new_ChShaftBodyRotation__SWIG_1(ChShaftBodyRotation.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Initialize(ChShaft mshaft, ChBodyFrame mbody, ChVector3d mdir) {
    bool ret = chronoPINVOKE.ChShaftBodyRotation_Initialize(swigCPtr, ChShaft.getCPtr(mshaft), ChBodyFrame.getCPtr(mbody), ChVector3d.getCPtr(mdir));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChShaft GetShaft() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChShaftBodyRotation_GetShaft(swigCPtr);
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBodyFrame GetBody() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChShaftBodyRotation_GetBody(swigCPtr);
    ChBodyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyFrame(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetShaftDirection(ChVector3d md) {
    chronoPINVOKE.ChShaftBodyRotation_SetShaftDirection(swigCPtr, ChVector3d.getCPtr(md));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetShaftDirection() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChShaftBodyRotation_GetShaftDirection(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTorqueReactionOnShaft() {
    double ret = chronoPINVOKE.ChShaftBodyRotation_GetTorqueReactionOnShaft(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetTorqueReactionOnBody() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChShaftBodyRotation_GetTorqueReactionOnBody(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChShaftBodyRotation_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChShaftBodyRotation_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
