//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChCollisionShapeTriangleMesh : ChCollisionShape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChCollisionShapeTriangleMesh(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChCollisionShapeTriangleMesh_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChCollisionShapeTriangleMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChCollisionShapeTriangleMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChCollisionShapeTriangleMesh() : this(chronoPINVOKE.new_ChCollisionShapeTriangleMesh__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionShapeTriangleMesh(ChContactMaterial material, ChTriangleMesh mesh, bool is_static, bool is_convex, double radius) : this(chronoPINVOKE.new_ChCollisionShapeTriangleMesh__SWIG_1(ChContactMaterial.getCPtr(material), ChTriangleMesh.getCPtr(mesh), is_static, is_convex, radius), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionShapeTriangleMesh(ChContactMaterial material, ChTriangleMesh mesh, bool is_static, bool is_convex) : this(chronoPINVOKE.new_ChCollisionShapeTriangleMesh__SWIG_2(ChContactMaterial.getCPtr(material), ChTriangleMesh.getCPtr(mesh), is_static, is_convex), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTriangleMesh GetMesh() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChCollisionShapeTriangleMesh_GetMesh(swigCPtr);
    ChTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMesh(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsStatic() {
    bool ret = chronoPINVOKE.ChCollisionShapeTriangleMesh_IsStatic(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConvex() {
    bool ret = chronoPINVOKE.ChCollisionShapeTriangleMesh_IsConvex(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRadius() {
    double ret = chronoPINVOKE.ChCollisionShapeTriangleMesh_GetRadius(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChAABB GetBoundingBox() {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChCollisionShapeTriangleMesh_GetBoundingBox(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChCollisionShapeTriangleMesh_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChCollisionShapeTriangleMesh_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
