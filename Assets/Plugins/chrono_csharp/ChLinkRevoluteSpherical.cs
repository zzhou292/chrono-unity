//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkRevoluteSpherical : ChLink {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkRevoluteSpherical(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkRevoluteSpherical_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkRevoluteSpherical obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkRevoluteSpherical(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkRevoluteSpherical() : this(chronoPINVOKE.new_ChLinkRevoluteSpherical__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkRevoluteSpherical(ChLinkRevoluteSpherical other) : this(chronoPINVOKE.new_ChLinkRevoluteSpherical__SWIG_1(ChLinkRevoluteSpherical.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetNumConstraintsBilateral() {
    uint ret = chronoPINVOKE.ChLinkRevoluteSpherical_GetNumConstraintsBilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint1Rel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkRevoluteSpherical_GetPoint1Rel(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetDir1Rel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkRevoluteSpherical_GetDir1Rel(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint2Rel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkRevoluteSpherical_GetPoint2Rel(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetImposedDistance() {
    double ret = chronoPINVOKE.ChLinkRevoluteSpherical_GetImposedDistance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetCurrentDistance() {
    double ret = chronoPINVOKE.ChLinkRevoluteSpherical_GetCurrentDistance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint1Abs() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkRevoluteSpherical_GetPoint1Abs(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetDir1Abs() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkRevoluteSpherical_GetDir1Abs(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint2Abs() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkRevoluteSpherical_GetPoint2Abs(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame1Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkRevoluteSpherical_GetFrame1Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame2Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkRevoluteSpherical_GetFrame2Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChWrenchd GetReaction1() {
    ChWrenchd ret = new ChWrenchd(chronoPINVOKE.ChLinkRevoluteSpherical_GetReaction1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChWrenchd GetReaction2() {
    ChWrenchd ret = new ChWrenchd(chronoPINVOKE.ChLinkRevoluteSpherical_GetReaction2(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVectorDynamicd GetConstraintViolation() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChLinkRevoluteSpherical_GetConstraintViolation(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initialize(ChBody body1, ChBody body2, ChCoordsysd csys, double distance) {
    chronoPINVOKE.ChLinkRevoluteSpherical_Initialize__SWIG_0(swigCPtr, ChBody.getCPtr(body1), ChBody.getCPtr(body2), ChCoordsysd.getCPtr(csys), distance);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody body1, ChBody body2, bool local, ChVector3d pos1, ChVector3d dir1, ChVector3d pos2, bool auto_distance, double distance) {
    chronoPINVOKE.ChLinkRevoluteSpherical_Initialize__SWIG_1(swigCPtr, ChBody.getCPtr(body1), ChBody.getCPtr(body2), local, ChVector3d.getCPtr(pos1), ChVector3d.getCPtr(dir1), ChVector3d.getCPtr(pos2), auto_distance, distance);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody body1, ChBody body2, bool local, ChVector3d pos1, ChVector3d dir1, ChVector3d pos2, bool auto_distance) {
    chronoPINVOKE.ChLinkRevoluteSpherical_Initialize__SWIG_2(swigCPtr, ChBody.getCPtr(body1), ChBody.getCPtr(body2), local, ChVector3d.getCPtr(pos1), ChVector3d.getCPtr(dir1), ChVector3d.getCPtr(pos2), auto_distance);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody body1, ChBody body2, bool local, ChVector3d pos1, ChVector3d dir1, ChVector3d pos2) {
    chronoPINVOKE.ChLinkRevoluteSpherical_Initialize__SWIG_3(swigCPtr, ChBody.getCPtr(body1), ChBody.getCPtr(body2), local, ChVector3d.getCPtr(pos1), ChVector3d.getCPtr(dir1), ChVector3d.getCPtr(pos2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double time, bool update_assets) {
    chronoPINVOKE.ChLinkRevoluteSpherical_Update__SWIG_0(swigCPtr, time, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double time) {
    chronoPINVOKE.ChLinkRevoluteSpherical_Update__SWIG_1(swigCPtr, time);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkRevoluteSpherical_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkRevoluteSpherical_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
