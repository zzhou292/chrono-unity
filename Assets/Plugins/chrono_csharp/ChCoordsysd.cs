//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChCoordsysd : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChCoordsysd(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChCoordsysd obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChCoordsysd() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ChCoordsysd(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChVector3d pos {
    set {
      chronoPINVOKE.ChCoordsysd_pos_set(swigCPtr, ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChCoordsysd_pos_get(swigCPtr);
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChQuaterniond rot {
    set {
      chronoPINVOKE.ChCoordsysd_rot_set(swigCPtr, ChQuaterniond.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChCoordsysd_rot_get(swigCPtr);
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChCoordsysd() : this(chronoPINVOKE.new_ChCoordsysd__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCoordsysd(ChVector3d v, ChQuaterniond q) : this(chronoPINVOKE.new_ChCoordsysd__SWIG_1(ChVector3d.getCPtr(v), ChQuaterniond.getCPtr(q)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCoordsysd(ChVector3d v) : this(chronoPINVOKE.new_ChCoordsysd__SWIG_2(ChVector3d.getCPtr(v)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCoordsysd(ChVector3d v, double alpha, ChVector3d u) : this(chronoPINVOKE.new_ChCoordsysd__SWIG_3(ChVector3d.getCPtr(v), alpha, ChVector3d.getCPtr(u)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCoordsysd(ChCoordsysd other) : this(chronoPINVOKE.new_ChCoordsysd__SWIG_4(ChCoordsysd.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Force2D() {
    chronoPINVOKE.ChCoordsysd_Force2D(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Equals(ChCoordsysd other) {
    bool ret = chronoPINVOKE.ChCoordsysd_Equals__SWIG_0(swigCPtr, ChCoordsysd.getCPtr(other));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChCoordsysd other, double tol) {
    bool ret = chronoPINVOKE.ChCoordsysd_Equals__SWIG_1(swigCPtr, ChCoordsysd.getCPtr(other), tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetIdentity() {
    chronoPINVOKE.ChCoordsysd_SetIdentity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConcatenatePreTransformation(ChCoordsysd F) {
    chronoPINVOKE.ChCoordsysd_ConcatenatePreTransformation(swigCPtr, ChCoordsysd.getCPtr(F));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConcatenatePostTransformation(ChCoordsysd F) {
    chronoPINVOKE.ChCoordsysd_ConcatenatePostTransformation(swigCPtr, ChCoordsysd.getCPtr(F));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d TransformPointLocalToParent(ChVector3d v) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChCoordsysd_TransformPointLocalToParent(swigCPtr, ChVector3d.getCPtr(v)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d TransformPointParentToLocal(ChVector3d v) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChCoordsysd_TransformPointParentToLocal(swigCPtr, ChVector3d.getCPtr(v)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d TransformDirectionLocalToParent(ChVector3d d) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChCoordsysd_TransformDirectionLocalToParent(swigCPtr, ChVector3d.getCPtr(d)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d TransformDirectionParentToLocal(ChVector3d d) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChCoordsysd_TransformDirectionParentToLocal(swigCPtr, ChVector3d.getCPtr(d)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWrenchd TransformWrenchLocalToParent(ChWrenchd w) {
    ChWrenchd ret = new ChWrenchd(chronoPINVOKE.ChCoordsysd_TransformWrenchLocalToParent(swigCPtr, ChWrenchd.getCPtr(w)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWrenchd TransformWrenchParentToLocal(ChWrenchd w) {
    ChWrenchd ret = new ChWrenchd(chronoPINVOKE.ChCoordsysd_TransformWrenchParentToLocal(swigCPtr, ChWrenchd.getCPtr(w)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd TransformLocalToParent(ChCoordsysd F) {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChCoordsysd_TransformLocalToParent(swigCPtr, ChCoordsysd.getCPtr(F)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd TransformParentToLocal(ChCoordsysd F) {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChCoordsysd_TransformParentToLocal(swigCPtr, ChCoordsysd.getCPtr(F)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChCoordsysd_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChCoordsysd_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
