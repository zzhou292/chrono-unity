//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChNodeXYZ : ChNodeBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChNodeXYZ(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChNodeXYZ_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChNodeXYZ obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChNodeXYZ(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SWIGTYPE_p_ChVariablesNode Variables() {
    SWIGTYPE_p_ChVariablesNode ret = new SWIGTYPE_p_ChVariablesNode(chronoPINVOKE.ChNodeXYZ_Variables(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPos() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChNodeXYZ_GetPos(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPos(ChVector3d mpos) {
    chronoPINVOKE.ChNodeXYZ_SetPos(swigCPtr, ChVector3d.getCPtr(mpos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetPosDt() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChNodeXYZ_GetPosDt(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPosDt(ChVector3d mposdt) {
    chronoPINVOKE.ChNodeXYZ_SetPosDt(swigCPtr, ChVector3d.getCPtr(mposdt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetPosDt2() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChNodeXYZ_GetPosDt2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPosDt2(ChVector3d mposdtdt) {
    chronoPINVOKE.ChNodeXYZ_SetPosDt2(swigCPtr, ChVector3d.getCPtr(mposdtdt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetMass() {
    double ret = chronoPINVOKE.ChNodeXYZ_GetMass(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetMass(double mm) {
    chronoPINVOKE.ChNodeXYZ_SetMass(swigCPtr, mm);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChNodeXYZ_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetLoadableNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChNodeXYZ_GetLoadableNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetLoadableNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChNodeXYZ_GetLoadableNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void LoadableGetStateBlockPosLevel(int block_offset, ChState mD) {
    chronoPINVOKE.ChNodeXYZ_LoadableGetStateBlockPosLevel(swigCPtr, block_offset, ChState.getCPtr(mD));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadableGetStateBlockVelLevel(int block_offset, ChStateDelta mD) {
    chronoPINVOKE.ChNodeXYZ_LoadableGetStateBlockVelLevel(swigCPtr, block_offset, ChStateDelta.getCPtr(mD));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadableStateIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
    chronoPINVOKE.ChNodeXYZ_LoadableStateIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumFieldCoords() {
    uint ret = chronoPINVOKE.ChNodeXYZ_GetNumFieldCoords(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumSubBlocks() {
    uint ret = chronoPINVOKE.ChNodeXYZ_GetNumSubBlocks(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetSubBlockOffset(uint nblock) {
    uint ret = chronoPINVOKE.ChNodeXYZ_GetSubBlockOffset(swigCPtr, nblock);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetSubBlockSize(uint nblock) {
    uint ret = chronoPINVOKE.ChNodeXYZ_GetSubBlockSize(swigCPtr, nblock);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsSubBlockActive(uint nblock) {
    bool ret = chronoPINVOKE.ChNodeXYZ_IsSubBlockActive(swigCPtr, nblock);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void LoadableGetVariables(SWIGTYPE_p_std__vectorT_ChVariables_p_t mvars) {
    chronoPINVOKE.ChNodeXYZ_LoadableGetVariables(swigCPtr, SWIGTYPE_p_std__vectorT_ChVariables_p_t.getCPtr(mvars));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ComputeNF(double U, double V, double W, ChVectorDynamicd Qi, SWIGTYPE_p_double detJ, ChVectorDynamicd F, ChVectorDynamicd state_x, ChVectorDynamicd state_w) {
    chronoPINVOKE.ChNodeXYZ_ComputeNF(swigCPtr, U, V, W, ChVectorDynamicd.getCPtr(Qi), SWIGTYPE_p_double.getCPtr(detJ), ChVectorDynamicd.getCPtr(F), ChVectorDynamicd.getCPtr(state_x), ChVectorDynamicd.getCPtr(state_w));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetDensity() {
    double ret = chronoPINVOKE.ChNodeXYZ_GetDensity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChNodeXYZ_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChNodeXYZ_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d pos {
    set {
      chronoPINVOKE.ChNodeXYZ_pos_set(swigCPtr, ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChNodeXYZ_pos_get(swigCPtr);
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChVector3d pos_dt {
    set {
      chronoPINVOKE.ChNodeXYZ_pos_dt_set(swigCPtr, ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChNodeXYZ_pos_dt_get(swigCPtr);
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChVector3d pos_dtdt {
    set {
      chronoPINVOKE.ChNodeXYZ_pos_dtdt_set(swigCPtr, ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChNodeXYZ_pos_dtdt_get(swigCPtr);
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
