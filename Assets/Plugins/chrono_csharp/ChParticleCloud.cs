//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChParticleCloud : ChIndexedParticles {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChParticleCloud(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChParticleCloud_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChParticleCloud obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChParticleCloud(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChParticleCloud() : this(chronoPINVOKE.new_ChParticleCloud__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChParticleCloud(ChParticleCloud other) : this(chronoPINVOKE.new_ChParticleCloud__SWIG_1(ChParticleCloud.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableCollision(bool state) {
    chronoPINVOKE.ChParticleCloud_EnableCollision(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool IsCollisionEnabled() {
    bool ret = chronoPINVOKE.ChParticleCloud_IsCollisionEnabled(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFixed(bool state) {
    chronoPINVOKE.ChParticleCloud_SetFixed(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool IsActive() {
    bool ret = chronoPINVOKE.ChParticleCloud_IsActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetLimitSpeed(bool state) {
    chronoPINVOKE.ChParticleCloud_SetLimitSpeed(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetNumParticles() {
    uint ret = chronoPINVOKE.ChParticleCloud_GetNumParticles(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_chrono__ChParticle_p_t GetParticles() {
    SWIGTYPE_p_std__vectorT_chrono__ChParticle_p_t ret = new SWIGTYPE_p_std__vectorT_chrono__ChParticle_p_t(chronoPINVOKE.ChParticleCloud_GetParticles(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetParticlePos(uint n) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChParticleCloud_GetParticlePos(swigCPtr, n), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetParticleVel(uint n) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChParticleCloud_GetParticleVel(swigCPtr, n), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChParticleBase Particle(uint n) {
    ChParticleBase ret = new ChParticleBase(chronoPINVOKE.ChParticleCloud_Particle__SWIG_0(swigCPtr, n), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddCollisionModel(ChCollisionModel model) {
    chronoPINVOKE.ChParticleCloud_AddCollisionModel(swigCPtr, ChCollisionModel.getCPtr(model));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCollisionShape(ChCollisionShape shape, ChFramed frame) {
    chronoPINVOKE.ChParticleCloud_AddCollisionShape__SWIG_0(swigCPtr, ChCollisionShape.getCPtr(shape), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCollisionShape(ChCollisionShape shape) {
    chronoPINVOKE.ChParticleCloud_AddCollisionShape__SWIG_1(swigCPtr, ChCollisionShape.getCPtr(shape));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ResizeNparticles(int newsize) {
    chronoPINVOKE.ChParticleCloud_ResizeNparticles(swigCPtr, newsize);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void AddParticle(ChCoordsysd initial_state) {
    chronoPINVOKE.ChParticleCloud_AddParticle__SWIG_0(swigCPtr, ChCoordsysd.getCPtr(initial_state));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void AddParticle() {
    chronoPINVOKE.ChParticleCloud_AddParticle__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterColorCallback(SWIGTYPE_p_std__shared_ptrT_chrono__ChParticleCloud__ColorCallback_t callback) {
    chronoPINVOKE.ChParticleCloud_RegisterColorCallback(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__ChParticleCloud__ColorCallback_t.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool UseDynamicColors() {
    bool ret = chronoPINVOKE.ChParticleCloud_UseDynamicColors(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChColor GetVisualColor(uint n) {
    ChColor ret = new ChColor(chronoPINVOKE.ChParticleCloud_GetVisualColor(swigCPtr, n), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RegisterVisibilityCallback(SWIGTYPE_p_std__shared_ptrT_chrono__ChParticleCloud__VisibilityCallback_t callback) {
    chronoPINVOKE.ChParticleCloud_RegisterVisibilityCallback(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__ChParticleCloud__VisibilityCallback_t.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsVisible(uint n) {
    bool ret = chronoPINVOKE.ChParticleCloud_IsVisible(swigCPtr, n);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void IntStateGather(uint off_x, ChState x, uint off_v, ChStateDelta v, SWIGTYPE_p_double T) {
    chronoPINVOKE.ChParticleCloud_IntStateGather(swigCPtr, off_x, ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(v), SWIGTYPE_p_double.getCPtr(T));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateScatter(uint off_x, ChState x, uint off_v, ChStateDelta v, double T, bool full_update) {
    chronoPINVOKE.ChParticleCloud_IntStateScatter(swigCPtr, off_x, ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(v), T, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateGatherAcceleration(uint off_a, ChStateDelta a) {
    chronoPINVOKE.ChParticleCloud_IntStateGatherAcceleration(swigCPtr, off_a, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateScatterAcceleration(uint off_a, ChStateDelta a) {
    chronoPINVOKE.ChParticleCloud_IntStateScatterAcceleration(swigCPtr, off_a, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
    chronoPINVOKE.ChParticleCloud_IntStateIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateGetIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
    chronoPINVOKE.ChParticleCloud_IntStateGetIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadResidual_F(uint off, ChVectorDynamicd R, double c) {
    chronoPINVOKE.ChParticleCloud_IntLoadResidual_F(swigCPtr, off, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadResidual_Mv(uint off, ChVectorDynamicd R, ChVectorDynamicd w, double c) {
    chronoPINVOKE.ChParticleCloud_IntLoadResidual_Mv(swigCPtr, off, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadLumpedMass_Md(uint off, ChVectorDynamicd Md, SWIGTYPE_p_double err, double c) {
    chronoPINVOKE.ChParticleCloud_IntLoadLumpedMass_Md(swigCPtr, off, ChVectorDynamicd.getCPtr(Md), SWIGTYPE_p_double.getCPtr(err), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntToDescriptor(uint off_v, ChStateDelta v, ChVectorDynamicd R, uint off_L, ChVectorDynamicd L, ChVectorDynamicd Qc) {
    chronoPINVOKE.ChParticleCloud_IntToDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), ChVectorDynamicd.getCPtr(R), off_L, ChVectorDynamicd.getCPtr(L), ChVectorDynamicd.getCPtr(Qc));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntFromDescriptor(uint off_v, ChStateDelta v, uint off_L, ChVectorDynamicd L) {
    chronoPINVOKE.ChParticleCloud_IntFromDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), off_L, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesFbReset() {
    chronoPINVOKE.ChParticleCloud_VariablesFbReset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesFbLoadForces(double factor) {
    chronoPINVOKE.ChParticleCloud_VariablesFbLoadForces__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesFbLoadForces() {
    chronoPINVOKE.ChParticleCloud_VariablesFbLoadForces__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesQbLoadSpeed() {
    chronoPINVOKE.ChParticleCloud_VariablesQbLoadSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesFbIncrementMq() {
    chronoPINVOKE.ChParticleCloud_VariablesFbIncrementMq(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesQbSetSpeed(double step) {
    chronoPINVOKE.ChParticleCloud_VariablesQbSetSpeed__SWIG_0(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesQbSetSpeed() {
    chronoPINVOKE.ChParticleCloud_VariablesQbSetSpeed__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesQbIncrementPosition(double step) {
    chronoPINVOKE.ChParticleCloud_VariablesQbIncrementPosition(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void InjectVariables(SWIGTYPE_p_ChSystemDescriptor mdescriptor) {
    chronoPINVOKE.ChParticleCloud_InjectVariables(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(mdescriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ForceToRest() {
    chronoPINVOKE.ChParticleCloud_ForceToRest(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void AddCollisionModelsToSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChParticleCloud_AddCollisionModelsToSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void RemoveCollisionModelsFromSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChParticleCloud_RemoveCollisionModelsFromSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SyncCollisionModels() {
    chronoPINVOKE.ChParticleCloud_SyncCollisionModels(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMass(double newmass) {
    chronoPINVOKE.ChParticleCloud_SetMass(swigCPtr, newmass);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMass() {
    double ret = chronoPINVOKE.ChParticleCloud_GetMass(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInertia(ChMatrix33d newXInertia) {
    chronoPINVOKE.ChParticleCloud_SetInertia(swigCPtr, ChMatrix33d.getCPtr(newXInertia));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInertiaXX(ChVector3d iner) {
    chronoPINVOKE.ChParticleCloud_SetInertiaXX(swigCPtr, ChVector3d.getCPtr(iner));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetInertiaXX() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChParticleCloud_GetInertiaXX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInertiaXY(ChVector3d iner) {
    chronoPINVOKE.ChParticleCloud_SetInertiaXY(swigCPtr, ChVector3d.getCPtr(iner));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetInertiaXY() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChParticleCloud_GetInertiaXY(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxLinVel(float m_max_speed) {
    chronoPINVOKE.ChParticleCloud_SetMaxLinVel(swigCPtr, m_max_speed);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetMaxLinVel() {
    float ret = chronoPINVOKE.ChParticleCloud_GetMaxLinVel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxAngVel(float m_max_wvel) {
    chronoPINVOKE.ChParticleCloud_SetMaxAngVel(swigCPtr, m_max_wvel);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetMaxAngVel() {
    float ret = chronoPINVOKE.ChParticleCloud_GetMaxAngVel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ClampSpeed() {
    chronoPINVOKE.ChParticleCloud_ClampSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSleepTime(float m_t) {
    chronoPINVOKE.ChParticleCloud_SetSleepTime(swigCPtr, m_t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetSleepTime() {
    float ret = chronoPINVOKE.ChParticleCloud_GetSleepTime(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSleepMinLinVel(float m_t) {
    chronoPINVOKE.ChParticleCloud_SetSleepMinLinVel(swigCPtr, m_t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetSleepMinLinVel() {
    float ret = chronoPINVOKE.ChParticleCloud_GetSleepMinLinVel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSleepMinAngVel(float m_t) {
    chronoPINVOKE.ChParticleCloud_SetSleepMinAngVel(swigCPtr, m_t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetSleepMinAngVel() {
    float ret = chronoPINVOKE.ChParticleCloud_GetSleepMinAngVel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Update(double mytime, bool update_assets) {
    chronoPINVOKE.ChParticleCloud_Update__SWIG_0(swigCPtr, mytime, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime) {
    chronoPINVOKE.ChParticleCloud_Update__SWIG_1(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(bool update_assets) {
    chronoPINVOKE.ChParticleCloud_Update__SWIG_2(swigCPtr, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update() {
    chronoPINVOKE.ChParticleCloud_Update__SWIG_3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChParticleCloud_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChParticleCloud_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
