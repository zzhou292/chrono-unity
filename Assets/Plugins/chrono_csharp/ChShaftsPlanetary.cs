//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChShaftsPlanetary : ChPhysicsItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChShaftsPlanetary(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChShaftsPlanetary_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChShaftsPlanetary obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChShaftsPlanetary(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChShaftsPlanetary() : this(chronoPINVOKE.new_ChShaftsPlanetary__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChShaftsPlanetary(ChShaftsPlanetary other) : this(chronoPINVOKE.new_ChShaftsPlanetary__SWIG_1(ChShaftsPlanetary.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Initialize(ChShaft shaft_1, ChShaft shaft_2, ChShaft shaft_3) {
    bool ret = chronoPINVOKE.ChShaftsPlanetary_Initialize(swigCPtr, ChShaft.getCPtr(shaft_1), ChShaft.getCPtr(shaft_2), ChShaft.getCPtr(shaft_3));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDisabled(bool val) {
    chronoPINVOKE.ChShaftsPlanetary_SetDisabled(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChShaft GetShaft1() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChShaftsPlanetary_GetShaft1(swigCPtr);
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChShaft GetShaft2() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChShaftsPlanetary_GetShaft2(swigCPtr);
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChShaft GetShaft3() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChShaftsPlanetary_GetShaft3(swigCPtr);
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpeedShaft1() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetSpeedShaft1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpeedShaft2() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetSpeedShaft2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpeedShaft3() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetSpeedShaft3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTransmissionRatios(double r_1, double r_2, double r_3) {
    chronoPINVOKE.ChShaftsPlanetary_SetTransmissionRatios(swigCPtr, r_1, r_2, r_3);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransmissionRatioOrdinary(double t0) {
    chronoPINVOKE.ChShaftsPlanetary_SetTransmissionRatioOrdinary(swigCPtr, t0);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTransmissionRatioOrdinary() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetTransmissionRatioOrdinary(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTransmissionR1() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetTransmissionR1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTransmissionR2() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetTransmissionR2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTransmissionR3() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetTransmissionR3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AvoidPhaseDrift(bool avoid) {
    chronoPINVOKE.ChShaftsPlanetary_AvoidPhaseDrift(swigCPtr, avoid);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetReaction1() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetReaction1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetReaction2() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetReaction2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTorqueReactionOn3() {
    double ret = chronoPINVOKE.ChShaftsPlanetary_GetTorqueReactionOn3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChShaftsPlanetary_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChShaftsPlanetary_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
