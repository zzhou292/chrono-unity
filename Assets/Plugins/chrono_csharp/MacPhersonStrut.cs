//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class MacPhersonStrut : ChMacPhersonStrut {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal MacPhersonStrut(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.MacPhersonStrut_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(MacPhersonStrut obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_MacPhersonStrut(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public MacPhersonStrut(string filename) : this(chrono_vehiclePINVOKE.new_MacPhersonStrut__SWIG_0(filename), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public MacPhersonStrut(SWIGTYPE_p_rapidjson__Document d) : this(chrono_vehiclePINVOKE.new_MacPhersonStrut__SWIG_1(SWIGTYPE_p_rapidjson__Document.getCPtr(d)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool UseTierodBodies() {
    bool ret = chrono_vehiclePINVOKE.MacPhersonStrut_UseTierodBodies(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getCamberAngle() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getCamberAngle(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getToeAngle() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getToeAngle(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getSpindleMass() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getSpindleMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getStrutMass() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getStrutMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getLCAMass() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getLCAMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getUprightMass() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getUprightMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getTierodMass() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getTierodMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getSpindleRadius() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getSpindleRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getSpindleWidth() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getSpindleWidth(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getStrutRadius() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getStrutRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getLCARadius() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getLCARadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getUprightRadius() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getUprightRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getTierodRadius() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getTierodRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getSpindleInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.MacPhersonStrut_getSpindleInertia(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getStrutInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.MacPhersonStrut_getStrutInertia(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getLCAInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.MacPhersonStrut_getLCAInertia(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getUprightInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.MacPhersonStrut_getUprightInertia(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getTierodInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.MacPhersonStrut_getTierodInertia(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getAxleInertia() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getAxleInertia(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getSpringRestLength() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getSpringRestLength(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getShockRestLength() {
    double ret = chrono_vehiclePINVOKE.MacPhersonStrut_getShockRestLength(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ForceFunctor getSpringForceFunctor() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.MacPhersonStrut_getSpringForceFunctor(swigCPtr);
    ForceFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceFunctor(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ForceFunctor getShockForceFunctor() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.MacPhersonStrut_getShockForceFunctor(swigCPtr);
    ForceFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceFunctor(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t getLCABushingData() {
    SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t ret = new SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t(chrono_vehiclePINVOKE.MacPhersonStrut_getLCABushingData(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t getTierodBushingData() {
    SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t ret = new SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t(chrono_vehiclePINVOKE.MacPhersonStrut_getTierodBushingData(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
