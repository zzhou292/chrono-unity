//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChBezierCurve : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChBezierCurve(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChBezierCurve obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChBezierCurve() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChBezierCurve(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChBezierCurve(vector_ChVector3d points, vector_ChVector3d inCV, vector_ChVector3d outCV, bool closed) : this(chronoPINVOKE.new_ChBezierCurve__SWIG_0(vector_ChVector3d.getCPtr(points), vector_ChVector3d.getCPtr(inCV), vector_ChVector3d.getCPtr(outCV), closed), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBezierCurve(vector_ChVector3d points, vector_ChVector3d inCV, vector_ChVector3d outCV) : this(chronoPINVOKE.new_ChBezierCurve__SWIG_1(vector_ChVector3d.getCPtr(points), vector_ChVector3d.getCPtr(inCV), vector_ChVector3d.getCPtr(outCV)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBezierCurve(vector_ChVector3d points, bool closed) : this(chronoPINVOKE.new_ChBezierCurve__SWIG_2(vector_ChVector3d.getCPtr(points), closed), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBezierCurve(vector_ChVector3d points) : this(chronoPINVOKE.new_ChBezierCurve__SWIG_3(vector_ChVector3d.getCPtr(points)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBezierCurve() : this(chronoPINVOKE.new_ChBezierCurve__SWIG_4(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void setPoints(vector_ChVector3d points, vector_ChVector3d inCV, vector_ChVector3d outCV) {
    chronoPINVOKE.ChBezierCurve_setPoints(swigCPtr, vector_ChVector3d.getCPtr(points), vector_ChVector3d.getCPtr(inCV), vector_ChVector3d.getCPtr(outCV));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumPoints() {
    uint ret = chronoPINVOKE.ChBezierCurve_GetNumPoints(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumSegments() {
    uint ret = chronoPINVOKE.ChBezierCurve_GetNumSegments(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsClosed() {
    bool ret = chronoPINVOKE.ChBezierCurve_IsClosed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint(uint i) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBezierCurve_GetPoint(swigCPtr, i), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3d GetPoints() {
    vector_ChVector3d ret = new vector_ChVector3d(chronoPINVOKE.ChBezierCurve_GetPoints(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d Eval(double t) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBezierCurve_Eval__SWIG_0(swigCPtr, t), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d Eval(uint i, double t) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBezierCurve_Eval__SWIG_1(swigCPtr, i, t), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d EvalDer(uint i, double t) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBezierCurve_EvalDer(swigCPtr, i, t), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d EvalDer2(uint i, double t) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBezierCurve_EvalDer2(swigCPtr, i, t), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d CalcClosestPoint(ChVector3d loc, uint i, SWIGTYPE_p_double t) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBezierCurve_CalcClosestPoint(swigCPtr, ChVector3d.getCPtr(loc), i, SWIGTYPE_p_double.getCPtr(t)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Write(string filename) {
    chronoPINVOKE.ChBezierCurve_Write(swigCPtr, filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChBezierCurve Read(string filename, bool closed) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChBezierCurve_Read__SWIG_0(filename, closed);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBezierCurve Read(string filename) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChBezierCurve_Read__SWIG_1(filename);
    ChBezierCurve ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBezierCurve(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChBezierCurve_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChBezierCurve_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
