//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SoilParametersCallback : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal SoilParametersCallback(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SoilParametersCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SoilParametersCallback() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_SoilParametersCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual void Set(ChVector3d loc, SWIGTYPE_p_double Bekker_Kphi, SWIGTYPE_p_double Bekker_Kc, SWIGTYPE_p_double Bekker_n, SWIGTYPE_p_double Mohr_cohesion, SWIGTYPE_p_double Mohr_friction, SWIGTYPE_p_double Janosi_shear, SWIGTYPE_p_double elastic_K, SWIGTYPE_p_double damping_R) {
    chrono_vehiclePINVOKE.SoilParametersCallback_Set(swigCPtr, ChVector3d.getCPtr(loc), SWIGTYPE_p_double.getCPtr(Bekker_Kphi), SWIGTYPE_p_double.getCPtr(Bekker_Kc), SWIGTYPE_p_double.getCPtr(Bekker_n), SWIGTYPE_p_double.getCPtr(Mohr_cohesion), SWIGTYPE_p_double.getCPtr(Mohr_friction), SWIGTYPE_p_double.getCPtr(Janosi_shear), SWIGTYPE_p_double.getCPtr(elastic_K), SWIGTYPE_p_double.getCPtr(damping_R));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public SoilParametersCallback() : this(chrono_vehiclePINVOKE.new_SoilParametersCallback(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("Set", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateSoilParametersCallback_0(SwigDirectorMethodSet);
    chrono_vehiclePINVOKE.SoilParametersCallback_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(SoilParametersCallback));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodSet(global::System.IntPtr loc, global::System.IntPtr Bekker_Kphi, global::System.IntPtr Bekker_Kc, global::System.IntPtr Bekker_n, global::System.IntPtr Mohr_cohesion, global::System.IntPtr Mohr_friction, global::System.IntPtr Janosi_shear, global::System.IntPtr elastic_K, global::System.IntPtr damping_R) {
    Set(new ChVector3d(loc, false), new SWIGTYPE_p_double(Bekker_Kphi, false), new SWIGTYPE_p_double(Bekker_Kc, false), new SWIGTYPE_p_double(Bekker_n, false), new SWIGTYPE_p_double(Mohr_cohesion, false), new SWIGTYPE_p_double(Mohr_friction, false), new SWIGTYPE_p_double(Janosi_shear, false), new SWIGTYPE_p_double(elastic_K, false), new SWIGTYPE_p_double(damping_R, false));
  }

  public delegate void SwigDelegateSoilParametersCallback_0(global::System.IntPtr loc, global::System.IntPtr Bekker_Kphi, global::System.IntPtr Bekker_Kc, global::System.IntPtr Bekker_n, global::System.IntPtr Mohr_cohesion, global::System.IntPtr Mohr_friction, global::System.IntPtr Janosi_shear, global::System.IntPtr elastic_K, global::System.IntPtr damping_R);

  private SwigDelegateSoilParametersCallback_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ChVector3d), typeof(SWIGTYPE_p_double), typeof(SWIGTYPE_p_double), typeof(SWIGTYPE_p_double), typeof(SWIGTYPE_p_double), typeof(SWIGTYPE_p_double), typeof(SWIGTYPE_p_double), typeof(SWIGTYPE_p_double), typeof(SWIGTYPE_p_double) };
}
