//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionPositionXYZFunctions : ChFunctionPosition {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunctionPositionXYZFunctions(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChFunctionPositionXYZFunctions_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionPositionXYZFunctions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChFunctionPositionXYZFunctions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunctionPositionXYZFunctions() : this(chronoPINVOKE.new_ChFunctionPositionXYZFunctions__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionPositionXYZFunctions(ChFunctionPositionXYZFunctions other) : this(chronoPINVOKE.new_ChFunctionPositionXYZFunctions__SWIG_1(ChFunctionPositionXYZFunctions.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFunctionX(ChFunction mx) {
    chronoPINVOKE.ChFunctionPositionXYZFunctions_SetFunctionX(swigCPtr, ChFunction.getCPtr(mx));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetFunctionX() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionPositionXYZFunctions_GetFunctionX(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFunctionY(ChFunction my) {
    chronoPINVOKE.ChFunctionPositionXYZFunctions_SetFunctionY(swigCPtr, ChFunction.getCPtr(my));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetFunctionY() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionPositionXYZFunctions_GetFunctionY(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFunctionZ(ChFunction mz) {
    chronoPINVOKE.ChFunctionPositionXYZFunctions_SetFunctionZ(swigCPtr, ChFunction.getCPtr(mz));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetFunctionZ() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionPositionXYZFunctions_GetFunctionZ(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d GetPos(double s) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFunctionPositionXYZFunctions_GetPos(swigCPtr, s), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d GetLinVel(double s) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFunctionPositionXYZFunctions_GetLinVel(swigCPtr, s), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d GetLinAcc(double s) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFunctionPositionXYZFunctions_GetLinAcc(swigCPtr, s), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChFunctionPositionXYZFunctions_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChFunctionPositionXYZFunctions_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
