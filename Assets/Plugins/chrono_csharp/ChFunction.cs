//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunction : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChFunction(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunction obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChFunction() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChFunction(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChFunction() : this(chronoPINVOKE.new_ChFunction__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public ChFunction(ChFunction other) : this(chronoPINVOKE.new_ChFunction__SWIG_1(ChFunction.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual ChFunction.Type GetFunctionType() {
    ChFunction.Type ret = (ChFunction.Type)(SwigDerivedClassHasMethod("GetFunctionType", swigMethodTypes0) ? chronoPINVOKE.ChFunction_GetFunctionTypeSwigExplicitChFunction(swigCPtr) : chronoPINVOKE.ChFunction_GetFunctionType(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetVal(double x) {
    double ret = chronoPINVOKE.ChFunction_GetVal(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDer(double x) {
    double ret = (SwigDerivedClassHasMethod("GetDer", swigMethodTypes2) ? chronoPINVOKE.ChFunction_GetDerSwigExplicitChFunction(swigCPtr, x) : chronoPINVOKE.ChFunction_GetDer(swigCPtr, x));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDer2(double x) {
    double ret = (SwigDerivedClassHasMethod("GetDer2", swigMethodTypes3) ? chronoPINVOKE.ChFunction_GetDer2SwigExplicitChFunction(swigCPtr, x) : chronoPINVOKE.ChFunction_GetDer2(swigCPtr, x));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDer3(double x) {
    double ret = (SwigDerivedClassHasMethod("GetDer3", swigMethodTypes4) ? chronoPINVOKE.ChFunction_GetDer3SwigExplicitChFunction(swigCPtr, x) : chronoPINVOKE.ChFunction_GetDer3(swigCPtr, x));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDerN(double x, int der_order) {
    double ret = (SwigDerivedClassHasMethod("GetDerN", swigMethodTypes5) ? chronoPINVOKE.ChFunction_GetDerNSwigExplicitChFunction(swigCPtr, x, der_order) : chronoPINVOKE.ChFunction_GetDerN(swigCPtr, x, der_order));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetWeight(double x) {
    double ret = (SwigDerivedClassHasMethod("GetWeight", swigMethodTypes6) ? chronoPINVOKE.ChFunction_GetWeightSwigExplicitChFunction(swigCPtr, x) : chronoPINVOKE.ChFunction_GetWeight(swigCPtr, x));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Update(double x) {
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes7)) chronoPINVOKE.ChFunction_UpdateSwigExplicitChFunction(swigCPtr, x); else chronoPINVOKE.ChFunction_Update(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetMax(double xmin, double xmax, double sampling_step, int der_order) {
    double ret = (SwigDerivedClassHasMethod("GetMax", swigMethodTypes8) ? chronoPINVOKE.ChFunction_GetMaxSwigExplicitChFunction(swigCPtr, xmin, xmax, sampling_step, der_order) : chronoPINVOKE.ChFunction_GetMax(swigCPtr, xmin, xmax, sampling_step, der_order));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetMin(double xmin, double xmax, double sampling_step, int der_order) {
    double ret = (SwigDerivedClassHasMethod("GetMin", swigMethodTypes9) ? chronoPINVOKE.ChFunction_GetMinSwigExplicitChFunction(swigCPtr, xmin, xmax, sampling_step, der_order) : chronoPINVOKE.ChFunction_GetMin(swigCPtr, xmin, xmax, sampling_step, der_order));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetMean(double xmin, double xmax, double sampling_step, int der_order) {
    double ret = (SwigDerivedClassHasMethod("GetMean", swigMethodTypes10) ? chronoPINVOKE.ChFunction_GetMeanSwigExplicitChFunction(swigCPtr, xmin, xmax, sampling_step, der_order) : chronoPINVOKE.ChFunction_GetMean(swigCPtr, xmin, xmax, sampling_step, der_order));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetSquaredMean(double xmin, double xmax, double sampling_step, int der_order) {
    double ret = (SwigDerivedClassHasMethod("GetSquaredMean", swigMethodTypes11) ? chronoPINVOKE.ChFunction_GetSquaredMeanSwigExplicitChFunction(swigCPtr, xmin, xmax, sampling_step, der_order) : chronoPINVOKE.ChFunction_GetSquaredMean(swigCPtr, xmin, xmax, sampling_step, der_order));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetIntegral(double xmin, double xmax, double sampling_step, int der_order) {
    double ret = (SwigDerivedClassHasMethod("GetIntegral", swigMethodTypes12) ? chronoPINVOKE.ChFunction_GetIntegralSwigExplicitChFunction(swigCPtr, xmin, xmax, sampling_step, der_order) : chronoPINVOKE.ChFunction_GetIntegral(swigCPtr, xmin, xmax, sampling_step, der_order));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetPositiveAccelerationCoeff() {
    double ret = (SwigDerivedClassHasMethod("GetPositiveAccelerationCoeff", swigMethodTypes13) ? chronoPINVOKE.ChFunction_GetPositiveAccelerationCoeffSwigExplicitChFunction(swigCPtr) : chronoPINVOKE.ChFunction_GetPositiveAccelerationCoeff(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetNegativeAccelerationCoeff() {
    double ret = (SwigDerivedClassHasMethod("GetNegativeAccelerationCoeff", swigMethodTypes14) ? chronoPINVOKE.ChFunction_GetNegativeAccelerationCoeffSwigExplicitChFunction(swigCPtr) : chronoPINVOKE.ChFunction_GetNegativeAccelerationCoeff(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetVelocityCoefficient() {
    double ret = (SwigDerivedClassHasMethod("GetVelocityCoefficient", swigMethodTypes15) ? chronoPINVOKE.ChFunction_GetVelocityCoefficientSwigExplicitChFunction(swigCPtr) : chronoPINVOKE.ChFunction_GetVelocityCoefficient(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void OutputToASCIIFile(SWIGTYPE_p_std__ostream file, double xmin, double xmax, int samples, char delimiter) {
    if (SwigDerivedClassHasMethod("OutputToASCIIFile", swigMethodTypes16)) chronoPINVOKE.ChFunction_OutputToASCIIFileSwigExplicitChFunction(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(file), xmin, xmax, samples, delimiter); else chronoPINVOKE.ChFunction_OutputToASCIIFile(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(file), xmin, xmax, samples, delimiter);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChMatrixDynamicd SampleUpToDerN(double xmin, double xmax, double step, int derN) {
    ChMatrixDynamicd ret = new ChMatrixDynamicd((SwigDerivedClassHasMethod("SampleUpToDerN", swigMethodTypes17) ? chronoPINVOKE.ChFunction_SampleUpToDerNSwigExplicitChFunction__SWIG_0(swigCPtr, xmin, xmax, step, derN) : chronoPINVOKE.ChFunction_SampleUpToDerN__SWIG_0(swigCPtr, xmin, xmax, step, derN)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChMatrixDynamicd SampleUpToDerN(double xmin, double xmax, double step) {
    ChMatrixDynamicd ret = new ChMatrixDynamicd((SwigDerivedClassHasMethod("SampleUpToDerN", swigMethodTypes18) ? chronoPINVOKE.ChFunction_SampleUpToDerNSwigExplicitChFunction__SWIG_1(swigCPtr, xmin, xmax, step) : chronoPINVOKE.ChFunction_SampleUpToDerN__SWIG_1(swigCPtr, xmin, xmax, step)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes19)) chronoPINVOKE.ChFunction_ArchiveOutSwigExplicitChFunction(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out)); else chronoPINVOKE.ChFunction_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes20)) chronoPINVOKE.ChFunction_ArchiveInSwigExplicitChFunction(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in)); else chronoPINVOKE.ChFunction_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetFunctionType", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChFunction_0(SwigDirectorMethodGetFunctionType);
    if (SwigDerivedClassHasMethod("GetVal", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChFunction_1(SwigDirectorMethodGetVal);
    if (SwigDerivedClassHasMethod("GetDer", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChFunction_2(SwigDirectorMethodGetDer);
    if (SwigDerivedClassHasMethod("GetDer2", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChFunction_3(SwigDirectorMethodGetDer2);
    if (SwigDerivedClassHasMethod("GetDer3", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChFunction_4(SwigDirectorMethodGetDer3);
    if (SwigDerivedClassHasMethod("GetDerN", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChFunction_5(SwigDirectorMethodGetDerN);
    if (SwigDerivedClassHasMethod("GetWeight", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateChFunction_6(SwigDirectorMethodGetWeight);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateChFunction_7(SwigDirectorMethodUpdate);
    if (SwigDerivedClassHasMethod("GetMax", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateChFunction_8(SwigDirectorMethodGetMax);
    if (SwigDerivedClassHasMethod("GetMin", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateChFunction_9(SwigDirectorMethodGetMin);
    if (SwigDerivedClassHasMethod("GetMean", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateChFunction_10(SwigDirectorMethodGetMean);
    if (SwigDerivedClassHasMethod("GetSquaredMean", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateChFunction_11(SwigDirectorMethodGetSquaredMean);
    if (SwigDerivedClassHasMethod("GetIntegral", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateChFunction_12(SwigDirectorMethodGetIntegral);
    if (SwigDerivedClassHasMethod("GetPositiveAccelerationCoeff", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateChFunction_13(SwigDirectorMethodGetPositiveAccelerationCoeff);
    if (SwigDerivedClassHasMethod("GetNegativeAccelerationCoeff", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateChFunction_14(SwigDirectorMethodGetNegativeAccelerationCoeff);
    if (SwigDerivedClassHasMethod("GetVelocityCoefficient", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateChFunction_15(SwigDirectorMethodGetVelocityCoefficient);
    if (SwigDerivedClassHasMethod("OutputToASCIIFile", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateChFunction_16(SwigDirectorMethodOutputToASCIIFile);
    if (SwigDerivedClassHasMethod("SampleUpToDerN", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateChFunction_17(SwigDirectorMethodSampleUpToDerN__SWIG_0);
    if (SwigDerivedClassHasMethod("SampleUpToDerN", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateChFunction_18(SwigDirectorMethodSampleUpToDerN__SWIG_1);
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateChFunction_19(SwigDirectorMethodArchiveOut);
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateChFunction_20(SwigDirectorMethodArchiveIn);
    chronoPINVOKE.ChFunction_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChFunction));
    return hasDerivedMethod;
  }

  private int SwigDirectorMethodGetFunctionType() {
    return (int)GetFunctionType();
  }

  private double SwigDirectorMethodGetVal(double x) {
    return GetVal(x);
  }

  private double SwigDirectorMethodGetDer(double x) {
    return GetDer(x);
  }

  private double SwigDirectorMethodGetDer2(double x) {
    return GetDer2(x);
  }

  private double SwigDirectorMethodGetDer3(double x) {
    return GetDer3(x);
  }

  private double SwigDirectorMethodGetDerN(double x, int der_order) {
    return GetDerN(x, der_order);
  }

  private double SwigDirectorMethodGetWeight(double x) {
    return GetWeight(x);
  }

  private void SwigDirectorMethodUpdate(double x) {
    Update(x);
  }

  private double SwigDirectorMethodGetMax(double xmin, double xmax, double sampling_step, int der_order) {
    return GetMax(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetMin(double xmin, double xmax, double sampling_step, int der_order) {
    return GetMin(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetMean(double xmin, double xmax, double sampling_step, int der_order) {
    return GetMean(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetSquaredMean(double xmin, double xmax, double sampling_step, int der_order) {
    return GetSquaredMean(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetIntegral(double xmin, double xmax, double sampling_step, int der_order) {
    return GetIntegral(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetPositiveAccelerationCoeff() {
    return GetPositiveAccelerationCoeff();
  }

  private double SwigDirectorMethodGetNegativeAccelerationCoeff() {
    return GetNegativeAccelerationCoeff();
  }

  private double SwigDirectorMethodGetVelocityCoefficient() {
    return GetVelocityCoefficient();
  }

  private void SwigDirectorMethodOutputToASCIIFile(global::System.IntPtr file, double xmin, double xmax, int samples, char delimiter) {
    OutputToASCIIFile(new SWIGTYPE_p_std__ostream(file, false), xmin, xmax, samples, delimiter);
  }

  private global::System.IntPtr SwigDirectorMethodSampleUpToDerN__SWIG_0(double xmin, double xmax, double step, int derN) {
    return ChMatrixDynamicd.getCPtr(SampleUpToDerN(xmin, xmax, step, derN)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodSampleUpToDerN__SWIG_1(double xmin, double xmax, double step) {
    return ChMatrixDynamicd.getCPtr(SampleUpToDerN(xmin, xmax, step)).Handle;
  }

  private void SwigDirectorMethodArchiveOut(global::System.IntPtr archive_out) {
    ArchiveOut(new SWIGTYPE_p_chrono__ChArchiveOut(archive_out, false));
  }

  private void SwigDirectorMethodArchiveIn(global::System.IntPtr archive_in) {
    ArchiveIn(new SWIGTYPE_p_chrono__ChArchiveIn(archive_in, false));
  }

  public delegate int SwigDelegateChFunction_0();
  public delegate double SwigDelegateChFunction_1(double x);
  public delegate double SwigDelegateChFunction_2(double x);
  public delegate double SwigDelegateChFunction_3(double x);
  public delegate double SwigDelegateChFunction_4(double x);
  public delegate double SwigDelegateChFunction_5(double x, int der_order);
  public delegate double SwigDelegateChFunction_6(double x);
  public delegate void SwigDelegateChFunction_7(double x);
  public delegate double SwigDelegateChFunction_8(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunction_9(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunction_10(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunction_11(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunction_12(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunction_13();
  public delegate double SwigDelegateChFunction_14();
  public delegate double SwigDelegateChFunction_15();
  public delegate void SwigDelegateChFunction_16(global::System.IntPtr file, double xmin, double xmax, int samples, char delimiter);
  public delegate global::System.IntPtr SwigDelegateChFunction_17(double xmin, double xmax, double step, int derN);
  public delegate global::System.IntPtr SwigDelegateChFunction_18(double xmin, double xmax, double step);
  public delegate void SwigDelegateChFunction_19(global::System.IntPtr archive_out);
  public delegate void SwigDelegateChFunction_20(global::System.IntPtr archive_in);

  private SwigDelegateChFunction_0 swigDelegate0;
  private SwigDelegateChFunction_1 swigDelegate1;
  private SwigDelegateChFunction_2 swigDelegate2;
  private SwigDelegateChFunction_3 swigDelegate3;
  private SwigDelegateChFunction_4 swigDelegate4;
  private SwigDelegateChFunction_5 swigDelegate5;
  private SwigDelegateChFunction_6 swigDelegate6;
  private SwigDelegateChFunction_7 swigDelegate7;
  private SwigDelegateChFunction_8 swigDelegate8;
  private SwigDelegateChFunction_9 swigDelegate9;
  private SwigDelegateChFunction_10 swigDelegate10;
  private SwigDelegateChFunction_11 swigDelegate11;
  private SwigDelegateChFunction_12 swigDelegate12;
  private SwigDelegateChFunction_13 swigDelegate13;
  private SwigDelegateChFunction_14 swigDelegate14;
  private SwigDelegateChFunction_15 swigDelegate15;
  private SwigDelegateChFunction_16 swigDelegate16;
  private SwigDelegateChFunction_17 swigDelegate17;
  private SwigDelegateChFunction_18 swigDelegate18;
  private SwigDelegateChFunction_19 swigDelegate19;
  private SwigDelegateChFunction_20 swigDelegate20;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(SWIGTYPE_p_std__ostream), typeof(double), typeof(double), typeof(int), typeof(char) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveOut) };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveIn) };
  public enum Type {
    BSPLINE,
    CONSTANT,
    CONSTACC,
    CONSTJERK,
    CUSTOM,
    CYCLOIDAL,
    DERIVATIVE,
    FILLET3,
    INTEGRAL,
    INTERP,
    LAMBDA,
    MIRROR,
    OPERATOR,
    POLY,
    POLY23,
    POLY345,
    RAMP,
    REPEAT,
    SEQUENCE,
    SINE,
    SINE_STEP
  }

}
