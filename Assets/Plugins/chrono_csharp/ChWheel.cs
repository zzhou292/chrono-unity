//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChWheel : ChPart {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChWheel(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChWheel_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChWheel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChWheel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override string GetTemplateName() {
    string ret = chrono_vehiclePINVOKE.ChWheel_GetTemplateName(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetRadius() {
    double ret = chrono_vehiclePINVOKE.ChWheel_GetRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetWidth() {
    double ret = chrono_vehiclePINVOKE.ChWheel_GetWidth(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Initialize(ChChassis chassis, ChBody spindle, VehicleSide side, double offset) {
    chrono_vehiclePINVOKE.ChWheel_Initialize__SWIG_0(swigCPtr, ChChassis.getCPtr(chassis), ChBody.getCPtr(spindle), (int)side, offset);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChChassis chassis, ChBody spindle, VehicleSide side) {
    chrono_vehiclePINVOKE.ChWheel_Initialize__SWIG_1(swigCPtr, ChChassis.getCPtr(chassis), ChBody.getCPtr(spindle), (int)side);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableCollision(bool state) {
    chrono_vehiclePINVOKE.ChWheel_EnableCollision(swigCPtr, state);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize() {
    chrono_vehiclePINVOKE.ChWheel_Synchronize__SWIG_0(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(TerrainForce tire_force) {
    chrono_vehiclePINVOKE.ChWheel_Synchronize__SWIG_1(swigCPtr, TerrainForce.getCPtr(tire_force));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTire_t GetTire() {
    SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTire_t ret = new SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTire_t(chrono_vehiclePINVOKE.ChWheel_GetTire(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTire(SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTire_t tire) {
    chrono_vehiclePINVOKE.ChWheel_SetTire(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTire_t.getCPtr(tire));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBody GetSpindle() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChWheel_GetSpindle(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public VehicleSide GetSide() {
    VehicleSide ret = (VehicleSide)chrono_vehiclePINVOKE.ChWheel_GetSide(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPos() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChWheel_GetPos(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public WheelState GetState() {
    WheelState ret = new WheelState(chrono_vehiclePINVOKE.ChWheel_GetState(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void AddVisualizationAssets(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChWheel_AddVisualizationAssets(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void RemoveVisualizationAssets() {
    chrono_vehiclePINVOKE.ChWheel_RemoveVisualizationAssets(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetMeshFilename() {
    string ret = chrono_vehiclePINVOKE.ChWheel_GetMeshFilename(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
