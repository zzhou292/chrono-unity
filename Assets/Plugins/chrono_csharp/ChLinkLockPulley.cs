//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkLockPulley : ChLinkLockLock {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkLockPulley(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkLockPulley_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkLockPulley obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkLockPulley(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkLockPulley() : this(chronoPINVOKE.new_ChLinkLockPulley__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkLockPulley(ChLinkLockPulley other) : this(chronoPINVOKE.new_ChLinkLockPulley__SWIG_1(ChLinkLockPulley.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void UpdateTime(double mytime) {
    chronoPINVOKE.ChLinkLockPulley_UpdateTime(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRadius1(double mr) {
    chronoPINVOKE.ChLinkLockPulley_SetRadius1(swigCPtr, mr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRadius2(double mr) {
    chronoPINVOKE.ChLinkLockPulley_SetRadius2(swigCPtr, mr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRadius1() {
    double ret = chronoPINVOKE.ChLinkLockPulley_GetRadius1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRadius2() {
    double ret = chronoPINVOKE.ChLinkLockPulley_GetRadius2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTransmissionRatio() {
    double ret = chronoPINVOKE.ChLinkLockPulley_GetTransmissionRatio(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetPhase() {
    double ret = chronoPINVOKE.ChLinkLockPulley_GetPhase(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPhase(double mset) {
    chronoPINVOKE.ChLinkLockPulley_SetPhase(swigCPtr, mset);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetEnforcePhase(bool mset) {
    chronoPINVOKE.ChLinkLockPulley_SetEnforcePhase(swigCPtr, mset);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetEnforcePhase() {
    bool ret = chronoPINVOKE.ChLinkLockPulley_GetEnforcePhase(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRotation1() {
    double ret = chronoPINVOKE.ChLinkLockPulley_GetRotation1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRotation2() {
    double ret = chronoPINVOKE.ChLinkLockPulley_GetRotation2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ResetRotations() {
    chronoPINVOKE.ChLinkLockPulley_ResetRotations(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed GetFrameShaft1() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkLockPulley_GetFrameShaft1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFrameShaft1(ChFramed mf) {
    chronoPINVOKE.ChLinkLockPulley_SetFrameShaft1(swigCPtr, ChFramed.getCPtr(mf));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed GetFrameShaft2() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkLockPulley_GetFrameShaft2(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFrameShaft2(ChFramed mf) {
    chronoPINVOKE.ChLinkLockPulley_SetFrameShaft2(swigCPtr, ChFramed.getCPtr(mf));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetDirShaft1() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockPulley_GetDirShaft1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetDirShaft2() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockPulley_GetDirShaft2(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPosShaft1() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockPulley_GetPosShaft1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPosShaft2() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockPulley_GetPosShaft2(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetBeltUpPos1() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockPulley_GetBeltUpPos1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetBeltUpPos2() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockPulley_GetBeltUpPos2(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetBeltBottomPos1() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockPulley_GetBeltBottomPos1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetBeltBottomPos2() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockPulley_GetBeltBottomPos2(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetShaftsDistance() {
    double ret = chronoPINVOKE.ChLinkLockPulley_GetShaftsDistance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkLockPulley_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkLockPulley_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
