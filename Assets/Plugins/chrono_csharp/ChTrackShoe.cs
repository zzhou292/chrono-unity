//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTrackShoe : ChPart {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTrackShoe(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChTrackShoe_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTrackShoe obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChTrackShoe(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual new GuidePinType GetType() {
    GuidePinType ret = (GuidePinType)chrono_vehiclePINVOKE.ChTrackShoe_GetType(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetIndex() {
    uint ret = chrono_vehiclePINVOKE.ChTrackShoe_GetIndex(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody GetShoeBody() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackShoe_GetShoeBody(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetTension() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackShoe_GetTension(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetHeight() {
    double ret = chrono_vehiclePINVOKE.ChTrackShoe_GetHeight(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetPitch() {
    double ret = chrono_vehiclePINVOKE.ChTrackShoe_GetPitch(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetLateralContactPoint() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackShoe_GetLateralContactPoint(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChBodyGeometry GetGroundContactGeometry() {
    ChBodyGeometry ret = new ChBodyGeometry(chrono_vehiclePINVOKE.ChTrackShoe_GetGroundContactGeometry(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EnableCollision(bool val) {
    chrono_vehiclePINVOKE.ChTrackShoe_EnableCollision(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChBodyAuxRef chassis, ChVector3d location, ChQuaterniond rotation) {
    chrono_vehiclePINVOKE.ChTrackShoe_Initialize(swigCPtr, ChBodyAuxRef.getCPtr(chassis), ChVector3d.getCPtr(location), ChQuaterniond.getCPtr(rotation));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIndex(uint index) {
    chrono_vehiclePINVOKE.ChTrackShoe_SetIndex(swigCPtr, index);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Connect(ChTrackShoe next, ChTrackAssembly assembly, ChChassis chassis, bool ccw) {
    chrono_vehiclePINVOKE.ChTrackShoe_Connect(swigCPtr, ChTrackShoe.getCPtr(next), ChTrackAssembly.getCPtr(assembly), ChChassis.getCPtr(chassis), ccw);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
