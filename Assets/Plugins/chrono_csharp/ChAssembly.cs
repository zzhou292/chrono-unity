//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChAssembly : ChPhysicsItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChAssembly(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChAssembly_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChAssembly obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChAssembly(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChAssembly() : this(chronoPINVOKE.new_ChAssembly__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChAssembly(ChAssembly other) : this(chronoPINVOKE.new_ChAssembly__SWIG_1(ChAssembly.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    chronoPINVOKE.ChAssembly_Clear(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBody(ChBody body) {
    chronoPINVOKE.ChAssembly_AddBody(swigCPtr, ChBody.getCPtr(body));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddShaft(SWIGTYPE_p_std__shared_ptrT_ChShaft_t shaft) {
    chronoPINVOKE.ChAssembly_AddShaft(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChShaft_t.getCPtr(shaft));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddLink(ChLinkBase link) {
    chronoPINVOKE.ChAssembly_AddLink(swigCPtr, ChLinkBase.getCPtr(link));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddMesh(ChMesh mesh) {
    chronoPINVOKE.ChAssembly_AddMesh(swigCPtr, ChMesh.getCPtr(mesh));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddOtherPhysicsItem(ChPhysicsItem item) {
    chronoPINVOKE.ChAssembly_AddOtherPhysicsItem(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(ChPhysicsItem item) {
    chronoPINVOKE.ChAssembly_Add(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBatch(ChPhysicsItem item) {
    chronoPINVOKE.ChAssembly_AddBatch(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void FlushBatch() {
    chronoPINVOKE.ChAssembly_FlushBatch(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveBody(ChBody body) {
    chronoPINVOKE.ChAssembly_RemoveBody(swigCPtr, ChBody.getCPtr(body));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveShaft(SWIGTYPE_p_std__shared_ptrT_ChShaft_t shaft) {
    chronoPINVOKE.ChAssembly_RemoveShaft(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChShaft_t.getCPtr(shaft));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveLink(ChLinkBase link) {
    chronoPINVOKE.ChAssembly_RemoveLink(swigCPtr, ChLinkBase.getCPtr(link));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveMesh(ChMesh mesh) {
    chronoPINVOKE.ChAssembly_RemoveMesh(swigCPtr, ChMesh.getCPtr(mesh));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveOtherPhysicsItem(ChPhysicsItem item) {
    chronoPINVOKE.ChAssembly_RemoveOtherPhysicsItem(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Remove(ChPhysicsItem item) {
    chronoPINVOKE.ChAssembly_Remove(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllBodies() {
    chronoPINVOKE.ChAssembly_RemoveAllBodies(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllShafts() {
    chronoPINVOKE.ChAssembly_RemoveAllShafts(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllLinks() {
    chronoPINVOKE.ChAssembly_RemoveAllLinks(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllMeshes() {
    chronoPINVOKE.ChAssembly_RemoveAllMeshes(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllOtherPhysicsItems() {
    chronoPINVOKE.ChAssembly_RemoveAllOtherPhysicsItems(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual vector_ChBody GetBodies() {
    vector_ChBody ret = new vector_ChBody(chronoPINVOKE.ChAssembly_GetBodies(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t GetShafts() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t(chronoPINVOKE.ChAssembly_GetShafts(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual vector_ChLinkBase GetLinks() {
    vector_ChLinkBase ret = new vector_ChLinkBase(chronoPINVOKE.ChAssembly_GetLinks(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual vector_ChMesh GetMeshes() {
    vector_ChMesh ret = new vector_ChMesh(chronoPINVOKE.ChAssembly_GetMeshes(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual vector_ChPhysicsItem GetOtherPhysicsItems() {
    vector_ChPhysicsItem ret = new vector_ChPhysicsItem(chronoPINVOKE.ChAssembly_GetOtherPhysicsItems(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody SearchBody(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssembly_SearchBody(swigCPtr, name);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody SearchBodyID(int id) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssembly_SearchBodyID(swigCPtr, id);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChShaft_t SearchShaft(string name) {
    SWIGTYPE_p_std__shared_ptrT_ChShaft_t ret = new SWIGTYPE_p_std__shared_ptrT_ChShaft_t(chronoPINVOKE.ChAssembly_SearchShaft(swigCPtr, name), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkBase SearchLink(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssembly_SearchLink(swigCPtr, name);
    ChLinkBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkBase(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMesh SearchMesh(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssembly_SearchMesh(swigCPtr, name);
    ChMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMesh(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPhysicsItem SearchOtherPhysicsItem(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssembly_SearchOtherPhysicsItem(swigCPtr, name);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarker SearchMarker(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssembly_SearchMarker__SWIG_0(swigCPtr, name);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarker SearchMarker(int id) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssembly_SearchMarker__SWIG_1(swigCPtr, id);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPhysicsItem Search(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssembly_Search(swigCPtr, name);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumBodies() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumBodies(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumBodiesActive() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumBodiesActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumBodiesSleeping() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumBodiesSleeping(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumBodiesFixed() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumBodiesFixed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumShafts() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumShafts(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumShaftsSleeping() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumShaftsSleeping(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumShaftsFixed() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumShaftsFixed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumShaftsTotal() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumShaftsTotal(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumLinks() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumLinks(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumLinksActive() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumLinksActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumMeshes() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumMeshes(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumOtherPhysicsItems() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumOtherPhysicsItems(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumOtherPhysicsItemsActive() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumOtherPhysicsItemsActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraints() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumConstraints(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraintsBilateral() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumConstraintsBilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraintsUnilateral() {
    uint ret = chronoPINVOKE.ChAssembly_GetNumConstraintsUnilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void SetSystem(ChSystem m_system) {
    chronoPINVOKE.ChAssembly_SetSystem(swigCPtr, ChSystem.getCPtr(m_system));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void AddCollisionModelsToSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChAssembly_AddCollisionModelsToSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void RemoveCollisionModelsFromSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChAssembly_RemoveCollisionModelsFromSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SyncCollisionModels() {
    chronoPINVOKE.ChAssembly_SyncCollisionModels(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Setup() {
    chronoPINVOKE.ChAssembly_Setup(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime, bool update_assets) {
    chronoPINVOKE.ChAssembly_Update__SWIG_0(swigCPtr, mytime, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime) {
    chronoPINVOKE.ChAssembly_Update__SWIG_1(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(bool update_assets) {
    chronoPINVOKE.ChAssembly_Update__SWIG_2(swigCPtr, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update() {
    chronoPINVOKE.ChAssembly_Update__SWIG_3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ForceToRest() {
    chronoPINVOKE.ChAssembly_ForceToRest(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateGather(uint off_x, ChState x, uint off_v, ChStateDelta v, SWIGTYPE_p_double T) {
    chronoPINVOKE.ChAssembly_IntStateGather(swigCPtr, off_x, ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(v), SWIGTYPE_p_double.getCPtr(T));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateScatter(uint off_x, ChState x, uint off_v, ChStateDelta v, double T, bool full_update) {
    chronoPINVOKE.ChAssembly_IntStateScatter(swigCPtr, off_x, ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(v), T, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateGatherAcceleration(uint off_a, ChStateDelta a) {
    chronoPINVOKE.ChAssembly_IntStateGatherAcceleration(swigCPtr, off_a, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateScatterAcceleration(uint off_a, ChStateDelta a) {
    chronoPINVOKE.ChAssembly_IntStateScatterAcceleration(swigCPtr, off_a, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateGatherReactions(uint off_L, ChVectorDynamicd L) {
    chronoPINVOKE.ChAssembly_IntStateGatherReactions(swigCPtr, off_L, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateScatterReactions(uint off_L, ChVectorDynamicd L) {
    chronoPINVOKE.ChAssembly_IntStateScatterReactions(swigCPtr, off_L, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
    chronoPINVOKE.ChAssembly_IntStateIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntStateGetIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
    chronoPINVOKE.ChAssembly_IntStateGetIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadResidual_F(uint off, ChVectorDynamicd R, double c) {
    chronoPINVOKE.ChAssembly_IntLoadResidual_F(swigCPtr, off, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadResidual_Mv(uint off, ChVectorDynamicd R, ChVectorDynamicd w, double c) {
    chronoPINVOKE.ChAssembly_IntLoadResidual_Mv(swigCPtr, off, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadLumpedMass_Md(uint off, ChVectorDynamicd Md, SWIGTYPE_p_double err, double c) {
    chronoPINVOKE.ChAssembly_IntLoadLumpedMass_Md(swigCPtr, off, ChVectorDynamicd.getCPtr(Md), SWIGTYPE_p_double.getCPtr(err), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadResidual_CqL(uint off_L, ChVectorDynamicd R, ChVectorDynamicd L, double c) {
    chronoPINVOKE.ChAssembly_IntLoadResidual_CqL(swigCPtr, off_L, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(L), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadConstraint_C(uint off, ChVectorDynamicd Qc, double c, bool do_clamp, double recovery_clamp) {
    chronoPINVOKE.ChAssembly_IntLoadConstraint_C(swigCPtr, off, ChVectorDynamicd.getCPtr(Qc), c, do_clamp, recovery_clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadConstraint_Ct(uint off, ChVectorDynamicd Qc, double c) {
    chronoPINVOKE.ChAssembly_IntLoadConstraint_Ct(swigCPtr, off, ChVectorDynamicd.getCPtr(Qc), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntToDescriptor(uint off_v, ChStateDelta v, ChVectorDynamicd R, uint off_L, ChVectorDynamicd L, ChVectorDynamicd Qc) {
    chronoPINVOKE.ChAssembly_IntToDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), ChVectorDynamicd.getCPtr(R), off_L, ChVectorDynamicd.getCPtr(L), ChVectorDynamicd.getCPtr(Qc));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntFromDescriptor(uint off_v, ChStateDelta v, uint off_L, ChVectorDynamicd L) {
    chronoPINVOKE.ChAssembly_IntFromDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), off_L, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void InjectVariables(SWIGTYPE_p_ChSystemDescriptor descriptor) {
    chronoPINVOKE.ChAssembly_InjectVariables(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void InjectConstraints(SWIGTYPE_p_ChSystemDescriptor descriptor) {
    chronoPINVOKE.ChAssembly_InjectConstraints(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraintJacobians() {
    chronoPINVOKE.ChAssembly_LoadConstraintJacobians(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void InjectKRMMatrices(SWIGTYPE_p_ChSystemDescriptor descriptor) {
    chronoPINVOKE.ChAssembly_InjectKRMMatrices(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadKRMMatrices(double Kfactor, double Rfactor, double Mfactor) {
    chronoPINVOKE.ChAssembly_LoadKRMMatrices(swigCPtr, Kfactor, Rfactor, Mfactor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesFbReset() {
    chronoPINVOKE.ChAssembly_VariablesFbReset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesFbLoadForces(double factor) {
    chronoPINVOKE.ChAssembly_VariablesFbLoadForces__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesFbLoadForces() {
    chronoPINVOKE.ChAssembly_VariablesFbLoadForces__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesQbLoadSpeed() {
    chronoPINVOKE.ChAssembly_VariablesQbLoadSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesFbIncrementMq() {
    chronoPINVOKE.ChAssembly_VariablesFbIncrementMq(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesQbSetSpeed(double step) {
    chronoPINVOKE.ChAssembly_VariablesQbSetSpeed__SWIG_0(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesQbSetSpeed() {
    chronoPINVOKE.ChAssembly_VariablesQbSetSpeed__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void VariablesQbIncrementPosition(double step) {
    chronoPINVOKE.ChAssembly_VariablesQbIncrementPosition(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiReset() {
    chronoPINVOKE.ChAssembly_ConstraintsBiReset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiLoad_C(double factor, double recovery_clamp, bool do_clamp) {
    chronoPINVOKE.ChAssembly_ConstraintsBiLoad_C__SWIG_0(swigCPtr, factor, recovery_clamp, do_clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiLoad_C(double factor, double recovery_clamp) {
    chronoPINVOKE.ChAssembly_ConstraintsBiLoad_C__SWIG_1(swigCPtr, factor, recovery_clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiLoad_C(double factor) {
    chronoPINVOKE.ChAssembly_ConstraintsBiLoad_C__SWIG_2(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiLoad_C() {
    chronoPINVOKE.ChAssembly_ConstraintsBiLoad_C__SWIG_3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiLoad_Ct(double factor) {
    chronoPINVOKE.ChAssembly_ConstraintsBiLoad_Ct__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiLoad_Ct() {
    chronoPINVOKE.ChAssembly_ConstraintsBiLoad_Ct__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiLoad_Qc(double factor) {
    chronoPINVOKE.ChAssembly_ConstraintsBiLoad_Qc__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsBiLoad_Qc() {
    chronoPINVOKE.ChAssembly_ConstraintsBiLoad_Qc__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsFbLoadForces(double factor) {
    chronoPINVOKE.ChAssembly_ConstraintsFbLoadForces__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsFbLoadForces() {
    chronoPINVOKE.ChAssembly_ConstraintsFbLoadForces__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsFetch_react(double factor) {
    chronoPINVOKE.ChAssembly_ConstraintsFetch_react__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsFetch_react() {
    chronoPINVOKE.ChAssembly_ConstraintsFetch_react__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ShowHierarchy(SWIGTYPE_p_std__ostream outstream, int level) {
    chronoPINVOKE.ChAssembly_ShowHierarchy__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(outstream), level);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ShowHierarchy(SWIGTYPE_p_std__ostream outstream) {
    chronoPINVOKE.ChAssembly_ShowHierarchy__SWIG_1(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(outstream));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChAssembly_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChAssembly_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
