//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVisualSystem : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChVisualSystem(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVisualSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChVisualSystem() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChVisualSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void SetVerbose(bool verbose) {
    chronoPINVOKE.ChVisualSystem_SetVerbose(swigCPtr, verbose);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AttachSystem(ChSystem sys) {
    chronoPINVOKE.ChVisualSystem_AttachSystem(swigCPtr, ChSystem.getCPtr(sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize() {
    chronoPINVOKE.ChVisualSystem_Initialize(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void BindAll() {
    chronoPINVOKE.ChVisualSystem_BindAll(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void BindItem(ChPhysicsItem item) {
    chronoPINVOKE.ChVisualSystem_BindItem(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void UnbindItem(ChPhysicsItem item) {
    chronoPINVOKE.ChVisualSystem_UnbindItem(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int AddCamera(ChVector3d pos, ChVector3d targ) {
    int ret = chronoPINVOKE.ChVisualSystem_AddCamera__SWIG_0(swigCPtr, ChVector3d.getCPtr(pos), ChVector3d.getCPtr(targ));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int AddCamera(ChVector3d pos) {
    int ret = chronoPINVOKE.ChVisualSystem_AddCamera__SWIG_1(swigCPtr, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AddGrid(double x_step, double y_step, int nx, int ny, ChCoordsysd pos, ChColor col) {
    chronoPINVOKE.ChVisualSystem_AddGrid__SWIG_0(swigCPtr, x_step, y_step, nx, ny, ChCoordsysd.getCPtr(pos), ChColor.getCPtr(col));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddGrid(double x_step, double y_step, int nx, int ny, ChCoordsysd pos) {
    chronoPINVOKE.ChVisualSystem_AddGrid__SWIG_1(swigCPtr, x_step, y_step, nx, ny, ChCoordsysd.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddGrid(double x_step, double y_step, int nx, int ny) {
    chronoPINVOKE.ChVisualSystem_AddGrid__SWIG_2(swigCPtr, x_step, y_step, nx, ny);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCameraPosition(int id, ChVector3d pos) {
    chronoPINVOKE.ChVisualSystem_SetCameraPosition__SWIG_0(swigCPtr, id, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCameraTarget(int id, ChVector3d target) {
    chronoPINVOKE.ChVisualSystem_SetCameraTarget__SWIG_0(swigCPtr, id, ChVector3d.getCPtr(target));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCameraPosition(ChVector3d pos) {
    chronoPINVOKE.ChVisualSystem_SetCameraPosition__SWIG_1(swigCPtr, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCameraTarget(ChVector3d target) {
    chronoPINVOKE.ChVisualSystem_SetCameraTarget__SWIG_1(swigCPtr, ChVector3d.getCPtr(target));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChVector3d GetCameraPosition() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChVisualSystem_GetCameraPosition(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetCameraTarget() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChVisualSystem_GetCameraTarget(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateCamera(int id, ChVector3d pos, ChVector3d target) {
    chronoPINVOKE.ChVisualSystem_UpdateCamera__SWIG_0(swigCPtr, id, ChVector3d.getCPtr(pos), ChVector3d.getCPtr(target));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateCamera(ChVector3d pos, ChVector3d target) {
    chronoPINVOKE.ChVisualSystem_UpdateCamera__SWIG_1(swigCPtr, ChVector3d.getCPtr(pos), ChVector3d.getCPtr(target));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int AddVisualModel(ChVisualModel model, ChFramed frame) {
    int ret = chronoPINVOKE.ChVisualSystem_AddVisualModel__SWIG_0(swigCPtr, ChVisualModel.getCPtr(model), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int AddVisualModel(ChVisualShape shape, ChFramed frame) {
    int ret = chronoPINVOKE.ChVisualSystem_AddVisualModel__SWIG_1(swigCPtr, ChVisualShape.getCPtr(shape), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void UpdateVisualModel(int id, ChFramed frame) {
    chronoPINVOKE.ChVisualSystem_UpdateVisualModel(swigCPtr, id, ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool Run() {
    bool ret = chronoPINVOKE.ChVisualSystem_Run(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Quit() {
    chronoPINVOKE.ChVisualSystem_Quit(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void BeginScene() {
    chronoPINVOKE.ChVisualSystem_BeginScene(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Render() {
    chronoPINVOKE.ChVisualSystem_Render(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RenderFrame(ChFramed frame, double axis_length) {
    chronoPINVOKE.ChVisualSystem_RenderFrame__SWIG_0(swigCPtr, ChFramed.getCPtr(frame), axis_length);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RenderFrame(ChFramed frame) {
    chronoPINVOKE.ChVisualSystem_RenderFrame__SWIG_1(swigCPtr, ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RenderCOGFrames(double axis_length) {
    chronoPINVOKE.ChVisualSystem_RenderCOGFrames__SWIG_0(swigCPtr, axis_length);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RenderCOGFrames() {
    chronoPINVOKE.ChVisualSystem_RenderCOGFrames__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void EndScene() {
    chronoPINVOKE.ChVisualSystem_EndScene(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetSimulationRTF() {
    double ret = chronoPINVOKE.ChVisualSystem_GetSimulationRTF(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetSimulationTime() {
    double ret = chronoPINVOKE.ChVisualSystem_GetSimulationTime(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void WriteImageToFile(string filename) {
    chronoPINVOKE.ChVisualSystem_WriteImageToFile(swigCPtr, filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetImageOutputDirectory(string dir) {
    chronoPINVOKE.ChVisualSystem_SetImageOutputDirectory(swigCPtr, dir);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetImageOutput(bool val) {
    chronoPINVOKE.ChVisualSystem_SetImageOutput(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_chrono__ChSystem_p_t GetSystems() {
    SWIGTYPE_p_std__vectorT_chrono__ChSystem_p_t ret = new SWIGTYPE_p_std__vectorT_chrono__ChSystem_p_t(chronoPINVOKE.ChVisualSystem_GetSystems(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChSystem GetSystem(int i) {
    ChSystem ret = new ChSystem(chronoPINVOKE.ChVisualSystem_GetSystem(swigCPtr, i), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    IRRLICHT,
    VSG,
    OpenGL,
    OptiX,
    NONE
  }

}
