//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSurfaceNurbs : ChSurface {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChSurfaceNurbs(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChSurfaceNurbs_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSurfaceNurbs obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChSurfaceNurbs(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t points {
    set {
      chronoPINVOKE.ChSurfaceNurbs_points_set(swigCPtr, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChSurfaceNurbs_points_get(swigCPtr);
      SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChMatrixDynamicd weights {
    set {
      chronoPINVOKE.ChSurfaceNurbs_weights_set(swigCPtr, ChMatrixDynamicd.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChSurfaceNurbs_weights_get(swigCPtr);
      ChMatrixDynamicd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMatrixDynamicd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChVectorDynamicd knots_u {
    set {
      chronoPINVOKE.ChSurfaceNurbs_knots_u_set(swigCPtr, ChVectorDynamicd.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChSurfaceNurbs_knots_u_get(swigCPtr);
      ChVectorDynamicd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorDynamicd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChVectorDynamicd knots_v {
    set {
      chronoPINVOKE.ChSurfaceNurbs_knots_v_set(swigCPtr, ChVectorDynamicd.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChSurfaceNurbs_knots_v_get(swigCPtr);
      ChVectorDynamicd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorDynamicd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int p_u {
    set {
      chronoPINVOKE.ChSurfaceNurbs_p_u_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = chronoPINVOKE.ChSurfaceNurbs_p_u_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public int p_v {
    set {
      chronoPINVOKE.ChSurfaceNurbs_p_v_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      int ret = chronoPINVOKE.ChSurfaceNurbs_p_v_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChSurfaceNurbs() : this(chronoPINVOKE.new_ChSurfaceNurbs__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSurfaceNurbs(int morder_u, int morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t mpoints, ChVectorDynamicd mknots_u, ChVectorDynamicd mknots_v, ChMatrixDynamicd weights) : this(chronoPINVOKE.new_ChSurfaceNurbs__SWIG_1(morder_u, morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(mpoints), ChVectorDynamicd.getCPtr(mknots_u), ChVectorDynamicd.getCPtr(mknots_v), ChMatrixDynamicd.getCPtr(weights)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSurfaceNurbs(int morder_u, int morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t mpoints, ChVectorDynamicd mknots_u, ChVectorDynamicd mknots_v) : this(chronoPINVOKE.new_ChSurfaceNurbs__SWIG_2(morder_u, morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(mpoints), ChVectorDynamicd.getCPtr(mknots_u), ChVectorDynamicd.getCPtr(mknots_v)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSurfaceNurbs(int morder_u, int morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t mpoints, ChVectorDynamicd mknots_u) : this(chronoPINVOKE.new_ChSurfaceNurbs__SWIG_3(morder_u, morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(mpoints), ChVectorDynamicd.getCPtr(mknots_u)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSurfaceNurbs(int morder_u, int morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t mpoints) : this(chronoPINVOKE.new_ChSurfaceNurbs__SWIG_4(morder_u, morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(mpoints)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSurfaceNurbs(ChSurfaceNurbs source) : this(chronoPINVOKE.new_ChSurfaceNurbs__SWIG_5(ChSurfaceNurbs.getCPtr(source)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChGeometry Clone() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSurfaceNurbs_Clone(swigCPtr);
    ChSurfaceNurbs ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSurfaceNurbs(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d Evaluate(double parU, double parV) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChSurfaceNurbs_Evaluate(swigCPtr, parU, parV), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double ComputeUfromKnotU(double u) {
    double ret = chronoPINVOKE.ChSurfaceNurbs_ComputeUfromKnotU(swigCPtr, u);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double ComputeKnotUfromU(double U) {
    double ret = chronoPINVOKE.ChSurfaceNurbs_ComputeKnotUfromU(swigCPtr, U);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double ComputeVfromKnotV(double v) {
    double ret = chronoPINVOKE.ChSurfaceNurbs_ComputeVfromKnotV(swigCPtr, v);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double ComputeKnotVfromV(double V) {
    double ret = chronoPINVOKE.ChSurfaceNurbs_ComputeKnotVfromV(swigCPtr, V);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t Points() {
    SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t ret = new SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t(chronoPINVOKE.ChSurfaceNurbs_Points(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMatrixDynamicd Weights() {
    ChMatrixDynamicd ret = new ChMatrixDynamicd(chronoPINVOKE.ChSurfaceNurbs_Weights(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd Knots_u() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChSurfaceNurbs_Knots_u(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd Knots_v() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChSurfaceNurbs_Knots_v(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetOrder_u() {
    int ret = chronoPINVOKE.ChSurfaceNurbs_GetOrder_u(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetOrder_v() {
    int ret = chronoPINVOKE.ChSurfaceNurbs_GetOrder_v(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Setup(int morder_u, int morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t mpoints, ChVectorDynamicd mknots_u, ChVectorDynamicd mknots_v, ChMatrixDynamicd weights) {
    chronoPINVOKE.ChSurfaceNurbs_Setup__SWIG_0(swigCPtr, morder_u, morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(mpoints), ChVectorDynamicd.getCPtr(mknots_u), ChVectorDynamicd.getCPtr(mknots_v), ChMatrixDynamicd.getCPtr(weights));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Setup(int morder_u, int morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t mpoints, ChVectorDynamicd mknots_u, ChVectorDynamicd mknots_v) {
    chronoPINVOKE.ChSurfaceNurbs_Setup__SWIG_1(swigCPtr, morder_u, morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(mpoints), ChVectorDynamicd.getCPtr(mknots_u), ChVectorDynamicd.getCPtr(mknots_v));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Setup(int morder_u, int morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t mpoints, ChVectorDynamicd mknots_u) {
    chronoPINVOKE.ChSurfaceNurbs_Setup__SWIG_2(swigCPtr, morder_u, morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(mpoints), ChVectorDynamicd.getCPtr(mknots_u));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Setup(int morder_u, int morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t mpoints) {
    chronoPINVOKE.ChSurfaceNurbs_Setup__SWIG_3(swigCPtr, morder_u, morder_v, SWIGTYPE_p_chrono__ChMatrixDynamicT_chrono__ChVector3T_double_t_t.getCPtr(mpoints));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChSurfaceNurbs_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChSurfaceNurbs_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
