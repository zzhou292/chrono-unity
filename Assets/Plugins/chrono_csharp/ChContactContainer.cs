//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChContactContainer : ChPhysicsItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChContactContainer(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChContactContainer_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChContactContainer obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChContactContainer(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual uint GetNumContacts() {
    uint ret = chronoPINVOKE.ChContactContainer_GetNumContacts(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void RemoveAllContacts() {
    chronoPINVOKE.ChContactContainer_RemoveAllContacts(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void BeginAddContact() {
    chronoPINVOKE.ChContactContainer_BeginAddContact(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddContact(ChCollisionInfo cinfo, ChContactMaterial mat1, ChContactMaterial mat2) {
    chronoPINVOKE.ChContactContainer_AddContact__SWIG_0(swigCPtr, ChCollisionInfo.getCPtr(cinfo), ChContactMaterial.getCPtr(mat1), ChContactMaterial.getCPtr(mat2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddContact(ChCollisionInfo cinfo) {
    chronoPINVOKE.ChContactContainer_AddContact__SWIG_1(swigCPtr, ChCollisionInfo.getCPtr(cinfo));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void EndAddContact() {
    chronoPINVOKE.ChContactContainer_EndAddContact(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RegisterAddContactCallback(AddContactCallback callback) {
    chronoPINVOKE.ChContactContainer_RegisterAddContactCallback(swigCPtr, AddContactCallback.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual AddContactCallback GetAddContactCallback() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChContactContainer_GetAddContactCallback(swigCPtr);
    AddContactCallback ret = (cPtr == global::System.IntPtr.Zero) ? null : new AddContactCallback(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ReportAllContacts(ReportContactCallback callback) {
    chronoPINVOKE.ChContactContainer_ReportAllContacts(swigCPtr, ReportContactCallback.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ComputeContactForces() {
    chronoPINVOKE.ChContactContainer_ComputeContactForces(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChVector3d GetContactableForce(ChContactable contactable) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChContactContainer_GetContactableForce(swigCPtr, ChContactable.getCPtr(contactable)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetContactableTorque(ChContactable contactable) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChContactContainer_GetContactableTorque(swigCPtr, ChContactable.getCPtr(contactable)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChContactContainer_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChContactContainer_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
