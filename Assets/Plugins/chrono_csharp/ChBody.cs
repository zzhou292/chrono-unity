//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChBody : ChPhysicsItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChBody(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChBody_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChBody(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChBody() : this(chronoPINVOKE.new_ChBody__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBody(ChBody other) : this(chronoPINVOKE.new_ChBody__SWIG_1(ChBody.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFixed(bool state) {
    chronoPINVOKE.ChBody_SetFixed(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsFixed() {
    bool ret = chronoPINVOKE.ChBody_IsFixed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EnableCollision(bool state) {
    chronoPINVOKE.ChBody_EnableCollision(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool IsCollisionEnabled() {
    bool ret = chronoPINVOKE.ChBody_IsCollisionEnabled(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetLimitSpeed(bool state) {
    chronoPINVOKE.ChBody_SetLimitSpeed(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUseGyroTorque(bool state) {
    chronoPINVOKE.ChBody_SetUseGyroTorque(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsUsingGyroTorque() {
    bool ret = chronoPINVOKE.ChBody_IsUsingGyroTorque(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSleepingAllowed(bool state) {
    chronoPINVOKE.ChBody_SetSleepingAllowed(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsSleepingAllowed() {
    bool ret = chronoPINVOKE.ChBody_IsSleepingAllowed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSleeping(bool state) {
    chronoPINVOKE.ChBody_SetSleeping(swigCPtr, state);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsSleeping() {
    bool ret = chronoPINVOKE.ChBody_IsSleeping(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool TrySleeping() {
    bool ret = chronoPINVOKE.ChBody_TrySleeping(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool IsActive() {
    bool ret = chronoPINVOKE.ChBody_IsActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetIndex() {
    uint ret = chronoPINVOKE.ChBody_GetIndex(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChBody_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChBody_GetNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChVariables Variables() {
    SWIGTYPE_p_ChVariables ret = new SWIGTYPE_p_ChVariables(chronoPINVOKE.ChBody_Variables(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ForceToRest() {
    chronoPINVOKE.ChBody_ForceToRest(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void AddCollisionModelsToSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChBody_AddCollisionModelsToSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void RemoveCollisionModelsFromSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChBody_RemoveCollisionModelsFromSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SyncCollisionModels() {
    chronoPINVOKE.ChBody_SyncCollisionModels(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChFrameMovingd GetFrameCOMToAbs() {
    ChFrameMovingd ret = new ChFrameMovingd(chronoPINVOKE.ChBody_GetFrameCOMToAbs(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChFrameMovingd GetFrameRefToAbs() {
    ChFrameMovingd ret = new ChFrameMovingd(chronoPINVOKE.ChBody_GetFrameRefToAbs(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetVisualModelFrame(uint nclone) {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChBody_GetVisualModelFrame__SWIG_0(swigCPtr, nclone), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetVisualModelFrame() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChBody_GetVisualModelFrame__SWIG_1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChAABB GetTotalAABB() {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChBody_GetTotalAABB(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddMarker(ChMarker amarker) {
    chronoPINVOKE.ChBody_AddMarker(swigCPtr, ChMarker.getCPtr(amarker));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddForce(ChForce aforce) {
    chronoPINVOKE.ChBody_AddForce(swigCPtr, ChForce.getCPtr(aforce));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveMarker(ChMarker amarker) {
    chronoPINVOKE.ChBody_RemoveMarker(swigCPtr, ChMarker.getCPtr(amarker));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveForce(ChForce aforce) {
    chronoPINVOKE.ChBody_RemoveForce(swigCPtr, ChForce.getCPtr(aforce));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllForces() {
    chronoPINVOKE.ChBody_RemoveAllForces(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllMarkers() {
    chronoPINVOKE.ChBody_RemoveAllMarkers(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMarker SearchMarker(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChBody_SearchMarker__SWIG_0(swigCPtr, name);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarker SearchMarker(int id) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChBody_SearchMarker__SWIG_1(swigCPtr, id);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChForce SearchForce(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChBody_SearchForce(swigCPtr, name);
    ChForce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChForce(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarkerList GetMarkers() {
    ChMarkerList ret = new ChMarkerList(chronoPINVOKE.ChBody_GetMarkers(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChForceList GetForces() {
    ChForceList ret = new ChForceList(chronoPINVOKE.ChBody_GetForces(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMass(double newmass) {
    chronoPINVOKE.ChBody_SetMass(swigCPtr, newmass);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMass() {
    double ret = chronoPINVOKE.ChBody_GetMass(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInertia(ChMatrix33d newXInertia) {
    chronoPINVOKE.ChBody_SetInertia(swigCPtr, ChMatrix33d.getCPtr(newXInertia));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33d GetInertia() {
    ChMatrix33d ret = new ChMatrix33d(chronoPINVOKE.ChBody_GetInertia(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMatrix33d GetInvInertia() {
    ChMatrix33d ret = new ChMatrix33d(chronoPINVOKE.ChBody_GetInvInertia(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInertiaXX(ChVector3d iner) {
    chronoPINVOKE.ChBody_SetInertiaXX(swigCPtr, ChVector3d.getCPtr(iner));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetInertiaXX() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetInertiaXX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInertiaXY(ChVector3d iner) {
    chronoPINVOKE.ChBody_SetInertiaXY(swigCPtr, ChVector3d.getCPtr(iner));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetInertiaXY() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetInertiaXY(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxLinVel(float m_max_speed) {
    chronoPINVOKE.ChBody_SetMaxLinVel(swigCPtr, m_max_speed);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetMaxLinVel() {
    float ret = chronoPINVOKE.ChBody_GetMaxLinVel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxAngVel(float m_max_wvel) {
    chronoPINVOKE.ChBody_SetMaxAngVel(swigCPtr, m_max_wvel);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetMaxAngVel() {
    float ret = chronoPINVOKE.ChBody_GetMaxAngVel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ClampSpeed() {
    chronoPINVOKE.ChBody_ClampSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSleepTime(float m_t) {
    chronoPINVOKE.ChBody_SetSleepTime(swigCPtr, m_t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetSleepTime() {
    float ret = chronoPINVOKE.ChBody_GetSleepTime(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSleepMinLinVel(float m_t) {
    chronoPINVOKE.ChBody_SetSleepMinLinVel(swigCPtr, m_t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetSleepMinLinVel() {
    float ret = chronoPINVOKE.ChBody_GetSleepMinLinVel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSleepMinAngVel(float m_t) {
    chronoPINVOKE.ChBody_SetSleepMinAngVel(swigCPtr, m_t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetSleepMinAngVel() {
    float ret = chronoPINVOKE.ChBody_GetSleepMinAngVel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ComputeQInertia(SWIGTYPE_p_ChMatrix44T_t mQInertia) {
    chronoPINVOKE.ChBody_ComputeQInertia(swigCPtr, SWIGTYPE_p_ChMatrix44T_t.getCPtr(mQInertia));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ComputeGyro() {
    chronoPINVOKE.ChBody_ComputeGyro(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AccumulateForce(ChVector3d force, ChVector3d appl_point, bool local) {
    chronoPINVOKE.ChBody_AccumulateForce(swigCPtr, ChVector3d.getCPtr(force), ChVector3d.getCPtr(appl_point), local);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AccumulateTorque(ChVector3d torque, bool local) {
    chronoPINVOKE.ChBody_AccumulateTorque(swigCPtr, ChVector3d.getCPtr(torque), local);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EmptyAccumulators() {
    chronoPINVOKE.ChBody_EmptyAccumulators(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetAccumulatedForce() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetAccumulatedForce(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAccumulatedTorque() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetAccumulatedTorque(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateMarkers(double mytime) {
    chronoPINVOKE.ChBody_UpdateMarkers(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateForces(double mytime) {
    chronoPINVOKE.ChBody_UpdateForces(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateTime(double mytime) {
    chronoPINVOKE.ChBody_UpdateTime(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime, bool update_assets) {
    chronoPINVOKE.ChBody_Update__SWIG_0(swigCPtr, mytime, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime) {
    chronoPINVOKE.ChBody_Update__SWIG_1(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(bool update_assets) {
    chronoPINVOKE.ChBody_Update__SWIG_2(swigCPtr, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update() {
    chronoPINVOKE.ChBody_Update__SWIG_3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetAppliedForce() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetAppliedForce(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAppliedTorque() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetAppliedTorque(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetContactForce() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetContactForce(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetContactTorque() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetContactTorque(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPhysicsItem GetPhysicsItem() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChBody_GetPhysicsItem(swigCPtr);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChBody_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChBody_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadableGetVariables(SWIGTYPE_p_std__vectorT_ChVariables_p_t mvars) {
    chronoPINVOKE.ChBody_LoadableGetVariables(swigCPtr, SWIGTYPE_p_std__vectorT_ChVariables_p_t.getCPtr(mvars));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadableStateIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
    chronoPINVOKE.ChBody_LoadableStateIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadableGetStateBlockPosLevel(int block_offset, ChState mD) {
    chronoPINVOKE.ChBody_LoadableGetStateBlockPosLevel(swigCPtr, block_offset, ChState.getCPtr(mD));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadableGetStateBlockVelLevel(int block_offset, ChStateDelta mD) {
    chronoPINVOKE.ChBody_LoadableGetStateBlockVelLevel(swigCPtr, block_offset, ChStateDelta.getCPtr(mD));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ComputeNF(double U, double V, double W, ChVectorDynamicd Qi, SWIGTYPE_p_double detJ, ChVectorDynamicd F, ChVectorDynamicd state_x, ChVectorDynamicd state_w) {
    chronoPINVOKE.ChBody_ComputeNF(swigCPtr, U, V, W, ChVectorDynamicd.getCPtr(Qi), SWIGTYPE_p_double.getCPtr(detJ), ChVectorDynamicd.getCPtr(F), ChVectorDynamicd.getCPtr(state_x), ChVectorDynamicd.getCPtr(state_w));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPos(ChVector3d p) {
    chronoPINVOKE.ChBody_SetPos(swigCPtr, ChVector3d.getCPtr(p));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRot(ChQuaterniond q) {
    chronoPINVOKE.ChBody_SetRot__SWIG_0(swigCPtr, ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRot(ChMatrix33d A) {
    chronoPINVOKE.ChBody_SetRot__SWIG_1(swigCPtr, ChMatrix33d.getCPtr(A));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetPos() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetPos(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetRot() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChBody_GetRot(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMatrix33d GetRotMat() {
    ChMatrix33d ret = new ChMatrix33d(chronoPINVOKE.ChBody_GetRotMat(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPosDt(ChVector3d pd) {
    chronoPINVOKE.ChBody_SetPosDt(swigCPtr, ChVector3d.getCPtr(pd));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLinVel(ChVector3d pd) {
    chronoPINVOKE.ChBody_SetLinVel(swigCPtr, ChVector3d.getCPtr(pd));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotDt(ChQuaterniond qd) {
    chronoPINVOKE.ChBody_SetRotDt(swigCPtr, ChQuaterniond.getCPtr(qd));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAngVelLocal(ChVector3d wl) {
    chronoPINVOKE.ChBody_SetAngVelLocal(swigCPtr, ChVector3d.getCPtr(wl));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAngVelParent(ChVector3d wp) {
    chronoPINVOKE.ChBody_SetAngVelParent(swigCPtr, ChVector3d.getCPtr(wp));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetPosDt() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetPosDt(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetLinVel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetLinVel(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetRotDt() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChBody_GetRotDt(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAngVelLocal() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetAngVelLocal(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAngVelParent() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetAngVelParent(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPosDt2() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetPosDt2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetLinAcc() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetLinAcc(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetRotDt2() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChBody_GetRotDt2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAngAccLocal() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetAngAccLocal(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAngAccParent() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChBody_GetAngAccParent(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddCollisionModel(ChCollisionModel model) {
    chronoPINVOKE.ChBody_AddCollisionModel(swigCPtr, ChCollisionModel.getCPtr(model));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCollisionShape(ChCollisionShape shape, ChFramed frame) {
    chronoPINVOKE.ChBody_AddCollisionShape(swigCPtr, ChCollisionShape.getCPtr(shape), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionModel GetCollisionModel() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChBody_GetCollisionModel(swigCPtr);
    ChCollisionModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionModel(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
