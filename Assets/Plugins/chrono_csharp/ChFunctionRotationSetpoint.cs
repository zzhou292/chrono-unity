//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionRotationSetpoint : ChFunctionRotation {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunctionRotationSetpoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChFunctionRotationSetpoint_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionRotationSetpoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChFunctionRotationSetpoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunctionRotationSetpoint() : this(chronoPINVOKE.new_ChFunctionRotationSetpoint__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public ChFunctionRotationSetpoint(ChFunctionRotationSetpoint other) : this(chronoPINVOKE.new_ChFunctionRotationSetpoint__SWIG_1(ChFunctionRotationSetpoint.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public void SetMode(ChFunctionRotationSetpoint.eChSetpointMode mmode) {
    chronoPINVOKE.ChFunctionRotationSetpoint_SetMode(swigCPtr, (int)mmode);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionRotationSetpoint.eChSetpointMode GetMode() {
    ChFunctionRotationSetpoint.eChSetpointMode ret = (ChFunctionRotationSetpoint.eChSetpointMode)chronoPINVOKE.ChFunctionRotationSetpoint_GetMode(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reset(double ms) {
    chronoPINVOKE.ChFunctionRotationSetpoint_Reset__SWIG_0(swigCPtr, ms);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reset() {
    chronoPINVOKE.ChFunctionRotationSetpoint_Reset__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSetpoint(ChQuaterniond q_setpoint, double s) {
    if (SwigDerivedClassHasMethod("SetSetpoint", swigMethodTypes6)) chronoPINVOKE.ChFunctionRotationSetpoint_SetSetpointSwigExplicitChFunctionRotationSetpoint(swigCPtr, ChQuaterniond.getCPtr(q_setpoint), s); else chronoPINVOKE.ChFunctionRotationSetpoint_SetSetpoint(swigCPtr, ChQuaterniond.getCPtr(q_setpoint), s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSetpointAndDerivatives(ChQuaterniond q_setpoint, ChVector3d w_loc_setpoint, ChVector3d a_loc_setpoint) {
    if (SwigDerivedClassHasMethod("SetSetpointAndDerivatives", swigMethodTypes7)) chronoPINVOKE.ChFunctionRotationSetpoint_SetSetpointAndDerivativesSwigExplicitChFunctionRotationSetpoint(swigCPtr, ChQuaterniond.getCPtr(q_setpoint), ChVector3d.getCPtr(w_loc_setpoint), ChVector3d.getCPtr(a_loc_setpoint)); else chronoPINVOKE.ChFunctionRotationSetpoint_SetSetpointAndDerivatives(swigCPtr, ChQuaterniond.getCPtr(q_setpoint), ChVector3d.getCPtr(w_loc_setpoint), ChVector3d.getCPtr(a_loc_setpoint));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChQuaterniond GetQuat(double s) {
    ChQuaterniond ret = new ChQuaterniond((SwigDerivedClassHasMethod("GetQuat", swigMethodTypes0) ? chronoPINVOKE.ChFunctionRotationSetpoint_GetQuatSwigExplicitChFunctionRotationSetpoint(swigCPtr, s) : chronoPINVOKE.ChFunctionRotationSetpoint_GetQuat(swigCPtr, s)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d GetAngVel(double s) {
    ChVector3d ret = new ChVector3d((SwigDerivedClassHasMethod("GetAngVel", swigMethodTypes1) ? chronoPINVOKE.ChFunctionRotationSetpoint_GetAngVelSwigExplicitChFunctionRotationSetpoint(swigCPtr, s) : chronoPINVOKE.ChFunctionRotationSetpoint_GetAngVel(swigCPtr, s)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d GetAngAcc(double s) {
    ChVector3d ret = new ChVector3d((SwigDerivedClassHasMethod("GetAngAcc", swigMethodTypes2) ? chronoPINVOKE.ChFunctionRotationSetpoint_GetAngAccSwigExplicitChFunctionRotationSetpoint(swigCPtr, s) : chronoPINVOKE.ChFunctionRotationSetpoint_GetAngAcc(swigCPtr, s)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes4)) chronoPINVOKE.ChFunctionRotationSetpoint_ArchiveOutSwigExplicitChFunctionRotationSetpoint(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out)); else chronoPINVOKE.ChFunctionRotationSetpoint_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes5)) chronoPINVOKE.ChFunctionRotationSetpoint_ArchiveInSwigExplicitChFunctionRotationSetpoint(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in)); else chronoPINVOKE.ChFunctionRotationSetpoint_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetQuat", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChFunctionRotationSetpoint_0(SwigDirectorMethodGetQuat);
    if (SwigDerivedClassHasMethod("GetAngVel", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChFunctionRotationSetpoint_1(SwigDirectorMethodGetAngVel);
    if (SwigDerivedClassHasMethod("GetAngAcc", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChFunctionRotationSetpoint_2(SwigDirectorMethodGetAngAcc);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChFunctionRotationSetpoint_3(SwigDirectorMethodUpdate);
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChFunctionRotationSetpoint_4(SwigDirectorMethodArchiveOut);
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChFunctionRotationSetpoint_5(SwigDirectorMethodArchiveIn);
    if (SwigDerivedClassHasMethod("SetSetpoint", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateChFunctionRotationSetpoint_6(SwigDirectorMethodSetSetpoint);
    if (SwigDerivedClassHasMethod("SetSetpointAndDerivatives", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateChFunctionRotationSetpoint_7(SwigDirectorMethodSetSetpointAndDerivatives);
    chronoPINVOKE.ChFunctionRotationSetpoint_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChFunctionRotationSetpoint));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorMethodGetQuat(double s) {
    return ChQuaterniond.getCPtr(GetQuat(s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGetAngVel(double s) {
    return ChVector3d.getCPtr(GetAngVel(s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGetAngAcc(double s) {
    return ChVector3d.getCPtr(GetAngAcc(s)).Handle;
  }

  private void SwigDirectorMethodUpdate(double t) {
    Update(t);
  }

  private void SwigDirectorMethodArchiveOut(global::System.IntPtr archive_out) {
    ArchiveOut(new SWIGTYPE_p_chrono__ChArchiveOut(archive_out, false));
  }

  private void SwigDirectorMethodArchiveIn(global::System.IntPtr archive_in) {
    ArchiveIn(new SWIGTYPE_p_chrono__ChArchiveIn(archive_in, false));
  }

  private void SwigDirectorMethodSetSetpoint(global::System.IntPtr q_setpoint, double s) {
    SetSetpoint(new ChQuaterniond(q_setpoint, true), s);
  }

  private void SwigDirectorMethodSetSetpointAndDerivatives(global::System.IntPtr q_setpoint, global::System.IntPtr w_loc_setpoint, global::System.IntPtr a_loc_setpoint) {
    SetSetpointAndDerivatives(new ChQuaterniond(q_setpoint, true), new ChVector3d(w_loc_setpoint, true), new ChVector3d(a_loc_setpoint, true));
  }

  public delegate global::System.IntPtr SwigDelegateChFunctionRotationSetpoint_0(double s);
  public delegate global::System.IntPtr SwigDelegateChFunctionRotationSetpoint_1(double s);
  public delegate global::System.IntPtr SwigDelegateChFunctionRotationSetpoint_2(double s);
  public delegate void SwigDelegateChFunctionRotationSetpoint_3(double t);
  public delegate void SwigDelegateChFunctionRotationSetpoint_4(global::System.IntPtr archive_out);
  public delegate void SwigDelegateChFunctionRotationSetpoint_5(global::System.IntPtr archive_in);
  public delegate void SwigDelegateChFunctionRotationSetpoint_6(global::System.IntPtr q_setpoint, double s);
  public delegate void SwigDelegateChFunctionRotationSetpoint_7(global::System.IntPtr q_setpoint, global::System.IntPtr w_loc_setpoint, global::System.IntPtr a_loc_setpoint);

  private SwigDelegateChFunctionRotationSetpoint_0 swigDelegate0;
  private SwigDelegateChFunctionRotationSetpoint_1 swigDelegate1;
  private SwigDelegateChFunctionRotationSetpoint_2 swigDelegate2;
  private SwigDelegateChFunctionRotationSetpoint_3 swigDelegate3;
  private SwigDelegateChFunctionRotationSetpoint_4 swigDelegate4;
  private SwigDelegateChFunctionRotationSetpoint_5 swigDelegate5;
  private SwigDelegateChFunctionRotationSetpoint_6 swigDelegate6;
  private SwigDelegateChFunctionRotationSetpoint_7 swigDelegate7;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveOut) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveIn) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(ChQuaterniond), typeof(double) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(ChQuaterniond), typeof(ChVector3d), typeof(ChVector3d) };
  public enum eChSetpointMode {
    ZERO_ORDER_HOLD,
    FIRST_ORDER_HOLD,
    OVERRIDE
  }

}
