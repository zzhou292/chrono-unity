//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLine : ChGeometry {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLine(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLine_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLine obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLine(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual new ChGeometry.Type GetType() {
    ChGeometry.Type ret = (ChGeometry.Type)chronoPINVOKE.ChLine_GetType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d Evaluate(double U) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLine_Evaluate(swigCPtr, U), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetTangent(double parU) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLine_GetTangent(swigCPtr, parU), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsClosed() {
    bool ret = chronoPINVOKE.ChLine_IsClosed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetClosed(bool mc) {
    chronoPINVOKE.ChLine_SetClosed(swigCPtr, mc);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual int GetComplexity() {
    int ret = chronoPINVOKE.ChLine_GetComplexity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetComplexity(int mc) {
    chronoPINVOKE.ChLine_SetComplexity(swigCPtr, mc);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int GetManifoldDimension() {
    int ret = chronoPINVOKE.ChLine_GetManifoldDimension(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool FindNearestLinePoint(ChVector3d point, SWIGTYPE_p_double resU, double approxU, double tol) {
    bool ret = chronoPINVOKE.ChLine_FindNearestLinePoint(swigCPtr, ChVector3d.getCPtr(point), SWIGTYPE_p_double.getCPtr(resU), approxU, tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double Length(int sampling) {
    double ret = chronoPINVOKE.ChLine_Length(swigCPtr, sampling);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetEndA() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLine_GetEndA(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetEndB() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLine_GetEndB(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CurveCurveDist(ChLine compline, int samples) {
    double ret = chronoPINVOKE.ChLine_CurveCurveDist(swigCPtr, ChLine.getCPtr(compline), samples);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CurveSegmentDist(ChLine complinesegm, int samples) {
    double ret = chronoPINVOKE.ChLine_CurveSegmentDist(swigCPtr, ChLine.getCPtr(complinesegm), samples);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CurveCurveDistMax(ChLine compline, int samples) {
    double ret = chronoPINVOKE.ChLine_CurveCurveDistMax(swigCPtr, ChLine.getCPtr(compline), samples);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double CurveSegmentDistMax(ChLine complinesegm, int samples) {
    double ret = chronoPINVOKE.ChLine_CurveSegmentDistMax(swigCPtr, ChLine.getCPtr(complinesegm), samples);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLine_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLine_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
