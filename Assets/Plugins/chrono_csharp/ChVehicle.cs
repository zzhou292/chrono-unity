//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVehicle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChVehicle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVehicle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChVehicle() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_ChVehicle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public string GetName() {
    string ret = chrono_vehiclePINVOKE.ChVehicle_GetName(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetName(string name) {
    chrono_vehiclePINVOKE.ChVehicle_SetName(swigCPtr, name);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string GetTemplateName() {
    string ret = chrono_vehiclePINVOKE.ChVehicle_GetTemplateName(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChSystem GetSystem() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetSystem(swigCPtr);
    ChSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSystem(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetChTime() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetChTime(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChChassis GetChassis() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetChassis(swigCPtr);
    ChChassis ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassis(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChChassisRear GetChassisRear(int id) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetChassisRear(swigCPtr, id);
    ChChassisRear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisRear(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChChassisConnector GetChassisConnector(int id) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetChassisConnector(swigCPtr, id);
    ChChassisConnector ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassisConnector(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBodyAuxRef GetChassisBody() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetChassisBody(swigCPtr);
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBodyAuxRef GetChassisRearBody(int id) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetChassisRearBody(swigCPtr, id);
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPowertrainAssembly GetPowertrainAssembly() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetPowertrainAssembly(swigCPtr);
    ChPowertrainAssembly ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPowertrainAssembly(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChEngine GetEngine() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetEngine(swigCPtr);
    ChEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChEngine(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTransmission GetTransmission() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicle_GetTransmission(swigCPtr);
    ChTransmission ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTransmission(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMass() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFramed GetCOMFrame() {
    ChFramed ret = new ChFramed(chrono_vehiclePINVOKE.ChVehicle_GetCOMFrame(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMatrix33d GetInertia() {
    ChMatrix33d ret = new ChMatrix33d(chrono_vehiclePINVOKE.ChVehicle_GetInertia(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFrameMovingd GetRefFrame() {
    ChFrameMovingd ret = new ChFrameMovingd(chrono_vehiclePINVOKE.ChVehicle_GetRefFrame(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFramed GetTransform() {
    ChFramed ret = new ChFramed(chrono_vehiclePINVOKE.ChVehicle_GetTransform(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPos() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChVehicle_GetPos(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetRot() {
    ChQuaterniond ret = new ChQuaterniond(chrono_vehiclePINVOKE.ChVehicle_GetRot(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRoll() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetRoll__SWIG_0(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetPitch() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetPitch__SWIG_0(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRoll(ChTerrain terrain) {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetRoll__SWIG_1(swigCPtr, ChTerrain.getCPtr(terrain));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetPitch(ChTerrain terrain) {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetPitch__SWIG_1(swigCPtr, ChTerrain.getCPtr(terrain));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpeed() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetSpeed(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSlipAngle() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetSlipAngle(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRollRate() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetRollRate(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetPitchRate() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetPitchRate(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetYawRate() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetYawRate(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTurnRate() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetTurnRate(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPointLocation(ChVector3d locpos) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChVehicle_GetPointLocation(swigCPtr, ChVector3d.getCPtr(locpos)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPointVelocity(ChVector3d locpos) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChVehicle_GetPointVelocity(swigCPtr, ChVector3d.getCPtr(locpos)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPointAcceleration(ChVector3d locpos) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChVehicle_GetPointAcceleration(swigCPtr, ChVector3d.getCPtr(locpos)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetDriverPos() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChVehicle_GetDriverPos(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void EnableRealtime(bool val) {
    chrono_vehiclePINVOKE.ChVehicle_EnableRealtime(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRTF() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetRTF(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetStepRTF() {
    double ret = chrono_vehiclePINVOKE.ChVehicle_GetStepRTF(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCollisionSystemType(SWIGTYPE_p_chrono__ChCollisionSystem__Type collsys_type) {
    chrono_vehiclePINVOKE.ChVehicle_SetCollisionSystemType(swigCPtr, SWIGTYPE_p_chrono__ChCollisionSystem__Type.getCPtr(collsys_type));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOutput(ChVehicleOutput.Type type, string out_dir, string out_name, double output_step) {
    chrono_vehiclePINVOKE.ChVehicle_SetOutput__SWIG_0(swigCPtr, (int)type, out_dir, out_name, output_step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOutput(ChVehicleOutput.Type type, SWIGTYPE_p_std__ostream out_stream, double output_step) {
    chrono_vehiclePINVOKE.ChVehicle_SetOutput__SWIG_1(swigCPtr, (int)type, SWIGTYPE_p_std__ostream.getCPtr(out_stream), output_step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChCoordsysd chassisPos, double chassisFwdVel) {
    chrono_vehiclePINVOKE.ChVehicle_Initialize__SWIG_0(swigCPtr, ChCoordsysd.getCPtr(chassisPos), chassisFwdVel);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChCoordsysd chassisPos) {
    chrono_vehiclePINVOKE.ChVehicle_Initialize__SWIG_1(swigCPtr, ChCoordsysd.getCPtr(chassisPos));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void InitializePowertrain(ChPowertrainAssembly powertrain) {
    chrono_vehiclePINVOKE.ChVehicle_InitializePowertrain(swigCPtr, ChPowertrainAssembly.getCPtr(powertrain));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void InitializeInertiaProperties() {
    chrono_vehiclePINVOKE.ChVehicle_InitializeInertiaProperties(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChVehicle_SetChassisVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisRearVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChVehicle_SetChassisRearVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisCollide(bool state) {
    chrono_vehiclePINVOKE.ChVehicle_SetChassisCollide(swigCPtr, state);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetChassisVehicleCollide(bool state) {
    chrono_vehiclePINVOKE.ChVehicle_SetChassisVehicleCollide(swigCPtr, state);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisOutput(bool state) {
    chrono_vehiclePINVOKE.ChVehicle_SetChassisOutput(swigCPtr, state);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasBushings() {
    bool ret = chrono_vehiclePINVOKE.ChVehicle_HasBushings(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Advance(double step) {
    chrono_vehiclePINVOKE.ChVehicle_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LogConstraintViolations() {
    chrono_vehiclePINVOKE.ChVehicle_LogConstraintViolations(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual string ExportComponentList() {
    string ret = chrono_vehiclePINVOKE.ChVehicle_ExportComponentList__SWIG_0(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ExportComponentList(string filename) {
    chrono_vehiclePINVOKE.ChVehicle_ExportComponentList__SWIG_1(swigCPtr, filename);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Output(int frame, ChVehicleOutput database) {
    chrono_vehiclePINVOKE.ChVehicle_Output(swigCPtr, frame, ChVehicleOutput.getCPtr(database));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
