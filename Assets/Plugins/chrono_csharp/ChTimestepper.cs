//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTimestepper : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChTimestepper(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTimestepper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChTimestepper() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChTimestepper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual new ChTimestepper.Type GetType() {
    ChTimestepper.Type ret = (ChTimestepper.Type)chronoPINVOKE.ChTimestepper_GetType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Advance(double dt) {
    chronoPINVOKE.ChTimestepper_Advance(swigCPtr, dt);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChVectorDynamicd GetLagrangeMultipliers() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChTimestepper_GetLagrangeMultipliers(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetIntegrable(ChIntegrable intgr) {
    chronoPINVOKE.ChTimestepper_SetIntegrable(swigCPtr, ChIntegrable.getCPtr(intgr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChIntegrable GetIntegrable() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChTimestepper_GetIntegrable(swigCPtr);
    ChIntegrable ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIntegrable(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTime() {
    double ret = chronoPINVOKE.ChTimestepper_GetTime(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTime(double mt) {
    chronoPINVOKE.ChTimestepper_SetTime(swigCPtr, mt);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVerbose(bool verb) {
    chronoPINVOKE.ChTimestepper_SetVerbose(swigCPtr, verb);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive) {
    chronoPINVOKE.ChTimestepper_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive) {
    chronoPINVOKE.ChTimestepper_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetTypeAsString(ChTimestepper.Type type) {
    string ret = chronoPINVOKE.ChTimestepper_GetTypeAsString((int)type);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    EULER_IMPLICIT_LINEARIZED,
    EULER_IMPLICIT_PROJECTED,
    EULER_IMPLICIT,
    TRAPEZOIDAL,
    TRAPEZOIDAL_LINEARIZED,
    HHT,
    HEUN,
    RUNGEKUTTA45,
    EULER_EXPLICIT,
    LEAPFROG,
    NEWMARK,
    CUSTOM
  }

}
