//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkTSDA : ChLink {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkTSDA(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkTSDA_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkTSDA obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkTSDA(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkTSDA() : this(chronoPINVOKE.new_ChLinkTSDA__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkTSDA(ChLinkTSDA other) : this(chronoPINVOKE.new_ChLinkTSDA__SWIG_1(ChLinkTSDA.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRestLength(double len) {
    chronoPINVOKE.ChLinkTSDA_SetRestLength(swigCPtr, len);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpringCoefficient(double k) {
    chronoPINVOKE.ChLinkTSDA_SetSpringCoefficient(swigCPtr, k);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDampingCoefficient(double r) {
    chronoPINVOKE.ChLinkTSDA_SetDampingCoefficient(swigCPtr, r);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetActuatorForce(double f) {
    chronoPINVOKE.ChLinkTSDA_SetActuatorForce(swigCPtr, f);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IsStiff(bool val) {
    chronoPINVOKE.ChLinkTSDA_IsStiff(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVectorDynamicd GetStates() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChLinkTSDA_GetStates(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRestLength() {
    double ret = chronoPINVOKE.ChLinkTSDA_GetRestLength(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetLength() {
    double ret = chronoPINVOKE.ChLinkTSDA_GetLength(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDeformation() {
    double ret = chronoPINVOKE.ChLinkTSDA_GetDeformation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetVelocity() {
    double ret = chronoPINVOKE.ChLinkTSDA_GetVelocity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetForce() {
    double ret = chronoPINVOKE.ChLinkTSDA_GetForce(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint1Rel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkTSDA_GetPoint1Rel(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint1Abs() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkTSDA_GetPoint1Abs(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint2Rel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkTSDA_GetPoint2Rel(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPoint2Abs() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkTSDA_GetPoint2Abs(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame1Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkTSDA_GetFrame1Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame2Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkTSDA_GetFrame2Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpringCoefficient() {
    double ret = chronoPINVOKE.ChLinkTSDA_GetSpringCoefficient(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDampingCoefficient() {
    double ret = chronoPINVOKE.ChLinkTSDA_GetDampingCoefficient(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetActuatorForce() {
    double ret = chronoPINVOKE.ChLinkTSDA_GetActuatorForce(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RegisterForceFunctor(ForceFunctor functor) {
    chronoPINVOKE.ChLinkTSDA_RegisterForceFunctor__SWIG_0(swigCPtr, ForceFunctor.getCPtr(functor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ForceFunctor GetForceFunctor() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkTSDA_GetForceFunctor(swigCPtr);
    ForceFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceFunctor(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RegisterODE(ODE functor) {
    chronoPINVOKE.ChLinkTSDA_RegisterODE(swigCPtr, ODE.getCPtr(functor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody body1, ChBody body2, bool local, ChVector3d loc1, ChVector3d loc2) {
    chronoPINVOKE.ChLinkTSDA_Initialize(swigCPtr, ChBody.getCPtr(body1), ChBody.getCPtr(body2), local, ChVector3d.getCPtr(loc1), ChVector3d.getCPtr(loc2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkTSDA_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkTSDA_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterForceFunctor(SWIGTYPE_p_std__shared_ptrT_TSDAForceFunctor_t functor) {
    chronoPINVOKE.ChLinkTSDA_RegisterForceFunctor__SWIG_1(swigCPtr, SWIGTYPE_p_std__shared_ptrT_TSDAForceFunctor_t.getCPtr(functor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
