//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChIntegrableIIorder : ChIntegrable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChIntegrableIIorder(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChIntegrableIIorder_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChIntegrableIIorder obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChIntegrableIIorder(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual void StateSetup(ChState x, ChStateDelta v, ChStateDelta a) {
    chronoPINVOKE.ChIntegrableIIorder_StateSetup(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(v), ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateGather(ChState x, ChStateDelta v, SWIGTYPE_p_double T) {
    chronoPINVOKE.ChIntegrableIIorder_StateGather__SWIG_0(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(v), SWIGTYPE_p_double.getCPtr(T));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateScatter(ChState x, ChStateDelta v, double T, bool full_update) {
    chronoPINVOKE.ChIntegrableIIorder_StateScatter__SWIG_0(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(v), T, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateGatherAcceleration(ChStateDelta a) {
    chronoPINVOKE.ChIntegrableIIorder_StateGatherAcceleration(swigCPtr, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateScatterAcceleration(ChStateDelta a) {
    chronoPINVOKE.ChIntegrableIIorder_StateScatterAcceleration(swigCPtr, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool StateSolveA(ChStateDelta Dvdt, ChVectorDynamicd L, ChState x, ChStateDelta v, double T, double dt, bool force_state_scatter, bool full_update, ChLumpingParms lumping) {
    bool ret = chronoPINVOKE.ChIntegrableIIorder_StateSolveA__SWIG_0(swigCPtr, ChStateDelta.getCPtr(Dvdt), ChVectorDynamicd.getCPtr(L), ChState.getCPtr(x), ChStateDelta.getCPtr(v), T, dt, force_state_scatter, full_update, ChLumpingParms.getCPtr(lumping));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool StateSolveA(ChStateDelta Dvdt, ChVectorDynamicd L, ChState x, ChStateDelta v, double T, double dt, bool force_state_scatter, bool full_update) {
    bool ret = chronoPINVOKE.ChIntegrableIIorder_StateSolveA__SWIG_1(swigCPtr, ChStateDelta.getCPtr(Dvdt), ChVectorDynamicd.getCPtr(L), ChState.getCPtr(x), ChStateDelta.getCPtr(v), T, dt, force_state_scatter, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void StateIncrementX(ChState x_new, ChState x, ChStateDelta Dx) {
    chronoPINVOKE.ChIntegrableIIorder_StateIncrementX(swigCPtr, ChState.getCPtr(x_new), ChState.getCPtr(x), ChStateDelta.getCPtr(Dx));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool StateSolveCorrection(ChStateDelta Dv, ChVectorDynamicd L, ChVectorDynamicd R, ChVectorDynamicd Qc, double c_a, double c_v, double c_x, ChState x, ChStateDelta v, double T, bool force_state_scatter, bool full_update, bool force_setup) {
    bool ret = chronoPINVOKE.ChIntegrableIIorder_StateSolveCorrection__SWIG_0(swigCPtr, ChStateDelta.getCPtr(Dv), ChVectorDynamicd.getCPtr(L), ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(Qc), c_a, c_v, c_x, ChState.getCPtr(x), ChStateDelta.getCPtr(v), T, force_state_scatter, full_update, force_setup);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void LoadResidual_F(ChVectorDynamicd R, double c) {
    chronoPINVOKE.ChIntegrableIIorder_LoadResidual_F(swigCPtr, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadResidual_Mv(ChVectorDynamicd R, ChVectorDynamicd w, double c) {
    chronoPINVOKE.ChIntegrableIIorder_LoadResidual_Mv(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadLumpedMass_Md(ChVectorDynamicd Md, SWIGTYPE_p_double err, double c) {
    chronoPINVOKE.ChIntegrableIIorder_LoadLumpedMass_Md(swigCPtr, ChVectorDynamicd.getCPtr(Md), SWIGTYPE_p_double.getCPtr(err), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadResidual_CqL(ChVectorDynamicd R, ChVectorDynamicd L, double c) {
    chronoPINVOKE.ChIntegrableIIorder_LoadResidual_CqL(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(L), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicd Qc, double c, bool do_clamp, double mclam) {
    chronoPINVOKE.ChIntegrableIIorder_LoadConstraint_C__SWIG_0(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c, do_clamp, mclam);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicd Qc, double c, bool do_clamp) {
    chronoPINVOKE.ChIntegrableIIorder_LoadConstraint_C__SWIG_1(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c, do_clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicd Qc, double c) {
    chronoPINVOKE.ChIntegrableIIorder_LoadConstraint_C__SWIG_2(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_Ct(ChVectorDynamicd Qc, double c) {
    chronoPINVOKE.ChIntegrableIIorder_LoadConstraint_Ct(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateGather(ChState y, SWIGTYPE_p_double T) {
    chronoPINVOKE.ChIntegrableIIorder_StateGather__SWIG_1(swigCPtr, ChState.getCPtr(y), SWIGTYPE_p_double.getCPtr(T));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateScatter(ChState y, double T, bool full_update) {
    chronoPINVOKE.ChIntegrableIIorder_StateScatter__SWIG_1(swigCPtr, ChState.getCPtr(y), T, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateGatherDerivative(ChStateDelta Dydt) {
    chronoPINVOKE.ChIntegrableIIorder_StateGatherDerivative(swigCPtr, ChStateDelta.getCPtr(Dydt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateScatterDerivative(ChStateDelta Dydt) {
    chronoPINVOKE.ChIntegrableIIorder_StateScatterDerivative(swigCPtr, ChStateDelta.getCPtr(Dydt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateIncrement(ChState y_new, ChState y, ChStateDelta Dy) {
    chronoPINVOKE.ChIntegrableIIorder_StateIncrement(swigCPtr, ChState.getCPtr(y_new), ChState.getCPtr(y), ChStateDelta.getCPtr(Dy));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool StateSolve(ChStateDelta dydt, ChVectorDynamicd L, ChState y, double T, double dt, bool force_state_scatter, bool full_update, ChLumpingParms lumping) {
    bool ret = chronoPINVOKE.ChIntegrableIIorder_StateSolve__SWIG_0(swigCPtr, ChStateDelta.getCPtr(dydt), ChVectorDynamicd.getCPtr(L), ChState.getCPtr(y), T, dt, force_state_scatter, full_update, ChLumpingParms.getCPtr(lumping));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool StateSolve(ChStateDelta dydt, ChVectorDynamicd L, ChState y, double T, double dt, bool force_state_scatter, bool full_update) {
    bool ret = chronoPINVOKE.ChIntegrableIIorder_StateSolve__SWIG_1(swigCPtr, ChStateDelta.getCPtr(dydt), ChVectorDynamicd.getCPtr(L), ChState.getCPtr(y), T, dt, force_state_scatter, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool StateSolveCorrection(ChStateDelta Dy, ChVectorDynamicd L, ChVectorDynamicd R, ChVectorDynamicd Qc, double a, double b, ChState y, double T, double dt, bool force_state_scatter, bool full_update, bool force_setup) {
    bool ret = chronoPINVOKE.ChIntegrableIIorder_StateSolveCorrection__SWIG_1(swigCPtr, ChStateDelta.getCPtr(Dy), ChVectorDynamicd.getCPtr(L), ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(Qc), a, b, ChState.getCPtr(y), T, dt, force_state_scatter, full_update, force_setup);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
