//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SingleWishbone : ChSingleWishbone {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal SingleWishbone(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.SingleWishbone_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SingleWishbone obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_SingleWishbone(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SingleWishbone(string filename) : this(chrono_vehiclePINVOKE.new_SingleWishbone__SWIG_0(filename), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public SingleWishbone(SWIGTYPE_p_rapidjson__Document d) : this(chrono_vehiclePINVOKE.new_SingleWishbone__SWIG_1(SWIGTYPE_p_rapidjson__Document.getCPtr(d)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool UseTierodBodies() {
    bool ret = chrono_vehiclePINVOKE.SingleWishbone_UseTierodBodies(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getCamberAngle() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getCamberAngle(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getToeAngle() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getToeAngle(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getSpindleMass() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getSpindleMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getCAMass() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getCAMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getUprightMass() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getUprightMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getTierodMass() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getTierodMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getSpindleRadius() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getSpindleRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double getSpindleWidth() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getSpindleWidth(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getCARadius() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getCARadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getUprightRadius() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getUprightRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getTierodRadius() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getTierodRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getSpindleInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.SingleWishbone_getSpindleInertia(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getCAInertiaMoments() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.SingleWishbone_getCAInertiaMoments(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getCAInertiaProducts() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.SingleWishbone_getCAInertiaProducts(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getUprightInertiaMoments() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.SingleWishbone_getUprightInertiaMoments(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getUprightInertiaProducts() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.SingleWishbone_getUprightInertiaProducts(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d getTierodInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.SingleWishbone_getTierodInertia(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getAxleInertia() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getAxleInertia(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getShockRestLength() {
    double ret = chrono_vehiclePINVOKE.SingleWishbone_getShockRestLength(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ForceFunctor getShockForceFunctor() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.SingleWishbone_getShockForceFunctor(swigCPtr);
    ForceFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ForceFunctor(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t getCABushingData() {
    SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t ret = new SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t(chrono_vehiclePINVOKE.SingleWishbone_getCABushingData(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t getTierodBushingData() {
    SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t ret = new SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t(chrono_vehiclePINVOKE.SingleWishbone_getTierodBushingData(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
