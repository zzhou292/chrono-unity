//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChContactable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChContactable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChContactable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChContactable() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChContactable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void AddCollisionModel(ChCollisionModel model) {
    chronoPINVOKE.ChContactable_AddCollisionModel(swigCPtr, ChCollisionModel.getCPtr(model));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCollisionShape(ChCollisionShape shape, ChFramed frame) {
    chronoPINVOKE.ChContactable_AddCollisionShape__SWIG_0(swigCPtr, ChCollisionShape.getCPtr(shape), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCollisionShape(ChCollisionShape shape) {
    chronoPINVOKE.ChContactable_AddCollisionShape__SWIG_1(swigCPtr, ChCollisionShape.getCPtr(shape));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionModel GetCollisionModel() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChContactable_GetCollisionModel(swigCPtr);
    ChCollisionModel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionModel(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsContactActive() {
    bool ret = chronoPINVOKE.ChContactable_IsContactActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetContactableNumCoordsPosLevel() {
    int ret = chronoPINVOKE.ChContactable_GetContactableNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual int GetContactableNumCoordsVelLevel() {
    int ret = chronoPINVOKE.ChContactable_GetContactableNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ContactableGetStateBlockPosLevel(ChState x) {
    chronoPINVOKE.ChContactable_ContactableGetStateBlockPosLevel(swigCPtr, ChState.getCPtr(x));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ContactableGetStateBlockVelLevel(ChStateDelta w) {
    chronoPINVOKE.ChContactable_ContactableGetStateBlockVelLevel(swigCPtr, ChStateDelta.getCPtr(w));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ContactableIncrementState(ChState x, ChStateDelta dw, ChState x_new) {
    chronoPINVOKE.ChContactable_ContactableIncrementState(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(dw), ChState.getCPtr(x_new));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChVector3d GetContactPoint(ChVector3d loc_point, ChState state_x) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChContactable_GetContactPoint(swigCPtr, ChVector3d.getCPtr(loc_point), ChState.getCPtr(state_x)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetContactPointSpeed(ChVector3d loc_point, ChState state_x, ChStateDelta state_w) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChContactable_GetContactPointSpeed__SWIG_0(swigCPtr, ChVector3d.getCPtr(loc_point), ChState.getCPtr(state_x), ChStateDelta.getCPtr(state_w)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetContactPointSpeed(ChVector3d abs_point) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChContactable_GetContactPointSpeed__SWIG_1(swigCPtr, ChVector3d.getCPtr(abs_point)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChFramed GetCollisionModelFrame() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChContactable_GetCollisionModelFrame(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ContactForceLoadResidual_F(ChVector3d F, ChVector3d T, ChVector3d abs_point, ChVectorDynamicd R) {
    chronoPINVOKE.ChContactable_ContactForceLoadResidual_F(swigCPtr, ChVector3d.getCPtr(F), ChVector3d.getCPtr(T), ChVector3d.getCPtr(abs_point), ChVectorDynamicd.getCPtr(R));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ContactComputeQ(ChVector3d F, ChVector3d T, ChVector3d point, ChState state_x, ChVectorDynamicd Q, int offset) {
    chronoPINVOKE.ChContactable_ContactComputeQ(swigCPtr, ChVector3d.getCPtr(F), ChVector3d.getCPtr(T), ChVector3d.getCPtr(point), ChState.getCPtr(state_x), ChVectorDynamicd.getCPtr(Q), offset);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetContactableMass() {
    double ret = chronoPINVOKE.ChContactable_GetContactableMass(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChPhysicsItem GetPhysicsItem() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChContactable_GetPhysicsItem(swigCPtr);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChContactable.eChContactableType GetContactableType() {
    ChContactable.eChContactableType ret = (ChContactable.eChContactableType)chronoPINVOKE.ChContactable_GetContactableType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetUserData(SWIGTYPE_p_std__shared_ptrT_void_t data) {
    chronoPINVOKE.ChContactable_SetUserData(swigCPtr, SWIGTYPE_p_std__shared_ptrT_void_t.getCPtr(data));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasData() {
    bool ret = chronoPINVOKE.ChContactable_HasData(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChContactable_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChContactable_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum eChContactableType {
    CONTACTABLE_UNKNOWN = 0,
    CONTACTABLE_6,
    CONTACTABLE_3,
    CONTACTABLE_33,
    CONTACTABLE_66,
    CONTACTABLE_333,
    CONTACTABLE_666
  }

}
