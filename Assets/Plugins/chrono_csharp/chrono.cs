//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class chrono {
  public static void SetChronoDataPath(string path) {
    chronoPINVOKE.SetChronoDataPath(path);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetChronoDataPath() {
    string ret = chronoPINVOKE.GetChronoDataPath();
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetChronoDataFile(string filename) {
    string ret = chronoPINVOKE.GetChronoDataFile(filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetChronoOutputPath(string path) {
    chronoPINVOKE.SetChronoOutputPath(path);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetChronoOutputPath() {
    string ret = chronoPINVOKE.GetChronoOutputPath();
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool should_raise_an_assert {
    get {
      bool ret = chronoPINVOKE.should_raise_an_assert_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool no_more_assert {
    set {
      chronoPINVOKE.no_more_assert_set(value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = chronoPINVOKE.no_more_assert_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void PasteMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matrTo, SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t matrFrom, int start_row, int start_col, bool overwrite) {
    chronoPINVOKE.PasteMatrix__SWIG_0(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matrTo), SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(matrFrom), start_row, start_col, overwrite);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void PasteMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t matrTo, SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t matrFrom, int start_row, int start_col) {
    chronoPINVOKE.PasteMatrix__SWIG_1(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(matrTo), SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(matrFrom), start_row, start_col);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void StreamOut(SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t A, SWIGTYPE_p_std__ostream stream) {
    chronoPINVOKE.StreamOut__SWIG_0(SWIGTYPE_p_Eigen__RefT_Eigen__MatrixT_double_Eigen__Dynamic_Eigen__Dynamic_Eigen__RowMajor_t_const_t.getCPtr(A), SWIGTYPE_p_std__ostream.getCPtr(stream));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void StreamOut(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t mat, SWIGTYPE_p_std__ostream stream, bool one_indexed) {
    chronoPINVOKE.StreamOut__SWIG_1(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(mat), SWIGTYPE_p_std__ostream.getCPtr(stream), one_indexed);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void StreamOut(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t mat, SWIGTYPE_p_std__ostream stream) {
    chronoPINVOKE.StreamOut__SWIG_2(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(mat), SWIGTYPE_p_std__ostream.getCPtr(stream));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChVector3d VNULL {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.VNULL_get();
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVector3d VECT_X {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.VECT_X_get();
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVector3d VECT_Y {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.VECT_Y_get();
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChVector3d VECT_Z {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.VECT_Z_get();
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double Vdot(ChVector3d va, ChVector3d vb) {
    double ret = chronoPINVOKE.Vdot(ChVector3d.getCPtr(va), ChVector3d.getCPtr(vb));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d Vcross(ChVector3d va, ChVector3d vb) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.Vcross(ChVector3d.getCPtr(va), ChVector3d.getCPtr(vb)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QNULL {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.QNULL_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond QUNIT {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.QUNIT_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_ROTATE_Y_TO_X {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_ROTATE_Y_TO_X_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_ROTATE_Y_TO_Z {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_ROTATE_Y_TO_Z_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_ROTATE_X_TO_Y {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_ROTATE_X_TO_Y_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_ROTATE_X_TO_Z {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_ROTATE_X_TO_Z_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_ROTATE_Z_TO_Y {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_ROTATE_Z_TO_Y_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_ROTATE_Z_TO_X {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_ROTATE_Z_TO_X_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_FLIP_AROUND_X {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_FLIP_AROUND_X_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_FLIP_AROUND_Y {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_FLIP_AROUND_Y_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChQuaterniond Q_FLIP_AROUND_Z {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.Q_FLIP_AROUND_Z_get();
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static bool Qequal(ChQuaterniond qa, ChQuaterniond qb) {
    bool ret = chronoPINVOKE.Qequal(ChQuaterniond.getCPtr(qa), ChQuaterniond.getCPtr(qb));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool Qnotnull(ChQuaterniond qa) {
    bool ret = chronoPINVOKE.Qnotnull(ChQuaterniond.getCPtr(qa));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double Qlength(ChQuaterniond q) {
    double ret = chronoPINVOKE.Qlength(ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond Qadd(ChQuaterniond qa, ChQuaterniond qb) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.Qadd(ChQuaterniond.getCPtr(qa), ChQuaterniond.getCPtr(qb)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond Qsub(ChQuaterniond qa, ChQuaterniond qb) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.Qsub(ChQuaterniond.getCPtr(qa), ChQuaterniond.getCPtr(qb)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond Qscale(ChQuaterniond q, double fact) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.Qscale(ChQuaterniond.getCPtr(q), fact), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond Qnorm(ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.Qnorm(ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond Qconjugate(ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.Qconjugate(ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond Qcross(ChQuaterniond qa, ChQuaterniond qb) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.Qcross(ChQuaterniond.getCPtr(qa), ChQuaterniond.getCPtr(qb)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDtFromAngVelRel(ChVector3d w, ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDtFromAngVelRel(ChVector3d.getCPtr(w), ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDtFromAngVelAbs(ChVector3d w, ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDtFromAngVelAbs(ChVector3d.getCPtr(w), ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDt2FromAngAccAbs(ChVector3d a, ChQuaterniond q, ChQuaterniond q_dt) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDt2FromAngAccAbs(ChVector3d.getCPtr(a), ChQuaterniond.getCPtr(q), ChQuaterniond.getCPtr(q_dt)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDt2FromAngAccRel(ChVector3d a, ChQuaterniond q, ChQuaterniond q_dt) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDt2FromAngAccRel(ChVector3d.getCPtr(a), ChQuaterniond.getCPtr(q), ChQuaterniond.getCPtr(q_dt)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromImaginary(ChVector3d imm) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromImaginary(ChVector3d.getCPtr(imm)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDtFromImaginary(ChVector3d im_dt, ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDtFromImaginary(ChVector3d.getCPtr(im_dt), ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDt2FromImaginary(ChVector3d im_dtdt, ChQuaterniond q, ChQuaterniond q_dt) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDt2FromImaginary(ChVector3d.getCPtr(im_dtdt), ChQuaterniond.getCPtr(q), ChQuaterniond.getCPtr(q_dt)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d VaxisXfromQuat(ChQuaterniond quat) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.VaxisXfromQuat(ChQuaterniond.getCPtr(quat)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AngleSet AngleSetFromAngleSet(RotRepresentation to_seq, AngleSet set) {
    AngleSet ret = new AngleSet(chronoPINVOKE.AngleSetFromAngleSet((int)to_seq, AngleSet.getCPtr(set)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d RodriguesFromAngleSet(AngleSet set) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.RodriguesFromAngleSet(AngleSet.getCPtr(set)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AngleSet AngleSetFromRodrigues(RotRepresentation to_seq, ChVector3d params_) {
    AngleSet ret = new AngleSet(chronoPINVOKE.AngleSetFromRodrigues((int)to_seq, ChVector3d.getCPtr(params_)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AngleAxis AngleAxisFromQuat(ChQuaterniond q) {
    AngleAxis ret = new AngleAxis(chronoPINVOKE.AngleAxisFromQuat(ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromAngleAxis(AngleAxis angle_axis) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromAngleAxis__SWIG_0(AngleAxis.getCPtr(angle_axis)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromAngleAxis(double angle, ChVector3d axis) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromAngleAxis__SWIG_1(angle, ChVector3d.getCPtr(axis)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDtFromAngleAxis(ChQuaterniond quat, double angle_dt, ChVector3d axis) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDtFromAngleAxis(ChQuaterniond.getCPtr(quat), angle_dt, ChVector3d.getCPtr(axis)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDt2FromAngleAxis(double angle_dtdt, ChVector3d axis, ChQuaterniond q, ChQuaterniond q_dt) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDt2FromAngleAxis(angle_dtdt, ChVector3d.getCPtr(axis), ChQuaterniond.getCPtr(q), ChQuaterniond.getCPtr(q_dt)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromAngleX(double angle) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromAngleX(angle), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromAngleY(double angle) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromAngleY(angle), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromAngleZ(double angle) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromAngleZ(angle), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d RotVecFromQuat(ChQuaterniond q) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.RotVecFromQuat(ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromRotVec(ChVector3d vec) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromRotVec(ChVector3d.getCPtr(vec)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d RodriguesFromQuat(ChQuaterniond q) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.RodriguesFromQuat(ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromRodrigues(ChVector3d params_) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromRodrigues(ChVector3d.getCPtr(params_)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDtFromRodrigues(ChVector3d params_, ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDtFromRodrigues(ChVector3d.getCPtr(params_), ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDt2FromRodrigues(ChVector3d params_, ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDt2FromRodrigues(ChVector3d.getCPtr(params_), ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AngleSet AngleSetFromQuat(RotRepresentation to_seq, ChQuaterniond q) {
    AngleSet ret = new AngleSet(chronoPINVOKE.AngleSetFromQuat((int)to_seq, ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromAngleSet(AngleSet set) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromAngleSet(AngleSet.getCPtr(set)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDtFromAngleSet(AngleSet set, ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDtFromAngleSet(AngleSet.getCPtr(set), ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatDt2FromAngleSet(AngleSet set, ChQuaterniond q) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatDt2FromAngleSet(AngleSet.getCPtr(set), ChQuaterniond.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChQuaterniond QuatFromVec2Vec(ChVector3d start, ChVector3d end) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.QuatFromVec2Vec(ChVector3d.getCPtr(start), ChVector3d.getCPtr(end)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCoordsysd CSYSNULL {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.CSYSNULL_get();
      ChCoordsysd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCoordsysd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChCoordsysd CSYSNORM {
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.CSYSNORM_get();
      ChCoordsysd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCoordsysd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChContactMaterialNSC CastToChContactMaterialNSC(ChContactMaterial in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChContactMaterialNSC(ChContactMaterial.getCPtr(in_obj));
    ChContactMaterialNSC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactMaterialNSC(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChContactMaterialSMC CastToChContactMaterialSMC(ChContactMaterial in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChContactMaterialSMC(ChContactMaterial.getCPtr(in_obj));
    ChContactMaterialSMC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactMaterialSMC(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChContactMaterialCompositeSMC CastToChContactMaterialCompositeSMC(ChContactMaterialComposite in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChContactMaterialCompositeSMC(ChContactMaterialComposite.getCPtr(in_obj));
    ChContactMaterialCompositeSMC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactMaterialCompositeSMC(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChContactMaterialCompositeNSC CastToChContactMaterialCompositeNSC(ChContactMaterialComposite in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChContactMaterialCompositeNSC(ChContactMaterialComposite.getCPtr(in_obj));
    ChContactMaterialCompositeNSC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactMaterialCompositeNSC(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionBSpline CastToChFunctionBSpline(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionBSpline(ChFunction.getCPtr(in_obj));
    ChFunctionBSpline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionBSpline(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionConst CastToChFunctionConst(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionConst(ChFunction.getCPtr(in_obj));
    ChFunctionConst ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionConst(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionConstAcc CastToChFunctionConstAcc(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionConstAcc(ChFunction.getCPtr(in_obj));
    ChFunctionConstAcc ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionConstAcc(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionConstJerk CastToChFunctionConstJerk(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionConstJerk(ChFunction.getCPtr(in_obj));
    ChFunctionConstJerk ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionConstJerk(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionCycloidal CastToChFunctionCycloidal(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionCycloidal(ChFunction.getCPtr(in_obj));
    ChFunctionCycloidal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionCycloidal(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionDerivative CastToChFunctionDerivative(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionDerivative(ChFunction.getCPtr(in_obj));
    ChFunctionDerivative ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionDerivative(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionFillet3 CastToChFunctionFillet3(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionFillet3(ChFunction.getCPtr(in_obj));
    ChFunctionFillet3 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionFillet3(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionIntegral CastToChFunctionIntegral(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionIntegral(ChFunction.getCPtr(in_obj));
    ChFunctionIntegral ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionIntegral(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionMirror CastToChFunctionMirror(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionMirror(ChFunction.getCPtr(in_obj));
    ChFunctionMirror ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionMirror(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionOperator CastToChFunctionOperator(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionOperator(ChFunction.getCPtr(in_obj));
    ChFunctionOperator ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionOperator(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionPoly CastToChFunctionPoly(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionPoly(ChFunction.getCPtr(in_obj));
    ChFunctionPoly ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionPoly(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionPoly345 CastToChFunctionPoly345(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionPoly345(ChFunction.getCPtr(in_obj));
    ChFunctionPoly345 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionPoly345(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionRamp CastToChFunctionRamp(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionRamp(ChFunction.getCPtr(in_obj));
    ChFunctionRamp ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionRamp(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionInterp CastToChFunctionInterp(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionInterp(ChFunction.getCPtr(in_obj));
    ChFunctionInterp ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionInterp(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionRepeat CastToChFunctionRepeat(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionRepeat(ChFunction.getCPtr(in_obj));
    ChFunctionRepeat ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionRepeat(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionSequence CastToChFunctionSequence(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionSequence(ChFunction.getCPtr(in_obj));
    ChFunctionSequence ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionSequence(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionPoly23 CastToChFunctionPoly23(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionPoly23(ChFunction.getCPtr(in_obj));
    ChFunctionPoly23 ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionPoly23(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionSine CastToChFunctionSine(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionSine(ChFunction.getCPtr(in_obj));
    ChFunctionSine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionSine(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionSineStep CastToChFunctionSineStep(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionSineStep(ChFunction.getCPtr(in_obj));
    ChFunctionSineStep ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionSineStep(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChFunctionSetpoint CastToChFunctionSetpoint(ChFunction in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChFunctionSetpoint(ChFunction.getCPtr(in_obj));
    ChFunctionSetpoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionSetpoint(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int BODY_DOF {
    get {
      int ret = chronoPINVOKE.BODY_DOF_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int BODY_QDOF {
    get {
      int ret = chronoPINVOKE.BODY_QDOF_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static int BODY_ROT {
    get {
      int ret = chronoPINVOKE.BODY_ROT_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static ChDirectSolverLS CastToChDirectSolverLS(ChSolver in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChDirectSolverLS(ChSolver.getCPtr(in_obj));
    ChDirectSolverLS ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDirectSolverLS(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChIterativeSolverLS CastToChIterativeSolverLS(ChSolver in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChIterativeSolverLS(ChSolver.getCPtr(in_obj));
    ChIterativeSolverLS ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIterativeSolverLS(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChIterativeSolverVI CastToChIterativeSolverVI(ChSolver in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChIterativeSolverVI(ChSolver.getCPtr(in_obj));
    ChIterativeSolverVI ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIterativeSolverVI(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverADMM CastToChSolverADMM(ChIterativeSolverVI in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverADMM(ChIterativeSolverVI.getCPtr(in_obj));
    ChSolverADMM ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverADMM(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverAPGD CastToChSolverAPGD(ChIterativeSolverVI in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverAPGD(ChIterativeSolverVI.getCPtr(in_obj));
    ChSolverAPGD ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverAPGD(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverBB CastToChSolverBB(ChIterativeSolverVI in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverBB(ChIterativeSolverVI.getCPtr(in_obj));
    ChSolverBB ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverBB(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverPSOR CastToChSolverPSOR(ChIterativeSolverVI in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverPSOR(ChIterativeSolverVI.getCPtr(in_obj));
    ChSolverPSOR ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverPSOR(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverGMRES CastToChSolverGMRES(ChIterativeSolverLS in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverGMRES(ChIterativeSolverLS.getCPtr(in_obj));
    ChSolverGMRES ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverGMRES(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverMINRES CastToChSolverMINRES(ChIterativeSolverLS in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverMINRES(ChIterativeSolverLS.getCPtr(in_obj));
    ChSolverMINRES ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverMINRES(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverBiCGSTAB CastToChSolverBiCGSTAB(ChIterativeSolverLS in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverBiCGSTAB(ChIterativeSolverLS.getCPtr(in_obj));
    ChSolverBiCGSTAB ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverBiCGSTAB(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverSparseQR CastToChSolverSparseQR(ChDirectSolverLS in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverSparseQR(ChDirectSolverLS.getCPtr(in_obj));
    ChSolverSparseQR ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverSparseQR(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChSolverSparseLU CastToChSolverSparseLU(ChDirectSolverLS in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChSolverSparseLU(ChDirectSolverLS.getCPtr(in_obj));
    ChSolverSparseLU ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolverSparseLU(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastContactableToChBody(ChContactable base_) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastContactableToChBody(ChContactable.getCPtr(base_));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double CH_PI {
    get {
      double ret = chronoPINVOKE.CH_PI_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_PI_2 {
    get {
      double ret = chronoPINVOKE.CH_PI_2_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_PI_4 {
    get {
      double ret = chronoPINVOKE.CH_PI_4_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_2PI {
    get {
      double ret = chronoPINVOKE.CH_2PI_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_RAD_TO_DEG {
    get {
      double ret = chronoPINVOKE.CH_RAD_TO_DEG_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_DEG_TO_RAD {
    get {
      double ret = chronoPINVOKE.CH_DEG_TO_RAD_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_RPM_TO_RAD_S {
    get {
      double ret = chronoPINVOKE.CH_RPM_TO_RAD_S_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_RAD_S_TO_RPM {
    get {
      double ret = chronoPINVOKE.CH_RAD_S_TO_RPM_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static double CH_SQRT_2 {
    get {
      double ret = chronoPINVOKE.CH_SQRT_2_get();
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only, bool dump_vel, string delim) {
    chronoPINVOKE.WriteBodies__SWIG_0(ChSystem.getCPtr(system), filename, active_only, dump_vel, delim);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only, bool dump_vel) {
    chronoPINVOKE.WriteBodies__SWIG_1(ChSystem.getCPtr(system), filename, active_only, dump_vel);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename, bool active_only) {
    chronoPINVOKE.WriteBodies__SWIG_2(ChSystem.getCPtr(system), filename, active_only);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteBodies(ChSystem system, string filename) {
    chronoPINVOKE.WriteBodies__SWIG_3(ChSystem.getCPtr(system), filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool WriteCheckpoint(ChSystem system, string filename) {
    bool ret = chronoPINVOKE.WriteCheckpoint(ChSystem.getCPtr(system), filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void ReadCheckpoint(ChSystem system, string filename) {
    chronoPINVOKE.ReadCheckpoint(ChSystem.getCPtr(system), filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCamera(string filename, ChVector3d cam_location, ChVector3d cam_target, ChVector3d camera_upvec, string delim) {
    chronoPINVOKE.WriteCamera__SWIG_0(filename, ChVector3d.getCPtr(cam_location), ChVector3d.getCPtr(cam_target), ChVector3d.getCPtr(camera_upvec), delim);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCamera(string filename, ChVector3d cam_location, ChVector3d cam_target, ChVector3d camera_upvec) {
    chronoPINVOKE.WriteCamera__SWIG_1(filename, ChVector3d.getCPtr(cam_location), ChVector3d.getCPtr(cam_target), ChVector3d.getCPtr(camera_upvec));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, bool body_info, string delim) {
    chronoPINVOKE.WriteVisualizationAssets__SWIG_0(ChSystem.getCPtr(system), filename, body_info, delim);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, bool body_info) {
    chronoPINVOKE.WriteVisualizationAssets__SWIG_1(ChSystem.getCPtr(system), filename, body_info);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename) {
    chronoPINVOKE.WriteVisualizationAssets__SWIG_2(ChSystem.getCPtr(system), filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector, bool body_info, string delim) {
    chronoPINVOKE.WriteVisualizationAssets__SWIG_3(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector), body_info, delim);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector, bool body_info) {
    chronoPINVOKE.WriteVisualizationAssets__SWIG_4(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector), body_info);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteVisualizationAssets(ChSystem system, string filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t selector) {
    chronoPINVOKE.WriteVisualizationAssets__SWIG_5(ChSystem.getCPtr(system), filename, SWIGTYPE_p_std__functionT_bool_fchrono__ChBody_const_RF_t.getCPtr(selector));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVector3d pos, ChQuaterniond rot, bool smoothed) {
    chronoPINVOKE.WriteMeshPovray__SWIG_0(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), smoothed);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.WriteMeshPovray__SWIG_1(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color, ChVector3d pos) {
    chronoPINVOKE.WriteMeshPovray__SWIG_2(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color), ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir, ChColor color) {
    chronoPINVOKE.WriteMeshPovray__SWIG_3(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir, ChColor.getCPtr(color));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteMeshPovray(ChTriangleMeshConnected trimesh, string mesh_name, string out_dir) {
    chronoPINVOKE.WriteMeshPovray__SWIG_4(ChTriangleMeshConnected.getCPtr(trimesh), mesh_name, out_dir);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color, ChVector3d pos, ChQuaterniond rot) {
    bool ret = chronoPINVOKE.WriteMeshPovray__SWIG_5(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color, ChVector3d pos) {
    bool ret = chronoPINVOKE.WriteMeshPovray__SWIG_6(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color), ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir, ChColor color) {
    bool ret = chronoPINVOKE.WriteMeshPovray__SWIG_7(obj_filename, mesh_name, out_dir, ChColor.getCPtr(color));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool WriteMeshPovray(string obj_filename, string mesh_name, string out_dir) {
    bool ret = chronoPINVOKE.WriteMeshPovray__SWIG_8(obj_filename, mesh_name, out_dir);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir, double radius, ChColor col) {
    chronoPINVOKE.WriteCurvePovray__SWIG_0(ChBezierCurve.getCPtr(curve), curve_name, out_dir, radius, ChColor.getCPtr(col));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir, double radius) {
    chronoPINVOKE.WriteCurvePovray__SWIG_1(ChBezierCurve.getCPtr(curve), curve_name, out_dir, radius);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void WriteCurvePovray(ChBezierCurve curve, string curve_name, string out_dir) {
    chronoPINVOKE.WriteCurvePovray__SWIG_2(ChBezierCurve.getCPtr(curve), curve_name, out_dir);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChContactMaterial material, double radius, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddSphereGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChContactMaterial material, double radius, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddSphereGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChContactMaterial material, double radius, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddSphereGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChContactMaterial material, double radius, ChVector3d pos) {
    chronoPINVOKE.AddSphereGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddSphereGeometry(ChBody body, ChContactMaterial material, double radius) {
    chronoPINVOKE.AddSphereGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChContactMaterial material, ChVector3d axes, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddEllipsoidGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(axes), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChContactMaterial material, ChVector3d axes, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddEllipsoidGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(axes), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChContactMaterial material, ChVector3d axes, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddEllipsoidGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(axes), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChContactMaterial material, ChVector3d axes, ChVector3d pos) {
    chronoPINVOKE.AddEllipsoidGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(axes), ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddEllipsoidGeometry(ChBody body, ChContactMaterial material, ChVector3d axes) {
    chronoPINVOKE.AddEllipsoidGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(axes));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddBoxGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddBoxGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddBoxGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, ChVector3d pos) {
    chronoPINVOKE.AddBoxGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size) {
    chronoPINVOKE.AddBoxGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChContactMaterial material, double radius, double cDist, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddBiSphereGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, cDist, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChContactMaterial material, double radius, double cDist, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddBiSphereGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, cDist, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChContactMaterial material, double radius, double cDist, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddBiSphereGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, cDist, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChContactMaterial material, double radius, double cDist, ChVector3d pos) {
    chronoPINVOKE.AddBiSphereGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, cDist, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBiSphereGeometry(ChBody body, ChContactMaterial material, double radius, double cDist) {
    chronoPINVOKE.AddBiSphereGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, cDist);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddCapsuleGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddCapsuleGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddCapsuleGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos) {
    chronoPINVOKE.AddCapsuleGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCapsuleGeometry(ChBody body, ChContactMaterial material, double radius, double height) {
    chronoPINVOKE.AddCapsuleGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddCylinderGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddCylinderGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddCylinderGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos) {
    chronoPINVOKE.AddCylinderGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height) {
    chronoPINVOKE.AddCylinderGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChContactMaterial material, double radius, ChVector3d p1, ChVector3d p2, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddCylinderGeometry__SWIG_5(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, ChVector3d.getCPtr(p1), ChVector3d.getCPtr(p2), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChContactMaterial material, double radius, ChVector3d p1, ChVector3d p2, bool visualization) {
    chronoPINVOKE.AddCylinderGeometry__SWIG_6(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, ChVector3d.getCPtr(p1), ChVector3d.getCPtr(p2), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddCylinderGeometry(ChBody body, ChContactMaterial material, double radius, ChVector3d p1, ChVector3d p2) {
    chronoPINVOKE.AddCylinderGeometry__SWIG_7(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, ChVector3d.getCPtr(p1), ChVector3d.getCPtr(p2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddConeGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddConeGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddConeGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChContactMaterial material, double radius, double height, ChVector3d pos) {
    chronoPINVOKE.AddConeGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConeGeometry(ChBody body, ChContactMaterial material, double radius, double height) {
    chronoPINVOKE.AddConeGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    bool ret = chronoPINVOKE.AddTriangleMeshGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    bool ret = chronoPINVOKE.AddTriangleMeshGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot) {
    bool ret = chronoPINVOKE.AddTriangleMeshGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos) {
    bool ret = chronoPINVOKE.AddTriangleMeshGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshGeometry(ChBody body, ChContactMaterial material, string obj_filename, string name) {
    bool ret = chronoPINVOKE.AddTriangleMeshGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot, float skin_thickness, bool use_original_asset, ChVisualMaterial vis_material) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), skin_thickness, use_original_asset, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot, float skin_thickness, bool use_original_asset) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), skin_thickness, use_original_asset);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot, float skin_thickness) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), skin_thickness);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecomposition(ChBody body, ChContactMaterial material, string obj_filename, string name) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecomposition__SWIG_5(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot, bool use_original_asset, ChVisualMaterial vis_material) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), use_original_asset, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot, bool use_original_asset) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), use_original_asset);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChContactMaterial material, string obj_filename, string name, ChVector3d pos) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionV2(ChBody body, ChContactMaterial material, string obj_filename, string name) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecompositionV2__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), obj_filename, name);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool AddTriangleMeshConvexDecompositionSplit(ChSystem system, ChContactMaterial material, string obj_filename, string name, ChVector3d pos, ChQuaterniond rot, double total_mass) {
    bool ret = chronoPINVOKE.AddTriangleMeshConvexDecompositionSplit(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(material), obj_filename, name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), total_mass);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void AddTriangleGeometry(ChBody body, ChContactMaterial material, ChVector3d vertA, ChVector3d vertB, ChVector3d vertC, string name, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddTriangleGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(vertA), ChVector3d.getCPtr(vertB), ChVector3d.getCPtr(vertC), name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChContactMaterial material, ChVector3d vertA, ChVector3d vertB, ChVector3d vertC, string name, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddTriangleGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(vertA), ChVector3d.getCPtr(vertB), ChVector3d.getCPtr(vertC), name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChContactMaterial material, ChVector3d vertA, ChVector3d vertB, ChVector3d vertC, string name, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddTriangleGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(vertA), ChVector3d.getCPtr(vertB), ChVector3d.getCPtr(vertC), name, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChContactMaterial material, ChVector3d vertA, ChVector3d vertB, ChVector3d vertC, string name, ChVector3d pos) {
    chronoPINVOKE.AddTriangleGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(vertA), ChVector3d.getCPtr(vertB), ChVector3d.getCPtr(vertC), name, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTriangleGeometry(ChBody body, ChContactMaterial material, ChVector3d vertA, ChVector3d vertB, ChVector3d vertC, string name) {
    chronoPINVOKE.AddTriangleGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(vertA), ChVector3d.getCPtr(vertB), ChVector3d.getCPtr(vertC), name);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, double srad, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddRoundedBoxGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), srad, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, double srad, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddRoundedBoxGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), srad, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, double srad, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddRoundedBoxGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), srad, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, double srad, ChVector3d pos) {
    chronoPINVOKE.AddRoundedBoxGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), srad, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedBoxGeometry(ChBody body, ChContactMaterial material, ChVector3d size, double srad) {
    chronoPINVOKE.AddRoundedBoxGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChVector3d.getCPtr(size), srad);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, double srad, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddRoundedCylinderGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, srad, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, double srad, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddRoundedCylinderGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, srad, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, double srad, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddRoundedCylinderGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, srad, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, double srad, ChVector3d pos) {
    chronoPINVOKE.AddRoundedCylinderGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, srad, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddRoundedCylinderGeometry(ChBody body, ChContactMaterial material, double radius, double height, double srad) {
    chronoPINVOKE.AddRoundedCylinderGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, height, srad);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChContactMaterial material, double radius, double thickness, int segments, int angle, ChVector3d pos, ChQuaterniond rot, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddTorusGeometry__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, thickness, segments, angle, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChContactMaterial material, double radius, double thickness, int segments, int angle, ChVector3d pos, ChQuaterniond rot, bool visualization) {
    chronoPINVOKE.AddTorusGeometry__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, thickness, segments, angle, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChContactMaterial material, double radius, double thickness, int segments, int angle, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddTorusGeometry__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, thickness, segments, angle, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChContactMaterial material, double radius, double thickness, int segments, int angle, ChVector3d pos) {
    chronoPINVOKE.AddTorusGeometry__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, thickness, segments, angle, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChContactMaterial material, double radius, double thickness, int segments, int angle) {
    chronoPINVOKE.AddTorusGeometry__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, thickness, segments, angle);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChContactMaterial material, double radius, double thickness, int segments) {
    chronoPINVOKE.AddTorusGeometry__SWIG_5(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, thickness, segments);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddTorusGeometry(ChBody body, ChContactMaterial material, double radius, double thickness) {
    chronoPINVOKE.AddTorusGeometry__SWIG_6(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), radius, thickness);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxContainer(ChBody body, ChContactMaterial material, ChFramed frame, ChVector3d size, double thickness, ChVector3i faces, bool visualization, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddBoxContainer__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChFramed.getCPtr(frame), ChVector3d.getCPtr(size), thickness, ChVector3i.getCPtr(faces), visualization, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxContainer(ChBody body, ChContactMaterial material, ChFramed frame, ChVector3d size, double thickness, ChVector3i faces, bool visualization) {
    chronoPINVOKE.AddBoxContainer__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChFramed.getCPtr(frame), ChVector3d.getCPtr(size), thickness, ChVector3i.getCPtr(faces), visualization);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddBoxContainer(ChBody body, ChContactMaterial material, ChFramed frame, ChVector3d size, double thickness, ChVector3i faces) {
    chronoPINVOKE.AddBoxContainer__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChFramed.getCPtr(frame), ChVector3d.getCPtr(size), thickness, ChVector3i.getCPtr(faces));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChBody CreateBoxContainer(ChSystem system, ChContactMaterial mat, ChVector3d size, double thickness, ChVector3d pos, ChQuaterniond rot, bool collide, bool overlap, bool closed) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateBoxContainer__SWIG_0(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), ChVector3d.getCPtr(size), thickness, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), collide, overlap, closed);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, ChContactMaterial mat, ChVector3d size, double thickness, ChVector3d pos, ChQuaterniond rot, bool collide, bool overlap) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateBoxContainer__SWIG_1(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), ChVector3d.getCPtr(size), thickness, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), collide, overlap);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, ChContactMaterial mat, ChVector3d size, double thickness, ChVector3d pos, ChQuaterniond rot, bool collide) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateBoxContainer__SWIG_2(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), ChVector3d.getCPtr(size), thickness, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), collide);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, ChContactMaterial mat, ChVector3d size, double thickness, ChVector3d pos, ChQuaterniond rot) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateBoxContainer__SWIG_3(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), ChVector3d.getCPtr(size), thickness, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, ChContactMaterial mat, ChVector3d size, double thickness, ChVector3d pos) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateBoxContainer__SWIG_4(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), ChVector3d.getCPtr(size), thickness, ChVector3d.getCPtr(pos));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateBoxContainer(ChSystem system, ChContactMaterial mat, ChVector3d size, double thickness) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateBoxContainer__SWIG_5(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), ChVector3d.getCPtr(size), thickness);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, ChContactMaterial mat, double radius, double height, double thickness, int numBoxes, ChVector3d pos, ChQuaterniond rot, bool collide, bool overlap, bool closed, bool isBoxBase, bool partialVisualization) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_0(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), radius, height, thickness, numBoxes, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), collide, overlap, closed, isBoxBase, partialVisualization);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, ChContactMaterial mat, double radius, double height, double thickness, int numBoxes, ChVector3d pos, ChQuaterniond rot, bool collide, bool overlap, bool closed, bool isBoxBase) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_1(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), radius, height, thickness, numBoxes, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), collide, overlap, closed, isBoxBase);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, ChContactMaterial mat, double radius, double height, double thickness, int numBoxes, ChVector3d pos, ChQuaterniond rot, bool collide, bool overlap, bool closed) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_2(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), radius, height, thickness, numBoxes, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), collide, overlap, closed);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, ChContactMaterial mat, double radius, double height, double thickness, int numBoxes, ChVector3d pos, ChQuaterniond rot, bool collide, bool overlap) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_3(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), radius, height, thickness, numBoxes, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), collide, overlap);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, ChContactMaterial mat, double radius, double height, double thickness, int numBoxes, ChVector3d pos, ChQuaterniond rot, bool collide) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_4(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), radius, height, thickness, numBoxes, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), collide);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, ChContactMaterial mat, double radius, double height, double thickness, int numBoxes, ChVector3d pos, ChQuaterniond rot) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_5(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), radius, height, thickness, numBoxes, ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, ChContactMaterial mat, double radius, double height, double thickness, int numBoxes, ChVector3d pos) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_6(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), radius, height, thickness, numBoxes, ChVector3d.getCPtr(pos));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CreateCylindricalContainerFromBoxes(ChSystem system, ChContactMaterial mat, double radius, double height, double thickness, int numBoxes) {
    global::System.IntPtr cPtr = chronoPINVOKE.CreateCylindricalContainerFromBoxes__SWIG_7(ChSystem.getCPtr(system), ChContactMaterial.getCPtr(mat), radius, height, thickness, numBoxes);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity, float hacd_smallclusterthreshold, float hacd_fusetolerance) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_0(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity, hacd_smallclusterthreshold, hacd_fusetolerance);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity, float hacd_smallclusterthreshold) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_1(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity, hacd_smallclusterthreshold);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes, float hacd_concavity) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_2(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes, hacd_concavity);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot, int hacd_maxhullcount, int hacd_maxhullmerge, int hacd_maxhullvertexes) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_3(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge, hacd_maxhullvertexes);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot, int hacd_maxhullcount, int hacd_maxhullmerge) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_4(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), hacd_maxhullcount, hacd_maxhullmerge);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot, int hacd_maxhullcount) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_5(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), hacd_maxhullcount);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_6(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_7(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexMesh(string file_name, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape) {
    bool ret = chronoPINVOKE.LoadConvexMesh__SWIG_8(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool LoadConvexHulls(string file_name, ChTriangleMeshConnected convex_mesh, vector_vector_ChVector3d convex_hulls) {
    bool ret = chronoPINVOKE.LoadConvexHulls(file_name, ChTriangleMeshConnected.getCPtr(convex_mesh), vector_vector_ChVector3d.getCPtr(convex_hulls));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot, bool use_original_asset, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_0(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), use_original_asset, ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot, bool use_original_asset) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_1(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), use_original_asset);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_2(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape, ChVector3d pos) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_3(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape), ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, ChConvexDecompositionHACDv2 convex_shape) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_4(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), ChConvexDecompositionHACDv2.getCPtr(convex_shape));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, vector_vector_ChVector3d convex_hulls, ChVector3d pos, ChQuaterniond rot, ChVisualMaterial vis_material) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_5(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), vector_vector_ChVector3d.getCPtr(convex_hulls), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot), ChVisualMaterial.getCPtr(vis_material));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, vector_vector_ChVector3d convex_hulls, ChVector3d pos, ChQuaterniond rot) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_6(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), vector_vector_ChVector3d.getCPtr(convex_hulls), ChVector3d.getCPtr(pos), ChQuaterniond.getCPtr(rot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, vector_vector_ChVector3d convex_hulls, ChVector3d pos) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_7(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), vector_vector_ChVector3d.getCPtr(convex_hulls), ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void AddConvexCollisionModel(ChBody body, ChContactMaterial material, ChTriangleMeshConnected convex_mesh, vector_vector_ChVector3d convex_hulls) {
    chronoPINVOKE.AddConvexCollisionModel__SWIG_8(ChBody.getCPtr(body), ChContactMaterial.getCPtr(material), ChTriangleMeshConnected.getCPtr(convex_mesh), vector_vector_ChVector3d.getCPtr(convex_hulls));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static bool LineLineIntersect(ChVector3d p1, ChVector3d p2, ChVector3d p3, ChVector3d p4, ChVector3d pa, ChVector3d pb, SWIGTYPE_p_double mua, SWIGTYPE_p_double mub) {
    bool ret = chronoPINVOKE.LineLineIntersect(ChVector3d.getCPtr(p1), ChVector3d.getCPtr(p2), ChVector3d.getCPtr(p3), ChVector3d.getCPtr(p4), ChVector3d.getCPtr(pa), ChVector3d.getCPtr(pb), SWIGTYPE_p_double.getCPtr(mua), SWIGTYPE_p_double.getCPtr(mub));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double PointLineDistance(ChVector3d B, ChVector3d A1, ChVector3d A2, SWIGTYPE_p_double u, SWIGTYPE_p_bool in_segment) {
    double ret = chronoPINVOKE.PointLineDistance(ChVector3d.getCPtr(B), ChVector3d.getCPtr(A1), ChVector3d.getCPtr(A2), SWIGTYPE_p_double.getCPtr(u), SWIGTYPE_p_bool.getCPtr(in_segment));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double PointTriangleDistance(ChVector3d B, ChVector3d A1, ChVector3d A2, ChVector3d A3, SWIGTYPE_p_double u, SWIGTYPE_p_double v, SWIGTYPE_p_bool in_triangle, ChVector3d Bprojected) {
    double ret = chronoPINVOKE.PointTriangleDistance(ChVector3d.getCPtr(B), ChVector3d.getCPtr(A1), ChVector3d.getCPtr(A2), ChVector3d.getCPtr(A3), SWIGTYPE_p_double.getCPtr(u), SWIGTYPE_p_double.getCPtr(v), SWIGTYPE_p_bool.getCPtr(in_triangle), ChVector3d.getCPtr(Bprojected));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DegenerateTriangle(ChVector3d Dx, ChVector3d Dy) {
    bool ret = chronoPINVOKE.DegenerateTriangle__SWIG_0(ChVector3d.getCPtr(Dx), ChVector3d.getCPtr(Dy));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool DegenerateTriangle(ChVector3d v1, ChVector3d v2, ChVector3d v3) {
    bool ret = chronoPINVOKE.DegenerateTriangle__SWIG_1(ChVector3d.getCPtr(v1), ChVector3d.getCPtr(v2), ChVector3d.getCPtr(v3));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChContactable in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBody__SWIG_0(ChContactable.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyAuxRef CastToChBodyAuxRef(ChContactable in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBodyAuxRef__SWIG_0(ChContactable.getCPtr(in_obj));
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChLoadable in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBody__SWIG_1(ChLoadable.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChNodeBase CastToChNodeBase(ChLoadable in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChNodeBase(ChLoadable.getCPtr(in_obj));
    ChNodeBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChNodeBase(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeFEA CastToChVisualShapeFEA(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeFEA(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeFEA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeFEA(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeModelFile CastToChVisualShapeModelFile(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeModelFile(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeModelFile ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeModelFile(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeTriangleMesh CastToChVisualShapeTriangleMesh(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeTriangleMesh(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeTriangleMesh(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeSphere CastToChVisualShapeSphere(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeSphere(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeSphere ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeSphere(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeEllipsoid CastToChVisualShapeEllipsoid(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeEllipsoid(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeEllipsoid ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeEllipsoid(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeBarrel CastToChVisualShapeBarrel(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeBarrel(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeBarrel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeBarrel(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeBox CastToChVisualShapeBox(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeBox(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeBox(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeCone CastToChVisualShapeCone(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeCone(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeCone ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeCone(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeCylinder CastToChVisualShapeCylinder(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeCylinder(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeCylinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeCylinder(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeCapsule CastToChVisualShapeCapsule(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeCapsule(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeCapsule ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeCapsule(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeRoundedCylinder CastToChVisualShapeRoundedCylinder(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeRoundedCylinder(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeRoundedCylinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeRoundedCylinder(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeRoundedBox CastToChVisualShapeRoundedBox(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeRoundedBox(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeRoundedBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeRoundedBox(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapePath CastToChVisualShapePath(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapePath(ChVisualShape.getCPtr(in_obj));
    ChVisualShapePath ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapePath(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeLine CastToChVisualShapeLine(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeLine(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeLine(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapePointPoint CastToChVisualShapePointPoint(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapePointPoint(ChVisualShape.getCPtr(in_obj));
    ChVisualShapePointPoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapePointPoint(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeRotSpring CastToChVisualShapeRotSpring(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeRotSpring(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeRotSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeRotSpring(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeSegment CastToChVisualShapeSegment(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeSegment(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeSegment ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeSegment(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeSpring CastToChVisualShapeSpring(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeSpring(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeSpring(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShapeSurface CastToChVisualShapeSurface(ChVisualShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChVisualShapeSurface(ChVisualShape.getCPtr(in_obj));
    ChVisualShapeSurface ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShapeSurface(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeArc2D CastToChCollisionShapeArc2D(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeArc2D(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeArc2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeArc2D(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeBarrel CastToChCollisionShapeBarrel(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeBarrel(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeBarrel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeBarrel(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeBox CastToChCollisionShapeBox(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeBox(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeBox(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeCapsule CastToChCollisionShapeCapsule(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeCapsule(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeCapsule ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeCapsule(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeCone CastToChCollisionShapeCone(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeCone(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeCone ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeCone(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeConvexHull CastToChCollisionShapeConvexHull(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeConvexHull(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeConvexHull ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeConvexHull(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeCylinder CastToChCollisionShapeCylinder(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeCylinder(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeCylinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeCylinder(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeCylindricalShell CastToChCollisionShapeCylindricalShell(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeCylindricalShell(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeCylindricalShell ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeCylindricalShell(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeEllipsoid CastToChCollisionShapeEllipsoid(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeEllipsoid(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeEllipsoid ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeEllipsoid(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapePath2D CastToChCollisionShapePath2D(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapePath2D(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapePath2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapePath2D(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapePoint CastToChCollisionShapePoint(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapePoint(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapePoint ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapePoint(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeRoundedBox CastToChCollisionShapeRoundedBox(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeRoundedBox(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeRoundedBox ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeRoundedBox(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeRoundedCylinder CastToChCollisionShapeRoundedCylinder(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeRoundedCylinder(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeRoundedCylinder ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeRoundedCylinder(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeSegment2D CastToChCollisionShapeSegment2D(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeSegment2D(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeSegment2D ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeSegment2D(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeSphere CastToChCollisionShapeSphere(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeSphere(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeSphere ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeSphere(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeTriangle CastToChCollisionShapeTriangle(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeTriangle(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeTriangle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeTriangle(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionShapeTriangleMesh CastToChCollisionShapeTriangleMesh(ChCollisionShape in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionShapeTriangleMesh(ChCollisionShape.getCPtr(in_obj));
    ChCollisionShapeTriangleMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionShapeTriangleMesh(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChCollisionSystemBullet CastToChCollisionSystemBullet(ChCollisionSystem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChCollisionSystemBullet(ChCollisionSystem.getCPtr(in_obj));
    ChCollisionSystemBullet ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionSystemBullet(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBody__SWIG_2(ChBodyFrame.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyAuxRef CastToChBodyAuxRef(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBodyAuxRef__SWIG_1(ChBodyFrame.getCPtr(in_obj));
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChConveyor CastToChConveyor(ChBodyFrame in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChConveyor__SWIG_0(ChBodyFrame.getCPtr(in_obj));
    ChConveyor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChConveyor(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyFrame CastToChBodyFrame(ChBody in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBodyFrame__SWIG_0(ChBody.getCPtr(in_obj));
    ChBodyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyFrame(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyFrame CastToChBodyFrame(ChBodyAuxRef in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBodyFrame__SWIG_1(ChBodyAuxRef.getCPtr(in_obj));
    ChBodyFrame ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyFrame(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBody CastToChBody(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBody__SWIG_3(ChPhysicsItem.getCPtr(in_obj));
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChConveyor CastToChConveyor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChConveyor__SWIG_1(ChPhysicsItem.getCPtr(in_obj));
    ChConveyor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChConveyor(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChBodyAuxRef CastToChBodyAuxRef(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChBodyAuxRef__SWIG_2(ChPhysicsItem.getCPtr(in_obj));
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChIndexedParticles CastToChIndexedParticles(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChIndexedParticles__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChIndexedParticles ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIndexedParticles(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChParticleCloud CastToChParticleCloud(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChParticleCloud(ChPhysicsItem.getCPtr(in_obj));
    ChParticleCloud ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChParticleCloud(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChIndexedParticles CastToChIndexedParticles(ChParticleCloud in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChIndexedParticles__SWIG_1(ChParticleCloud.getCPtr(in_obj));
    ChIndexedParticles ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIndexedParticles(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChNodeXYZ CastToChNodeXYZ(ChNodeBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChNodeXYZ(ChNodeBase.getCPtr(in_obj));
    ChNodeXYZ ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChNodeXYZ(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLink CastToChLink(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLink(ChPhysicsItem.getCPtr(in_obj));
    ChLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLink(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMarkers CastToChLinkMarkers(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMarkers__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMarkers ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMarkers(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLock CastToChLinkLock(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLock__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLock(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockLock CastToChLinkLockLock(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockLock__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockLock(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockRevolute CastToChLinkLockRevolute(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockRevolute__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockRevolute(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockSpherical CastToChLinkLockSpherical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockSpherical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockSpherical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockCylindrical CastToChLinkLockCylindrical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockCylindrical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockCylindrical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockCylindrical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPrismatic CastToChLinkLockPrismatic(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPrismatic__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPrismatic(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointPlane CastToChLinkLockPointPlane(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPointPlane__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPointPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointPlane(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointLine CastToChLinkLockPointLine(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPointLine__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPointLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointLine(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockOldham CastToChLinkLockOldham(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockOldham__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockOldham ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockOldham(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockFree CastToChLinkLockFree(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockFree__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockFree ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockFree(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockAlign CastToChLinkLockAlign(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockAlign__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockAlign ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockAlign(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockParallel CastToChLinkLockParallel(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockParallel__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockParallel(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPerpend CastToChLinkLockPerpend(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPerpend__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPerpend ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPerpend(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMate CastToChLinkMate(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMate__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMate(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateGeneric CastToChLinkMateGeneric(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateGeneric__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateGeneric(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePlanar CastToChLinkMatePlanar(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMatePlanar__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMatePlanar ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePlanar(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateCylindrical CastToChLinkMateCylindrical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateCylindrical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateCylindrical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateCylindrical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateSpherical CastToChLinkMateSpherical(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateSpherical__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateSpherical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateDistanceZ CastToChLinkMateDistanceZ(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateDistanceZ__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateDistanceZ ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateDistanceZ(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateParallel CastToChLinkMateParallel(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateParallel__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateParallel(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateOrthogonal CastToChLinkMateOrthogonal(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateOrthogonal__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateOrthogonal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateOrthogonal(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateFix CastToChLinkMateFix(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateFix__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateFix ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateFix(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateRevolute CastToChLinkMateRevolute(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateRevolute__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMateRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateRevolute(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePrismatic CastToChLinkMatePrismatic(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMatePrismatic__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMatePrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePrismatic(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockGear CastToChLinkLockGear(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockGear__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockGear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockGear(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkDistance CastToChLinkDistance(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkDistance__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkDistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkDistance(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockLinActuator CastToChLinkLockLinActuator(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockLinActuator__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockLinActuator ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockLinActuator(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPulley CastToChLinkLockPulley(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPulley__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockPulley ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPulley(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockScrew CastToChLinkLockScrew(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockScrew__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkLockScrew ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockScrew(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkTSDA CastToChLinkTSDA(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkTSDA__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkTSDA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkTSDA(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkRSDA CastToChLinkRSDA(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkRSDA(ChPhysicsItem.getCPtr(in_obj));
    ChLinkRSDA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkRSDA(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotor CastToChLinkMotor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotor(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotor(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinear CastToChLinkMotorLinear(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorLinear(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinear(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearDriveline CastToChLinkMotorLinearDriveline(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorLinearDriveline(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearDriveline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearDriveline(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearForce CastToChLinkMotorLinearForce(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorLinearForce(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearForce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearForce(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearPosition CastToChLinkMotorLinearPosition(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorLinearPosition(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearPosition ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearPosition(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorLinearSpeed CastToChLinkMotorLinearSpeed(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorLinearSpeed(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorLinearSpeed ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorLinearSpeed(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotation CastToChLinkMotorRotation(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorRotation(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotation(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationAngle CastToChLinkMotorRotationAngle(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorRotationAngle(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationAngle ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationAngle(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationDriveline CastToChLinkMotorRotationDriveline(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorRotationDriveline(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationDriveline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationDriveline(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationSpeed CastToChLinkMotorRotationSpeed(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorRotationSpeed(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationSpeed ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationSpeed(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMotorRotationTorque CastToChLinkMotorRotationTorque(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMotorRotationTorque(ChPhysicsItem.getCPtr(in_obj));
    ChLinkMotorRotationTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMotorRotationTorque(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadContainer CastToChLoadContainer(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadContainer(ChPhysicsItem.getCPtr(in_obj));
    ChLoadContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadContainer(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkBushing CastToChLinkBushing(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkBushing__SWIG_0(ChPhysicsItem.getCPtr(in_obj));
    ChLinkBushing ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkBushing(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMarkers CastToChLinkMarkers(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMarkers__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMarkers ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMarkers(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLock CastToChLinkLock(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLock__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLock(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockLock CastToChLinkLockLock(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockLock__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockLock ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockLock(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockRevolute CastToChLinkLockRevolute(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockRevolute__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockRevolute(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockSpherical CastToChLinkLockSpherical(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockSpherical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockSpherical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockCylindrical CastToChLinkLockCylindrical(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockCylindrical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockCylindrical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockCylindrical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPrismatic CastToChLinkLockPrismatic(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPrismatic__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPrismatic(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointPlane CastToChLinkLockPointPlane(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPointPlane__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPointPlane ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointPlane(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointLine CastToChLinkLockPointLine(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPointLine__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPointLine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointLine(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockOldham CastToChLinkLockOldham(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockOldham__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockOldham ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockOldham(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockFree CastToChLinkLockFree(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockFree__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockFree ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockFree(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockAlign CastToChLinkLockAlign(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockAlign__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockAlign ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockAlign(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockParallel CastToChLinkLockParallel(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockParallel__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockParallel(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPerpend CastToChLinkLockPerpend(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPerpend__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPerpend ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPerpend(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMate CastToChLinkMate(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMate__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMate(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateGeneric CastToChLinkMateGeneric(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateGeneric__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateGeneric(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePlanar CastToChLinkMatePlanar(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMatePlanar__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMatePlanar ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePlanar(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateCylindrical CastToChLinkMateCylindrical(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateCylindrical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateCylindrical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateCylindrical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateSpherical CastToChLinkMateSpherical(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateSpherical__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateSpherical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateDistanceZ CastToChLinkMateDistanceZ(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateDistanceZ__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateDistanceZ ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateDistanceZ(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateParallel CastToChLinkMateParallel(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateParallel__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateParallel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateParallel(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateOrthogonal CastToChLinkMateOrthogonal(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateOrthogonal__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateOrthogonal ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateOrthogonal(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateFix CastToChLinkMateFix(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateFix__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateFix ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateFix(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMateRevolute CastToChLinkMateRevolute(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMateRevolute__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMateRevolute ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMateRevolute(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkMatePrismatic CastToChLinkMatePrismatic(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkMatePrismatic__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkMatePrismatic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkMatePrismatic(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockGear CastToChLinkLockGear(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockGear__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockGear ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockGear(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkDistance CastToChLinkDistance(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkDistance__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkDistance ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkDistance(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockLinActuator CastToChLinkLockLinActuator(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockLinActuator__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockLinActuator ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockLinActuator(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPulley CastToChLinkLockPulley(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPulley__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockPulley ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPulley(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockScrew CastToChLinkLockScrew(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockScrew__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkLockScrew ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockScrew(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkTSDA CastToChLinkTSDA(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkTSDA__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkTSDA ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkTSDA(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockPointSpline CastToChLinkLockPointSpline(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockPointSpline(ChLink.getCPtr(in_obj));
    ChLinkLockPointSpline ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockPointSpline(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkLockTrajectory CastToChLinkLockTrajectory(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkLockTrajectory(ChLink.getCPtr(in_obj));
    ChLinkLockTrajectory ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLockTrajectory(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLinkBushing CastToChLinkBushing(ChLink in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLinkBushing__SWIG_1(ChLink.getCPtr(in_obj));
    ChLinkBushing ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkBushing(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaft CastToChShaft(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaft(ChPhysicsItem.getCPtr(in_obj));
    ChShaft ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaft(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftBodyRotation CastToChShaftBodyRotation(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftBodyRotation(ChPhysicsItem.getCPtr(in_obj));
    ChShaftBodyRotation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftBodyRotation(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftBodyTranslation CastToChShaftBodyTranslation(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftBodyTranslation(ChPhysicsItem.getCPtr(in_obj));
    ChShaftBodyTranslation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftBodyTranslation(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsCouple CastToChShaftsCouple(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftsCouple(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsCouple ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsCouple(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsClutch CastToChShaftsClutch(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftsClutch(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsClutch ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsClutch(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsMotor CastToChShaftsMotor(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftsMotor(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsMotor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsMotor(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsTorsionSpring CastToChShaftsTorsionSpring(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftsTorsionSpring(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsTorsionSpring ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsTorsionSpring(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsAppliedTorque CastToChShaftsAppliedTorque(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftsAppliedTorque(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsAppliedTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsAppliedTorque(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsPlanetary CastToChShaftsPlanetary(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftsPlanetary(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsPlanetary ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsPlanetary(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsTorque CastToChShaftsTorque(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftsTorque(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsTorque(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChShaftsThermalEngine CastToChShaftsThermalEngine(ChPhysicsItem in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChShaftsThermalEngine(ChPhysicsItem.getCPtr(in_obj));
    ChShaftsThermalEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChShaftsThermalEngine(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadCustom CastToChLoadCustom(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadCustom(ChLoadBase.getCPtr(in_obj));
    ChLoadCustom ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadCustom(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadCustomMultiple CastToChLoadCustomMultiple(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadCustomMultiple(ChLoadBase.getCPtr(in_obj));
    ChLoadCustomMultiple ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadCustomMultiple(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyForce CastToChLoadBodyForce(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyForce(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyForce ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyForce(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyTorque CastToChLoadBodyTorque(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyTorque(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyTorque(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyInertia CastToChLoadBodyInertia(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyInertia(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyInertia ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyInertia(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBody CastToChLoadBodyBody(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyBody(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyTorque CastToChLoadBodyBodyTorque(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyBodyTorque(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyTorque ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyTorque(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingSpherical CastToChLoadBodyBodyBushingSpherical(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyBodyBushingSpherical(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingSpherical ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingSpherical(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingPlastic CastToChLoadBodyBodyBushingPlastic(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyBodyBushingPlastic(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingPlastic ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingPlastic(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingMate CastToChLoadBodyBodyBushingMate(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyBodyBushingMate(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingMate ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingMate(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChLoadBodyBodyBushingGeneric CastToChLoadBodyBodyBushingGeneric(ChLoadBase in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChLoadBodyBodyBushingGeneric(ChLoadBase.getCPtr(in_obj));
    ChLoadBodyBodyBushingGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingGeneric(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshConnected CastToChTriangleMeshConnected(ChGeometry in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChTriangleMeshConnected(ChGeometry.getCPtr(in_obj));
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshSoup CastToChTriangleMeshSoup(ChGeometry in_obj) {
    global::System.IntPtr cPtr = chronoPINVOKE.CastToChTriangleMeshSoup(ChGeometry.getCPtr(in_obj));
    ChTriangleMeshSoup ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshSoup(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly string EIGEN_MATRIXBASE_PLUGIN = chronoPINVOKE.EIGEN_MATRIXBASE_PLUGIN_get();
  public static readonly string EIGEN_SPARSEMATRIX_PLUGIN = chronoPINVOKE.EIGEN_SPARSEMATRIX_PLUGIN_get();
}
