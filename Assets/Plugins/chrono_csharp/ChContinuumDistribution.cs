//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChContinuumDistribution : ChDistribution {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChContinuumDistribution(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChContinuumDistribution_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChContinuumDistribution obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChContinuumDistribution(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChContinuumDistribution(ChVectorDynamicd x, ChVectorDynamicd y) : this(chronoPINVOKE.new_ChContinuumDistribution(ChVectorDynamicd.getCPtr(x), ChVectorDynamicd.getCPtr(y)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override double GetRandom() {
    double ret = chronoPINVOKE.ChContinuumDistribution_GetRandom(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetProbabilityXPoints() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChContinuumDistribution_GetProbabilityXPoints(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetProbabilityYPoints() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChContinuumDistribution_GetProbabilityYPoints(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetProbabilityCDFCumulativeX() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChContinuumDistribution_GetProbabilityCDFCumulativeX(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetProbabilityCDFCumulativeY() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChContinuumDistribution_GetProbabilityCDFCumulativeY(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
