//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTSDAGeometry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChTSDAGeometry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTSDAGeometry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChTSDAGeometry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chrono_vehiclePINVOKE.delete_ChTSDAGeometry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChTSDAGeometry() : this(chrono_vehiclePINVOKE.new_ChTSDAGeometry(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_chrono__utils__ChTSDAGeometry__SegmentShape_t vis_segment {
    set {
      chrono_vehiclePINVOKE.ChTSDAGeometry_vis_segment_set(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__utils__ChTSDAGeometry__SegmentShape_t.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTSDAGeometry_vis_segment_get(swigCPtr);
      SWIGTYPE_p_std__shared_ptrT_chrono__utils__ChTSDAGeometry__SegmentShape_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__shared_ptrT_chrono__utils__ChTSDAGeometry__SegmentShape_t(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__shared_ptrT_chrono__utils__ChTSDAGeometry__SpringShape_t vis_spring {
    set {
      chrono_vehiclePINVOKE.ChTSDAGeometry_vis_spring_set(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__utils__ChTSDAGeometry__SpringShape_t.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTSDAGeometry_vis_spring_get(swigCPtr);
      SWIGTYPE_p_std__shared_ptrT_chrono__utils__ChTSDAGeometry__SpringShape_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__shared_ptrT_chrono__utils__ChTSDAGeometry__SpringShape_t(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChColor color {
    set {
      chrono_vehiclePINVOKE.ChTSDAGeometry_color_set(swigCPtr, ChColor.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTSDAGeometry_color_get(swigCPtr);
      ChColor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChColor(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void CreateVisualizationAssets(ChLinkTSDA tsda) {
    chrono_vehiclePINVOKE.ChTSDAGeometry_CreateVisualizationAssets(swigCPtr, ChLinkTSDA.getCPtr(tsda));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
