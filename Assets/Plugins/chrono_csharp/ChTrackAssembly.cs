//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTrackAssembly : ChPart {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTrackAssembly(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChTrackAssembly_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTrackAssembly obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChTrackAssembly(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public VehicleSide GetVehicleSide() {
    VehicleSide ret = (VehicleSide)chrono_vehiclePINVOKE.ChTrackAssembly_GetVehicleSide(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumTrackSuspensions() {
    uint ret = chrono_vehiclePINVOKE.ChTrackAssembly_GetNumTrackSuspensions(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumRollers() {
    uint ret = chrono_vehiclePINVOKE.ChTrackAssembly_GetNumRollers(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumTrackShoes() {
    uint ret = chrono_vehiclePINVOKE.ChTrackAssembly_GetNumTrackShoes(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChSprocket GetSprocket() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackAssembly_GetSprocket(swigCPtr);
    ChSprocket ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSprocket(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChIdler GetIdler() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackAssembly_GetIdler(swigCPtr);
    ChIdler ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIdler(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTrackWheel GetIdlerWheel() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackAssembly_GetIdlerWheel(swigCPtr);
    ChTrackWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackWheel(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTrackBrake GetBrake() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackAssembly_GetBrake(swigCPtr);
    ChTrackBrake ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackBrake(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__vehicle__ChTrackSuspension_t_t GetTrackSuspensions() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__vehicle__ChTrackSuspension_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_chrono__vehicle__ChTrackSuspension_t_t(chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackSuspensions(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTrackSuspension GetTrackSuspension(uint id) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackSuspension(swigCPtr, id);
    ChTrackSuspension ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackSuspension(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTrackWheel GetRoller(uint id) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackAssembly_GetRoller(swigCPtr, id);
    ChTrackWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackWheel(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTrackWheel GetRoadWheel(uint id) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackAssembly_GetRoadWheel(swigCPtr, id);
    ChTrackWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackWheel(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChTrackShoe GetTrackShoe(uint id) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackShoe(swigCPtr, id);
    ChTrackShoe ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTrackShoe(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetTrackShoePos(uint id) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackShoePos(swigCPtr, id), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetTrackShoeRot(uint id) {
    ChQuaterniond ret = new ChQuaterniond(chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackShoeRot(swigCPtr, id), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetTrackShoeLinVel(uint id) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackShoeLinVel(swigCPtr, id), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetTrackShoeAngVel(uint id) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackShoeAngVel(swigCPtr, id), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetTrackShoeTension(uint id) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackShoeTension(swigCPtr, id), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public BodyState GetTrackShoeState(uint id) {
    BodyState ret = new BodyState(chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackShoeState(swigCPtr, id), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetTrackShoeStates(SWIGTYPE_p_std__vectorT_chrono__vehicle__BodyState_t states) {
    chrono_vehiclePINVOKE.ChTrackAssembly_GetTrackShoeStates(swigCPtr, SWIGTYPE_p_std__vectorT_chrono__vehicle__BodyState_t.getCPtr(states));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChVector3d GetSprocketLocation() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackAssembly_GetSprocketLocation(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetIdlerLocation() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackAssembly_GetIdlerLocation(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetRoadWhelAssemblyLocation(int which) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackAssembly_GetRoadWhelAssemblyLocation(swigCPtr, which), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetRollerLocation(int which) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTrackAssembly_GetRollerLocation(swigCPtr, which), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initialize(ChChassis chassis, ChVector3d location, bool create_shoes) {
    chrono_vehiclePINVOKE.ChTrackAssembly_Initialize__SWIG_0(swigCPtr, ChChassis.getCPtr(chassis), ChVector3d.getCPtr(location), create_shoes);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChChassis chassis, ChVector3d location) {
    chrono_vehiclePINVOKE.ChTrackAssembly_Initialize__SWIG_1(swigCPtr, ChChassis.getCPtr(chassis), ChVector3d.getCPtr(location));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double ReportTrackLength() {
    double ret = chrono_vehiclePINVOKE.ChTrackAssembly_ReportTrackLength(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ForceTorque ReportSuspensionForce(uint id) {
    ForceTorque ret = new ForceTorque(chrono_vehiclePINVOKE.ChTrackAssembly_ReportSuspensionForce(swigCPtr, id), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSprocketVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetSprocketVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIdlerVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetIdlerVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSuspensionVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetSuspensionVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIdlerWheelVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetIdlerWheelVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoadWheelVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetRoadWheelVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRollerVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetRollerVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackShoeVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetTrackShoeVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWheelCollisionType(bool roadwheel_as_cylinder, bool idler_as_cylinder, bool roller_as_cylinder) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetWheelCollisionType(swigCPtr, roadwheel_as_cylinder, idler_as_cylinder, roller_as_cylinder);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(double time, double braking) {
    chrono_vehiclePINVOKE.ChTrackAssembly_Synchronize__SWIG_0(swigCPtr, time, braking);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(double time, double braking, TerrainForces shoe_forces) {
    chrono_vehiclePINVOKE.ChTrackAssembly_Synchronize__SWIG_1(swigCPtr, time, braking, TerrainForces.getCPtr(shoe_forces));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Advance(double step) {
    chrono_vehiclePINVOKE.ChTrackAssembly_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetOutput(bool state) {
    chrono_vehiclePINVOKE.ChTrackAssembly_SetOutput(swigCPtr, state);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LogConstraintViolations() {
    chrono_vehiclePINVOKE.ChTrackAssembly_LogConstraintViolations(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsRoadwheelCylinder() {
    bool ret = chrono_vehiclePINVOKE.ChTrackAssembly_IsRoadwheelCylinder(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsIdlerCylinder() {
    bool ret = chrono_vehiclePINVOKE.ChTrackAssembly_IsIdlerCylinder(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsRolerCylinder() {
    bool ret = chrono_vehiclePINVOKE.ChTrackAssembly_IsRolerCylinder(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
