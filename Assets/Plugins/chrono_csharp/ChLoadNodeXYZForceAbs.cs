//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoadNodeXYZForceAbs : ChLoadNodeXYZForce {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLoadNodeXYZForceAbs(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLoadNodeXYZForceAbs_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoadNodeXYZForceAbs obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLoadNodeXYZForceAbs(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLoadNodeXYZForceAbs(ChNodeXYZ node, ChVector3d force) : this(chronoPINVOKE.new_ChLoadNodeXYZForceAbs(ChNodeXYZ.getCPtr(node), ChVector3d.getCPtr(force)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ComputeForce(ChVector3d abs_pos, ChVector3d abs_vel, ChVector3d abs_force) {
    chronoPINVOKE.ChLoadNodeXYZForceAbs_ComputeForce(swigCPtr, ChVector3d.getCPtr(abs_pos), ChVector3d.getCPtr(abs_vel), ChVector3d.getCPtr(abs_force));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetForceBase(ChVector3d force) {
    chronoPINVOKE.ChLoadNodeXYZForceAbs_SetForceBase(swigCPtr, ChVector3d.getCPtr(force));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public new ChVector3d GetForce() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLoadNodeXYZForceAbs_GetForce(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetModulationFunction(ChFunction modulation) {
    chronoPINVOKE.ChLoadNodeXYZForceAbs_SetModulationFunction(swigCPtr, ChFunction.getCPtr(modulation));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
