//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChNodeBase : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChNodeBase(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChNodeBase obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChNodeBase() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChNodeBase(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChNodeBase_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChNodeBase_GetNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumCoordsPosLevelActive() {
    uint ret = chronoPINVOKE.ChNodeBase_GetNumCoordsPosLevelActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumCoordsVelLevelActive() {
    uint ret = chronoPINVOKE.ChNodeBase_GetNumCoordsVelLevelActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsAllCoordsActive() {
    bool ret = chronoPINVOKE.ChNodeBase_IsAllCoordsActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint NodeGetOffsetPosLevel() {
    uint ret = chronoPINVOKE.ChNodeBase_NodeGetOffsetPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint NodeGetOffsetVelLevel() {
    uint ret = chronoPINVOKE.ChNodeBase_NodeGetOffsetVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void NodeSetOffsetPosLevel(uint moff) {
    chronoPINVOKE.ChNodeBase_NodeSetOffsetPosLevel(swigCPtr, moff);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void NodeSetOffsetVelLevel(uint moff) {
    chronoPINVOKE.ChNodeBase_NodeSetOffsetVelLevel(swigCPtr, moff);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntStateGather(uint off_x, ChState x, uint off_v, ChStateDelta v, SWIGTYPE_p_double T) {
    chronoPINVOKE.ChNodeBase_NodeIntStateGather(swigCPtr, off_x, ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(v), SWIGTYPE_p_double.getCPtr(T));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntStateScatter(uint off_x, ChState x, uint off_v, ChStateDelta v, double T) {
    chronoPINVOKE.ChNodeBase_NodeIntStateScatter(swigCPtr, off_x, ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(v), T);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntStateGatherAcceleration(uint off_a, ChStateDelta a) {
    chronoPINVOKE.ChNodeBase_NodeIntStateGatherAcceleration(swigCPtr, off_a, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntStateScatterAcceleration(uint off_a, ChStateDelta a) {
    chronoPINVOKE.ChNodeBase_NodeIntStateScatterAcceleration(swigCPtr, off_a, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntStateIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
    chronoPINVOKE.ChNodeBase_NodeIntStateIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntStateGetIncrement(uint off_x, ChState x_new, ChState x, uint off_v, ChStateDelta Dv) {
    chronoPINVOKE.ChNodeBase_NodeIntStateGetIncrement(swigCPtr, off_x, ChState.getCPtr(x_new), ChState.getCPtr(x), off_v, ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntLoadResidual_F(uint off, ChVectorDynamicd R, double c) {
    chronoPINVOKE.ChNodeBase_NodeIntLoadResidual_F(swigCPtr, off, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntLoadResidual_Mv(uint off, ChVectorDynamicd R, ChVectorDynamicd w, double c) {
    chronoPINVOKE.ChNodeBase_NodeIntLoadResidual_Mv(swigCPtr, off, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntLoadLumpedMass_Md(uint off, ChVectorDynamicd Md, SWIGTYPE_p_double error, double c) {
    chronoPINVOKE.ChNodeBase_NodeIntLoadLumpedMass_Md(swigCPtr, off, ChVectorDynamicd.getCPtr(Md), SWIGTYPE_p_double.getCPtr(error), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntToDescriptor(uint off_v, ChStateDelta v, ChVectorDynamicd R) {
    chronoPINVOKE.ChNodeBase_NodeIntToDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), ChVectorDynamicd.getCPtr(R));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void NodeIntFromDescriptor(uint off_v, ChStateDelta v) {
    chronoPINVOKE.ChNodeBase_NodeIntFromDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void InjectVariables(SWIGTYPE_p_ChSystemDescriptor descriptor) {
    chronoPINVOKE.ChNodeBase_InjectVariables(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesFbReset() {
    chronoPINVOKE.ChNodeBase_VariablesFbReset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesFbLoadForces(double factor) {
    chronoPINVOKE.ChNodeBase_VariablesFbLoadForces__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesFbLoadForces() {
    chronoPINVOKE.ChNodeBase_VariablesFbLoadForces__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesQbLoadSpeed() {
    chronoPINVOKE.ChNodeBase_VariablesQbLoadSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesFbIncrementMq() {
    chronoPINVOKE.ChNodeBase_VariablesFbIncrementMq(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesQbSetSpeed(double step) {
    chronoPINVOKE.ChNodeBase_VariablesQbSetSpeed__SWIG_0(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesQbSetSpeed() {
    chronoPINVOKE.ChNodeBase_VariablesQbSetSpeed__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesQbIncrementPosition(double step) {
    chronoPINVOKE.ChNodeBase_VariablesQbIncrementPosition(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChNodeBase_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChNodeBase_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
