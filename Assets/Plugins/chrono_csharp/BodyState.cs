//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class BodyState : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BodyState(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(BodyState obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~BodyState() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chrono_vehiclePINVOKE.delete_BodyState(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChVector3d pos {
    set {
      chrono_vehiclePINVOKE.BodyState_pos_set(swigCPtr, ChVector3d.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.BodyState_pos_get(swigCPtr);
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChQuaterniond rot {
    set {
      chrono_vehiclePINVOKE.BodyState_rot_set(swigCPtr, ChQuaterniond.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.BodyState_rot_get(swigCPtr);
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChVector3d lin_vel {
    set {
      chrono_vehiclePINVOKE.BodyState_lin_vel_set(swigCPtr, ChVector3d.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.BodyState_lin_vel_get(swigCPtr);
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChVector3d ang_vel {
    set {
      chrono_vehiclePINVOKE.BodyState_ang_vel_set(swigCPtr, ChVector3d.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.BodyState_ang_vel_get(swigCPtr);
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public BodyState() : this(chrono_vehiclePINVOKE.new_BodyState(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
