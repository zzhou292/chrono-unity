//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChPowertrainAssembly : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChPowertrainAssembly(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChPowertrainAssembly obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChPowertrainAssembly() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_ChPowertrainAssembly(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChPowertrainAssembly(ChEngine engine, ChTransmission transmission) : this(chrono_vehiclePINVOKE.new_ChPowertrainAssembly(ChEngine.getCPtr(engine), ChTransmission.getCPtr(transmission)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChEngine GetEngine() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChPowertrainAssembly_GetEngine(swigCPtr);
    ChEngine ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChEngine(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTransmission GetTransmission() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChPowertrainAssembly_GetTransmission(swigCPtr);
    ChTransmission ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTransmission(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetOutputTorque() {
    double ret = chrono_vehiclePINVOKE.ChPowertrainAssembly_GetOutputTorque(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initialize(ChChassis chassis) {
    chrono_vehiclePINVOKE.ChPowertrainAssembly_Initialize(swigCPtr, ChChassis.getCPtr(chassis));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(double time, DriverInputs driver_inputs, double driveshaft_speed) {
    chrono_vehiclePINVOKE.ChPowertrainAssembly_Synchronize(swigCPtr, time, DriverInputs.getCPtr(driver_inputs), driveshaft_speed);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Advance(double step) {
    chrono_vehiclePINVOKE.ChPowertrainAssembly_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
