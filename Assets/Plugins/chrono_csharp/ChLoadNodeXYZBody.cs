//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoadNodeXYZBody : ChLoadCustomMultiple {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLoadNodeXYZBody(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLoadNodeXYZBody_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoadNodeXYZBody obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLoadNodeXYZBody(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual void ComputeForce(ChFrameMovingd rel_AB, ChVector3d loc_force) {
    chronoPINVOKE.ChLoadNodeXYZBody_ComputeForce(swigCPtr, ChFrameMovingd.getCPtr(rel_AB), ChVector3d.getCPtr(loc_force));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetForce() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLoadNodeXYZBody_GetForce(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetApplicationFrameB(ChFramed application_frame) {
    chronoPINVOKE.ChLoadNodeXYZBody_SetApplicationFrameB(swigCPtr, ChFramed.getCPtr(application_frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed GetApplicationFrameB() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLoadNodeXYZBody_GetApplicationFrameB(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFrameMovingd GetAbsoluteFrameB() {
    ChFrameMovingd ret = new ChFrameMovingd(chronoPINVOKE.ChLoadNodeXYZBody_GetAbsoluteFrameB(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChNodeXYZ GetNode() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLoadNodeXYZBody_GetNode(swigCPtr);
    ChNodeXYZ ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChNodeXYZ(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody GetBody() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLoadNodeXYZBody_GetBody(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
