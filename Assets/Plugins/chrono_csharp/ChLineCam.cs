//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLineCam : ChLine {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLineCam(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLineCam_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLineCam obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLineCam(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLineCam() : this(chronoPINVOKE.new_ChLineCam__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLineCam(ChLineCam source) : this(chronoPINVOKE.new_ChLineCam__SWIG_1(ChLineCam.getCPtr(source)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChGeometry Clone() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLineCam_Clone(swigCPtr);
    ChLineCam ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLineCam(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual new ChGeometry.Type GetType() {
    ChGeometry.Type ret = (ChGeometry.Type)chronoPINVOKE.ChLineCam_GetType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCamType(ChLineCam.CamType t) {
    chronoPINVOKE.ChLineCam_SetCamType(swigCPtr, (int)t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLineCam.CamType GetCamType() {
    ChLineCam.CamType ret = (ChLineCam.CamType)chronoPINVOKE.ChLineCam_GetCamType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void SetClosed(bool closed) {
    chronoPINVOKE.ChLineCam_SetClosed(swigCPtr, closed);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool IsClosed() {
    bool ret = chronoPINVOKE.ChLineCam_IsClosed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPhase(double f) {
    chronoPINVOKE.ChLineCam_SetPhase(swigCPtr, f);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetPhase() {
    double ret = chronoPINVOKE.ChLineCam_GetPhase(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCamRadius(double r) {
    chronoPINVOKE.ChLineCam_SetCamRadius(swigCPtr, r);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetCamRadius() {
    double ret = chronoPINVOKE.ChLineCam_GetCamRadius(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetWheelRadius(double r) {
    chronoPINVOKE.ChLineCam_SetWheelRadius(swigCPtr, r);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetWheelRadius() {
    double ret = chronoPINVOKE.ChLineCam_GetWheelRadius(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMotionLaw(SWIGTYPE_p_std__shared_ptrT_ChFunction_t motion_law) {
    chronoPINVOKE.ChLineCam_SetMotionLaw(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunction_t.getCPtr(motion_law));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_ChFunction_t GetMotionLaw() {
    SWIGTYPE_p_std__shared_ptrT_ChFunction_t ret = new SWIGTYPE_p_std__shared_ptrT_ChFunction_t(chronoPINVOKE.ChLineCam_GetMotionLaw(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCenter(ChVector3d mc) {
    chronoPINVOKE.ChLineCam_SetCenter(swigCPtr, ChVector3d.getCPtr(mc));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetCenter() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLineCam_GetCenter(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetNegative(bool val) {
    chronoPINVOKE.ChLineCam_SetNegative(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsNegative() {
    bool ret = chronoPINVOKE.ChLineCam_IsNegative(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInternal(bool val) {
    chronoPINVOKE.ChLineCam_SetInternal(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsInternal() {
    bool ret = chronoPINVOKE.ChLineCam_IsInternal(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRotatingFollower(double mp, double md, double mb0) {
    chronoPINVOKE.ChLineCam_SetRotatingFollower(swigCPtr, mp, md, mb0);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetVal() {
    double ret = chronoPINVOKE.ChLineCam_GetVal(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetFollowerDistance() {
    double ret = chronoPINVOKE.ChLineCam_GetFollowerDistance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetFollowerInitPhase() {
    double ret = chronoPINVOKE.ChLineCam_GetFollowerInitPhase(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSlidingEccentrical(double me) {
    chronoPINVOKE.ChLineCam_SetSlidingEccentrical(swigCPtr, me);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFlatOscillate(double me, double md, double mb0) {
    chronoPINVOKE.ChLineCam_SetFlatOscillate(swigCPtr, me, md, mb0);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d EvaluateCamPoint(double par, SWIGTYPE_p_double g, SWIGTYPE_p_double q) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLineCam_EvaluateCamPoint(swigCPtr, par, SWIGTYPE_p_double.getCPtr(g), SWIGTYPE_p_double.getCPtr(q)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d Evaluate(double U) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLineCam_Evaluate(swigCPtr, U), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetWeight(double par) {
    double ret = chronoPINVOKE.ChLineCam_GetWeight(swigCPtr, par);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLineCam_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLineCam_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum CamType {
    SLIDEFOLLOWER,
    ROTATEFOLLOWER,
    ECCENTRICFOLLOWER,
    FLAT,
    FLATOSCILLATE
  }

}
