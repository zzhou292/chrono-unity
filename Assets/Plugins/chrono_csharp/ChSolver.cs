//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSolver : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChSolver(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSolver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChSolver() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChSolver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual new ChSolver.Type GetType() {
    ChSolver.Type ret = (ChSolver.Type)chronoPINVOKE.ChSolver_GetType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsIterative() {
    bool ret = chronoPINVOKE.ChSolver_IsIterative(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsDirect() {
    bool ret = chronoPINVOKE.ChSolver_IsDirect(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChIterativeSolver AsIterative() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSolver_AsIterative(swigCPtr);
    ChIterativeSolver ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIterativeSolver(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChDirectSolverLS AsDirect() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSolver_AsDirect(swigCPtr);
    ChDirectSolverLS ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDirectSolverLS(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool SolveRequiresMatrix() {
    bool ret = chronoPINVOKE.ChSolver_SolveRequiresMatrix(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double Solve(SWIGTYPE_p_ChSystemDescriptor sysd) {
    double ret = chronoPINVOKE.ChSolver_Solve(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(sysd));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool Setup(SWIGTYPE_p_ChSystemDescriptor sysd) {
    bool ret = chronoPINVOKE.ChSolver_Setup(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(sysd));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetVerbose(bool mv) {
    chronoPINVOKE.ChSolver_SetVerbose(swigCPtr, mv);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableWrite(bool val, string frame, string out_dir) {
    chronoPINVOKE.ChSolver_EnableWrite__SWIG_0(swigCPtr, val, frame, out_dir);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableWrite(bool val, string frame) {
    chronoPINVOKE.ChSolver_EnableWrite__SWIG_1(swigCPtr, val, frame);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChSolver_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChSolver_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static string GetTypeAsString(ChSolver.Type type) {
    string ret = chronoPINVOKE.ChSolver_GetTypeAsString((int)type);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    PSOR,
    PSSOR,
    PJACOBI,
    PMINRES,
    BARZILAIBORWEIN,
    APGD,
    ADMM,
    SPARSE_LU,
    SPARSE_QR,
    PARDISO_MKL,
    MUMPS,
    GMRES,
    MINRES,
    BICGSTAB,
    CUSTOM
  }

}
