//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChAutomaticTransmission : ChTransmission {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChAutomaticTransmission(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChAutomaticTransmission_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChAutomaticTransmission obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChAutomaticTransmission(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual new ChTransmission.Type GetType() {
    ChTransmission.Type ret = (ChTransmission.Type)chrono_vehiclePINVOKE.ChAutomaticTransmission_GetType(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDriveMode(ChAutomaticTransmission.DriveMode mode) {
    chrono_vehiclePINVOKE.ChAutomaticTransmission_SetDriveMode(swigCPtr, (int)mode);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChAutomaticTransmission.DriveMode GetDriveMode() {
    ChAutomaticTransmission.DriveMode ret = (ChAutomaticTransmission.DriveMode)chrono_vehiclePINVOKE.ChAutomaticTransmission_GetDriveMode(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool HasTorqueConverter() {
    bool ret = chrono_vehiclePINVOKE.ChAutomaticTransmission_HasTorqueConverter(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTorqueConverterSlippage() {
    double ret = chrono_vehiclePINVOKE.ChAutomaticTransmission_GetTorqueConverterSlippage(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTorqueConverterInputTorque() {
    double ret = chrono_vehiclePINVOKE.ChAutomaticTransmission_GetTorqueConverterInputTorque(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTorqueConverterOutputTorque() {
    double ret = chrono_vehiclePINVOKE.ChAutomaticTransmission_GetTorqueConverterOutputTorque(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTorqueConverterOutputSpeed() {
    double ret = chrono_vehiclePINVOKE.ChAutomaticTransmission_GetTorqueConverterOutputSpeed(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetShiftMode(ChAutomaticTransmission.ShiftMode mode) {
    chrono_vehiclePINVOKE.ChAutomaticTransmission_SetShiftMode(swigCPtr, (int)mode);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChAutomaticTransmission.ShiftMode GetShiftMode() {
    ChAutomaticTransmission.ShiftMode ret = (ChAutomaticTransmission.ShiftMode)chrono_vehiclePINVOKE.ChAutomaticTransmission_GetShiftMode(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ShiftUp() {
    chrono_vehiclePINVOKE.ChAutomaticTransmission_ShiftUp(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ShiftDown() {
    chrono_vehiclePINVOKE.ChAutomaticTransmission_ShiftDown(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum DriveMode {
    FORWARD,
    NEUTRAL,
    REVERSE
  }

  public enum ShiftMode {
    AUTOMATIC,
    MANUAL
  }

}
