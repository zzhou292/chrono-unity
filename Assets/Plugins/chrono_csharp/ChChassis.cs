//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChChassis : ChPart {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChChassis(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChChassis_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChChassis obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChChassis(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual ChCoordsysd GetLocalDriverCoordsys() {
    ChCoordsysd ret = new ChCoordsysd(chrono_vehiclePINVOKE.ChChassis_GetLocalDriverCoordsys(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetLocalPosRearConnector() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChChassis_GetLocalPosRearConnector(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBodyAuxRef GetBody() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChChassis_GetBody(swigCPtr);
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChSystem GetSystem() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChChassis_GetSystem(swigCPtr);
    ChSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSystem(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPos() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChChassis_GetPos(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetRot() {
    ChQuaterniond ret = new ChQuaterniond(chrono_vehiclePINVOKE.ChChassis_GetRot(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetDriverPos() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChChassis_GetDriverPos(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpeed() {
    double ret = chrono_vehiclePINVOKE.ChChassis_GetSpeed(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetCOMSpeed() {
    double ret = chrono_vehiclePINVOKE.ChChassis_GetCOMSpeed(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRollRate() {
    double ret = chrono_vehiclePINVOKE.ChChassis_GetRollRate(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetPitchRate() {
    double ret = chrono_vehiclePINVOKE.ChChassis_GetPitchRate(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetYawRate() {
    double ret = chrono_vehiclePINVOKE.ChChassis_GetYawRate(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTurnRate() {
    double ret = chrono_vehiclePINVOKE.ChChassis_GetTurnRate(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPointLocation(ChVector3d locpos) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChChassis_GetPointLocation(swigCPtr, ChVector3d.getCPtr(locpos)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPointVelocity(ChVector3d locpos) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChChassis_GetPointVelocity(swigCPtr, ChVector3d.getCPtr(locpos)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPointAcceleration(ChVector3d locpos) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChChassis_GetPointAcceleration(swigCPtr, ChVector3d.getCPtr(locpos)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Initialize(ChSystem system, ChCoordsysd chassisPos, double chassisFwdVel, int collision_family) {
    chrono_vehiclePINVOKE.ChChassis_Initialize__SWIG_0(swigCPtr, ChSystem.getCPtr(system), ChCoordsysd.getCPtr(chassisPos), chassisFwdVel, collision_family);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChSystem system, ChCoordsysd chassisPos, double chassisFwdVel) {
    chrono_vehiclePINVOKE.ChChassis_Initialize__SWIG_1(swigCPtr, ChSystem.getCPtr(system), ChCoordsysd.getCPtr(chassisPos), chassisFwdVel);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void EnableCollision(bool state) {
    chrono_vehiclePINVOKE.ChChassis_EnableCollision(swigCPtr, state);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFixed(bool val) {
    chrono_vehiclePINVOKE.ChChassis_SetFixed(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsFixed() {
    bool ret = chrono_vehiclePINVOKE.ChChassis_IsFixed(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasBushings() {
    bool ret = chrono_vehiclePINVOKE.ChChassis_HasBushings(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddMarker(string name, ChFramed frame) {
    chrono_vehiclePINVOKE.ChChassis_AddMarker(swigCPtr, name, ChFramed.getCPtr(frame));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMarkerList GetMarkers() {
    ChMarkerList ret = new ChMarkerList(chrono_vehiclePINVOKE.ChChassis_GetMarkers(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAerodynamicDrag(double Cd, double area, double air_density) {
    chrono_vehiclePINVOKE.ChChassis_SetAerodynamicDrag(swigCPtr, Cd, area, air_density);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Synchronize(double time) {
    chrono_vehiclePINVOKE.ChChassis_Synchronize(swigCPtr, time);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddJoint(ChVehicleJoint joint) {
    chrono_vehiclePINVOKE.ChChassis_AddJoint(swigCPtr, ChVehicleJoint.getCPtr(joint));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static void RemoveJoint(ChVehicleJoint joint) {
    chrono_vehiclePINVOKE.ChChassis_RemoveJoint(ChVehicleJoint.getCPtr(joint));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddExternalForceTorque(SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChChassis__ExternalForceTorque_t load) {
    chrono_vehiclePINVOKE.ChChassis_AddExternalForceTorque(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChChassis__ExternalForceTorque_t.getCPtr(load));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddTerrainLoad(ChLoadBase terrain_load) {
    chrono_vehiclePINVOKE.ChChassis_AddTerrainLoad(swigCPtr, ChLoadBase.getCPtr(terrain_load));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void InitializeInertiaProperties() {
    chrono_vehiclePINVOKE.ChChassis_InitializeInertiaProperties(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void UpdateInertiaProperties() {
    chrono_vehiclePINVOKE.ChChassis_UpdateInertiaProperties(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
