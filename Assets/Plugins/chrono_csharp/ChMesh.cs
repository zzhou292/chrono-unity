//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChMesh : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChMesh(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChMesh() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChMesh() : this(chronoPINVOKE.new_ChMesh__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMesh(ChMesh other) : this(chronoPINVOKE.new_ChMesh__SWIG_1(ChMesh.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChMesh Clone() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChMesh_Clone(swigCPtr);
    ChMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMesh(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddNode(SWIGTYPE_p_std__shared_ptrT_ChNodeFEAbase_t node) {
    chronoPINVOKE.ChMesh_AddNode(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChNodeFEAbase_t.getCPtr(node));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddElement(SWIGTYPE_p_std__shared_ptrT_ChElementBase_t elem) {
    chronoPINVOKE.ChMesh_AddElement(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChElementBase_t.getCPtr(elem));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearNodes() {
    chronoPINVOKE.ChMesh_ClearNodes(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ClearElements() {
    chronoPINVOKE.ChMesh_ClearElements(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChNodeFEAbase_t_t GetNodes() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChNodeFEAbase_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChNodeFEAbase_t_t(chronoPINVOKE.ChMesh_GetNodes(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChElementBase_t_t GetElements() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChElementBase_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChElementBase_t_t(chronoPINVOKE.ChMesh_GetElements(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual SWIGTYPE_p_std__shared_ptrT_ChNodeBase_t GetNode(uint n) {
    SWIGTYPE_p_std__shared_ptrT_ChNodeBase_t ret = new SWIGTYPE_p_std__shared_ptrT_ChNodeBase_t(chronoPINVOKE.ChMesh_GetNode(swigCPtr, n), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChElementBase_t GetElement(uint n) {
    SWIGTYPE_p_std__shared_ptrT_ChElementBase_t ret = new SWIGTYPE_p_std__shared_ptrT_ChElementBase_t(chronoPINVOKE.ChMesh_GetElement(swigCPtr, n), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumNodes() {
    uint ret = chronoPINVOKE.ChMesh_GetNumNodes(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumElements() {
    uint ret = chronoPINVOKE.ChMesh_GetNumElements(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChMesh_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChMesh_GetNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool IsCollisionEnabled() {
    bool ret = chronoPINVOKE.ChMesh_IsCollisionEnabled(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ResetCounters() {
    chronoPINVOKE.ChMesh_ResetCounters(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumCallsInternalForces() {
    uint ret = chronoPINVOKE.ChMesh_GetNumCallsInternalForces(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumCallsJacobianLoad() {
    uint ret = chronoPINVOKE.ChMesh_GetNumCallsJacobianLoad(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ResetTimers() {
    chronoPINVOKE.ChMesh_ResetTimers(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTimeInternalForces() {
    double ret = chronoPINVOKE.ChMesh_GetTimeInternalForces(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTimeJacobianLoad() {
    double ret = chronoPINVOKE.ChMesh_GetTimeJacobianLoad(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddContactSurface(SWIGTYPE_p_std__shared_ptrT_ChContactSurface_t m_surf) {
    chronoPINVOKE.ChMesh_AddContactSurface(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChContactSurface_t.getCPtr(m_surf));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChContactSurface_t_t GetContactSurfaces() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChContactSurface_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChContactSurface_t_t(chronoPINVOKE.ChMesh_GetContactSurfaces(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChContactSurface_t GetContactSurface(uint n) {
    SWIGTYPE_p_std__shared_ptrT_ChContactSurface_t ret = new SWIGTYPE_p_std__shared_ptrT_ChContactSurface_t(chronoPINVOKE.ChMesh_GetContactSurface(swigCPtr, n), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumContactSurfaces() {
    uint ret = chronoPINVOKE.ChMesh_GetNumContactSurfaces(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ClearContactSurfaces() {
    chronoPINVOKE.ChMesh_ClearContactSurfaces(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddMeshSurface(SWIGTYPE_p_std__shared_ptrT_ChMeshSurface_t m_surf) {
    chronoPINVOKE.ChMesh_AddMeshSurface(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChMeshSurface_t.getCPtr(m_surf));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChMeshSurface_t_t GetMeshSurfaces() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChMeshSurface_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChMeshSurface_t_t(chronoPINVOKE.ChMesh_GetMeshSurfaces(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChMeshSurface_t GetMeshSurface(uint n) {
    SWIGTYPE_p_std__shared_ptrT_ChMeshSurface_t ret = new SWIGTYPE_p_std__shared_ptrT_ChMeshSurface_t(chronoPINVOKE.ChMesh_GetMeshSurface(swigCPtr, n), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumMeshSurfaces() {
    uint ret = chronoPINVOKE.ChMesh_GetNumMeshSurfaces(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ClearMeshSurfaces() {
    chronoPINVOKE.ChMesh_ClearMeshSurfaces(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Relax() {
    chronoPINVOKE.ChMesh_Relax(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ForceToRest() {
    chronoPINVOKE.ChMesh_ForceToRest(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Setup() {
    chronoPINVOKE.ChMesh_Setup(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Update(double m_time, bool update_assets) {
    chronoPINVOKE.ChMesh_Update__SWIG_0(swigCPtr, m_time, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Update(double m_time) {
    chronoPINVOKE.ChMesh_Update__SWIG_1(swigCPtr, m_time);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddCollisionModelsToSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChMesh_AddCollisionModelsToSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveCollisionModelsFromSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChMesh_RemoveCollisionModelsFromSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SyncCollisionModels() {
    chronoPINVOKE.ChMesh_SyncCollisionModels(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAutomaticGravity(bool mg, int num_points) {
    chronoPINVOKE.ChMesh_SetAutomaticGravity__SWIG_0(swigCPtr, mg, num_points);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAutomaticGravity(bool mg) {
    chronoPINVOKE.ChMesh_SetAutomaticGravity__SWIG_1(swigCPtr, mg);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetAutomaticGravity() {
    bool ret = chronoPINVOKE.ChMesh_GetAutomaticGravity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ComputeMassProperties(SWIGTYPE_p_double mass, ChVector3d com, ChMatrix33d inertia) {
    chronoPINVOKE.ChMesh_ComputeMassProperties(swigCPtr, SWIGTYPE_p_double.getCPtr(mass), ChVector3d.getCPtr(com), ChMatrix33d.getCPtr(inertia));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntStateGather(uint off_x, SWIGTYPE_p_ChState x, uint off_v, SWIGTYPE_p_ChStateDelta v, SWIGTYPE_p_double T) {
    chronoPINVOKE.ChMesh_IntStateGather(swigCPtr, off_x, SWIGTYPE_p_ChState.getCPtr(x), off_v, SWIGTYPE_p_ChStateDelta.getCPtr(v), SWIGTYPE_p_double.getCPtr(T));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntStateScatter(uint off_x, SWIGTYPE_p_ChState x, uint off_v, SWIGTYPE_p_ChStateDelta v, double T, bool full_update) {
    chronoPINVOKE.ChMesh_IntStateScatter(swigCPtr, off_x, SWIGTYPE_p_ChState.getCPtr(x), off_v, SWIGTYPE_p_ChStateDelta.getCPtr(v), T, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntStateGatherAcceleration(uint off_a, SWIGTYPE_p_ChStateDelta a) {
    chronoPINVOKE.ChMesh_IntStateGatherAcceleration(swigCPtr, off_a, SWIGTYPE_p_ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntStateScatterAcceleration(uint off_a, SWIGTYPE_p_ChStateDelta a) {
    chronoPINVOKE.ChMesh_IntStateScatterAcceleration(swigCPtr, off_a, SWIGTYPE_p_ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntStateIncrement(uint off_x, SWIGTYPE_p_ChState x_new, SWIGTYPE_p_ChState x, uint off_v, SWIGTYPE_p_ChStateDelta Dv) {
    chronoPINVOKE.ChMesh_IntStateIncrement(swigCPtr, off_x, SWIGTYPE_p_ChState.getCPtr(x_new), SWIGTYPE_p_ChState.getCPtr(x), off_v, SWIGTYPE_p_ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntStateGetIncrement(uint off_x, SWIGTYPE_p_ChState x_new, SWIGTYPE_p_ChState x, uint off_v, SWIGTYPE_p_ChStateDelta Dv) {
    chronoPINVOKE.ChMesh_IntStateGetIncrement(swigCPtr, off_x, SWIGTYPE_p_ChState.getCPtr(x_new), SWIGTYPE_p_ChState.getCPtr(x), off_v, SWIGTYPE_p_ChStateDelta.getCPtr(Dv));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntLoadResidual_F(uint off, ChVectorDynamicd R, double c) {
    chronoPINVOKE.ChMesh_IntLoadResidual_F(swigCPtr, off, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntLoadResidual_Mv(uint off, ChVectorDynamicd R, ChVectorDynamicd w, double c) {
    chronoPINVOKE.ChMesh_IntLoadResidual_Mv(swigCPtr, off, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntLoadLumpedMass_Md(uint off, ChVectorDynamicd Md, SWIGTYPE_p_double err, double c) {
    chronoPINVOKE.ChMesh_IntLoadLumpedMass_Md(swigCPtr, off, ChVectorDynamicd.getCPtr(Md), SWIGTYPE_p_double.getCPtr(err), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntToDescriptor(uint off_v, SWIGTYPE_p_ChStateDelta v, ChVectorDynamicd R, uint off_L, ChVectorDynamicd L, ChVectorDynamicd Qc) {
    chronoPINVOKE.ChMesh_IntToDescriptor(swigCPtr, off_v, SWIGTYPE_p_ChStateDelta.getCPtr(v), ChVectorDynamicd.getCPtr(R), off_L, ChVectorDynamicd.getCPtr(L), ChVectorDynamicd.getCPtr(Qc));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void IntFromDescriptor(uint off_v, SWIGTYPE_p_ChStateDelta v, uint off_L, ChVectorDynamicd L) {
    chronoPINVOKE.ChMesh_IntFromDescriptor(swigCPtr, off_v, SWIGTYPE_p_ChStateDelta.getCPtr(v), off_L, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void InjectKRMMatrices(SWIGTYPE_p_ChSystemDescriptor descriptor) {
    chronoPINVOKE.ChMesh_InjectKRMMatrices(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadKRMMatrices(double Kfactor, double Rfactor, double Mfactor) {
    chronoPINVOKE.ChMesh_LoadKRMMatrices(swigCPtr, Kfactor, Rfactor, Mfactor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesFbReset() {
    chronoPINVOKE.ChMesh_VariablesFbReset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesFbLoadForces(double factor) {
    chronoPINVOKE.ChMesh_VariablesFbLoadForces__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesFbLoadForces() {
    chronoPINVOKE.ChMesh_VariablesFbLoadForces__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesQbLoadSpeed() {
    chronoPINVOKE.ChMesh_VariablesQbLoadSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesFbIncrementMq() {
    chronoPINVOKE.ChMesh_VariablesFbIncrementMq(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesQbSetSpeed(double step) {
    chronoPINVOKE.ChMesh_VariablesQbSetSpeed__SWIG_0(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesQbSetSpeed() {
    chronoPINVOKE.ChMesh_VariablesQbSetSpeed__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void VariablesQbIncrementPosition(double step) {
    chronoPINVOKE.ChMesh_VariablesQbIncrementPosition(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void InjectVariables(SWIGTYPE_p_ChSystemDescriptor descriptor) {
    chronoPINVOKE.ChMesh_InjectVariables(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
