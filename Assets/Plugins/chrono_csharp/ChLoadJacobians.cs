//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoadJacobians : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChLoadJacobians(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoadJacobians obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChLoadJacobians() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ChLoadJacobians(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_ChKRMBlock KRM {
    set {
      chronoPINVOKE.ChLoadJacobians_KRM_set(swigCPtr, SWIGTYPE_p_ChKRMBlock.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ChKRMBlock ret = new SWIGTYPE_p_ChKRMBlock(chronoPINVOKE.ChLoadJacobians_KRM_get(swigCPtr), true);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChMatrixDynamicd K {
    set {
      chronoPINVOKE.ChLoadJacobians_K_set(swigCPtr, ChMatrixDynamicd.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChLoadJacobians_K_get(swigCPtr);
      ChMatrixDynamicd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMatrixDynamicd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChMatrixDynamicd R {
    set {
      chronoPINVOKE.ChLoadJacobians_R_set(swigCPtr, ChMatrixDynamicd.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChLoadJacobians_R_get(swigCPtr);
      ChMatrixDynamicd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMatrixDynamicd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChMatrixDynamicd M {
    set {
      chronoPINVOKE.ChLoadJacobians_M_set(swigCPtr, ChMatrixDynamicd.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChLoadJacobians_M_get(swigCPtr);
      ChMatrixDynamicd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMatrixDynamicd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public void SetVariables(SWIGTYPE_p_std__vectorT_ChVariables_p_t mvariables) {
    chronoPINVOKE.ChLoadJacobians_SetVariables(swigCPtr, SWIGTYPE_p_std__vectorT_ChVariables_p_t.getCPtr(mvariables));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLoadJacobians() : this(chronoPINVOKE.new_ChLoadJacobians(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
