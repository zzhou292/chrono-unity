//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkMateGeneric : ChLinkMate {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkMateGeneric(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkMateGeneric_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkMateGeneric obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkMateGeneric(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkMateGeneric(bool mc_x, bool mc_y, bool mc_z, bool mc_rx, bool mc_ry, bool mc_rz) : this(chronoPINVOKE.new_ChLinkMateGeneric__SWIG_0(mc_x, mc_y, mc_z, mc_rx, mc_ry, mc_rz), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMateGeneric(bool mc_x, bool mc_y, bool mc_z, bool mc_rx, bool mc_ry) : this(chronoPINVOKE.new_ChLinkMateGeneric__SWIG_1(mc_x, mc_y, mc_z, mc_rx, mc_ry), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMateGeneric(bool mc_x, bool mc_y, bool mc_z, bool mc_rx) : this(chronoPINVOKE.new_ChLinkMateGeneric__SWIG_2(mc_x, mc_y, mc_z, mc_rx), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMateGeneric(bool mc_x, bool mc_y, bool mc_z) : this(chronoPINVOKE.new_ChLinkMateGeneric__SWIG_3(mc_x, mc_y, mc_z), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMateGeneric(bool mc_x, bool mc_y) : this(chronoPINVOKE.new_ChLinkMateGeneric__SWIG_4(mc_x, mc_y), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMateGeneric(bool mc_x) : this(chronoPINVOKE.new_ChLinkMateGeneric__SWIG_5(mc_x), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMateGeneric() : this(chronoPINVOKE.new_ChLinkMateGeneric__SWIG_6(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMateGeneric(ChLinkMateGeneric other) : this(chronoPINVOKE.new_ChLinkMateGeneric__SWIG_7(ChLinkMateGeneric.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChFramed GetVisualModelFrame(uint nclone) {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMateGeneric_GetVisualModelFrame__SWIG_0(swigCPtr, nclone), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetVisualModelFrame() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMateGeneric_GetVisualModelFrame__SWIG_1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame1Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMateGeneric_GetFrame1Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame2Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMateGeneric_GetFrame2Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConstrainedX() {
    bool ret = chronoPINVOKE.ChLinkMateGeneric_IsConstrainedX(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConstrainedY() {
    bool ret = chronoPINVOKE.ChLinkMateGeneric_IsConstrainedY(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConstrainedZ() {
    bool ret = chronoPINVOKE.ChLinkMateGeneric_IsConstrainedZ(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConstrainedRx() {
    bool ret = chronoPINVOKE.ChLinkMateGeneric_IsConstrainedRx(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConstrainedRy() {
    bool ret = chronoPINVOKE.ChLinkMateGeneric_IsConstrainedRy(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsConstrainedRz() {
    bool ret = chronoPINVOKE.ChLinkMateGeneric_IsConstrainedRz(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetConstrainedCoords(bool mc_x, bool mc_y, bool mc_z, bool mc_rx, bool mc_ry, bool mc_rz) {
    chronoPINVOKE.ChLinkMateGeneric_SetConstrainedCoords(swigCPtr, mc_x, mc_y, mc_z, mc_rx, mc_ry, mc_rz);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChBodyFrame body1, ChBodyFrame body2, ChFramed absframe) {
    chronoPINVOKE.ChLinkMateGeneric_Initialize__SWIG_0(swigCPtr, ChBodyFrame.getCPtr(body1), ChBodyFrame.getCPtr(body2), ChFramed.getCPtr(absframe));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChBodyFrame body1, ChBodyFrame body2, bool pos_are_relative, ChFramed frame1, ChFramed frame2) {
    chronoPINVOKE.ChLinkMateGeneric_Initialize__SWIG_1(swigCPtr, ChBodyFrame.getCPtr(body1), ChBodyFrame.getCPtr(body2), pos_are_relative, ChFramed.getCPtr(frame1), ChFramed.getCPtr(frame2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChBodyFrame body1, ChBodyFrame body2, bool pos_are_relative, ChVector3d point1, ChVector3d point2, ChVector3d dir1, ChVector3d dir2) {
    chronoPINVOKE.ChLinkMateGeneric_Initialize__SWIG_2(swigCPtr, ChBodyFrame.getCPtr(body1), ChBodyFrame.getCPtr(body2), pos_are_relative, ChVector3d.getCPtr(point1), ChVector3d.getCPtr(point2), ChVector3d.getCPtr(dir1), ChVector3d.getCPtr(dir2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetDisabled(bool mdis) {
    chronoPINVOKE.ChLinkMateGeneric_SetDisabled(swigCPtr, mdis);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetBroken(bool mon) {
    chronoPINVOKE.ChLinkMateGeneric_SetBroken(swigCPtr, mon);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUseTangentStiffness(bool useKc) {
    chronoPINVOKE.ChLinkMateGeneric_SetUseTangentStiffness(swigCPtr, useKc);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetNumConstraints() {
    uint ret = chronoPINVOKE.ChLinkMateGeneric_GetNumConstraints(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraintsBilateral() {
    uint ret = chronoPINVOKE.ChLinkMateGeneric_GetNumConstraintsBilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraintsUnilateral() {
    uint ret = chronoPINVOKE.ChLinkMateGeneric_GetNumConstraintsUnilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_ChLinkMask GetLinkMask() {
    SWIGTYPE_p_ChLinkMask ret = new SWIGTYPE_p_ChLinkMask(chronoPINVOKE.ChLinkMateGeneric_GetLinkMask(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVectorDynamicd GetConstraintViolation() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChLinkMateGeneric_GetConstraintViolation(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkMateGeneric_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkMateGeneric_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
