//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoadBodyBodyBushingSpherical : ChLoadBodyBody {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLoadBodyBodyBushingSpherical(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLoadBodyBodyBushingSpherical_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoadBodyBodyBushingSpherical obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLoadBodyBodyBushingSpherical(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLoadBodyBodyBushingSpherical(ChBody bodyA, ChBody bodyB, ChFramed abs_application, ChVector3d stiffness_coefs, ChVector3d damping_coefs) : this(chronoPINVOKE.new_ChLoadBodyBodyBushingSpherical(ChBody.getCPtr(bodyA), ChBody.getCPtr(bodyB), ChFramed.getCPtr(abs_application), ChVector3d.getCPtr(stiffness_coefs), ChVector3d.getCPtr(damping_coefs)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStiffness(ChVector3d mstiffness) {
    chronoPINVOKE.ChLoadBodyBodyBushingSpherical_SetStiffness(swigCPtr, ChVector3d.getCPtr(mstiffness));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetStiffness() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLoadBodyBodyBushingSpherical_GetStiffness(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDamping(ChVector3d mdamping) {
    chronoPINVOKE.ChLoadBodyBodyBushingSpherical_SetDamping(swigCPtr, ChVector3d.getCPtr(mdamping));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetDamping() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLoadBodyBodyBushingSpherical_GetDamping(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
