//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChConveyor : ChPhysicsItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChConveyor(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChConveyor_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChConveyor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChConveyor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChConveyor(double xlength, double ythick, double zwidth) : this(chronoPINVOKE.new_ChConveyor__SWIG_0(xlength, ythick, zwidth), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChConveyor(double xlength, double ythick) : this(chronoPINVOKE.new_ChConveyor__SWIG_1(xlength, ythick), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChConveyor(double xlength) : this(chronoPINVOKE.new_ChConveyor__SWIG_2(xlength), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChConveyor() : this(chronoPINVOKE.new_ChConveyor__SWIG_3(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChConveyor(ChConveyor other) : this(chronoPINVOKE.new_ChConveyor__SWIG_4(ChConveyor.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetSystem(ChSystem m_system) {
    chronoPINVOKE.ChConveyor_SetSystem(swigCPtr, ChSystem.getCPtr(m_system));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetConveyorSpeed(double mspeed) {
    chronoPINVOKE.ChConveyor_SetConveyorSpeed(swigCPtr, mspeed);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetConveyorSpeed() {
    double ret = chronoPINVOKE.ChConveyor_GetConveyorSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody GetTruss() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChConveyor_GetTruss(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody GetPlate() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChConveyor_GetPlate(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFixed(bool mev) {
    chronoPINVOKE.ChConveyor_SetFixed(swigCPtr, mev);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsFixed() {
    bool ret = chronoPINVOKE.ChConveyor_IsFixed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetCoordsys() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChConveyor_GetCoordsys(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPos() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChConveyor_GetPos(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetRot() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChConveyor_GetRot(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCoordsys(ChCoordsysd mcoord) {
    chronoPINVOKE.ChConveyor_SetCoordsys__SWIG_0(swigCPtr, ChCoordsysd.getCPtr(mcoord));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCoordsys(ChVector3d mv, ChQuaterniond mq) {
    chronoPINVOKE.ChConveyor_SetCoordsys__SWIG_1(swigCPtr, ChVector3d.getCPtr(mv), ChQuaterniond.getCPtr(mq));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRot(ChQuaterniond mrot) {
    chronoPINVOKE.ChConveyor_SetRot(swigCPtr, ChQuaterniond.getCPtr(mrot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPos(ChVector3d mpos) {
    chronoPINVOKE.ChConveyor_SetPos(swigCPtr, ChVector3d.getCPtr(mpos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaterialSurface(ChContactMaterial mat) {
    chronoPINVOKE.ChConveyor_SetMaterialSurface(swigCPtr, ChContactMaterial.getCPtr(mat));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChContactMaterial GetMaterialSurface() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChConveyor_GetMaterialSurface(swigCPtr);
    ChContactMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactMaterial(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChConveyor_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChConveyor_GetNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraintsBilateral() {
    uint ret = chronoPINVOKE.ChConveyor_GetNumConstraintsBilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool IsCollisionEnabled() {
    bool ret = chronoPINVOKE.ChConveyor_IsCollisionEnabled(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void AddCollisionModelsToSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChConveyor_AddCollisionModelsToSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void RemoveCollisionModelsFromSystem(ChCollisionSystem coll_sys) {
    chronoPINVOKE.ChConveyor_RemoveCollisionModelsFromSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_sys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SyncCollisionModels() {
    chronoPINVOKE.ChConveyor_SyncCollisionModels(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChConveyor_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChConveyor_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
