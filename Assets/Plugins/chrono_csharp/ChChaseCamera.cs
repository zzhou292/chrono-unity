//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChChaseCamera : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChChaseCamera(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChChaseCamera obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChChaseCamera() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chrono_vehiclePINVOKE.delete_ChChaseCamera(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChChaseCamera(ChBody chassis) : this(chrono_vehiclePINVOKE.new_ChChaseCamera(ChBody.getCPtr(chassis)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChVector3d ptOnChassis, ChCoordsysd driverCoordsys, double chaseDist, double chaseHeight, ChVector3d up, ChVector3d fwd) {
    chrono_vehiclePINVOKE.ChChaseCamera_Initialize__SWIG_0(swigCPtr, ChVector3d.getCPtr(ptOnChassis), ChCoordsysd.getCPtr(driverCoordsys), chaseDist, chaseHeight, ChVector3d.getCPtr(up), ChVector3d.getCPtr(fwd));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChVector3d ptOnChassis, ChCoordsysd driverCoordsys, double chaseDist, double chaseHeight, ChVector3d up) {
    chrono_vehiclePINVOKE.ChChaseCamera_Initialize__SWIG_1(swigCPtr, ChVector3d.getCPtr(ptOnChassis), ChCoordsysd.getCPtr(driverCoordsys), chaseDist, chaseHeight, ChVector3d.getCPtr(up));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChVector3d ptOnChassis, ChCoordsysd driverCoordsys, double chaseDist, double chaseHeight) {
    chrono_vehiclePINVOKE.ChChaseCamera_Initialize__SWIG_2(swigCPtr, ChVector3d.getCPtr(ptOnChassis), ChCoordsysd.getCPtr(driverCoordsys), chaseDist, chaseHeight);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(double step) {
    chrono_vehiclePINVOKE.ChChaseCamera_Update(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Zoom(int val) {
    chrono_vehiclePINVOKE.ChChaseCamera_Zoom(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Turn(int val) {
    chrono_vehiclePINVOKE.ChChaseCamera_Turn(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Raise(int val) {
    chrono_vehiclePINVOKE.ChChaseCamera_Raise(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetState(ChChaseCamera.State s) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetState(swigCPtr, (int)s);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCameraPos(ChVector3d pos) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetCameraPos(swigCPtr, ChVector3d.getCPtr(pos));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCameraAngle(double angle) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetCameraAngle(swigCPtr, angle);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChChaseCamera.State GetState() {
    ChChaseCamera.State ret = (ChChaseCamera.State)chrono_vehiclePINVOKE.ChChaseCamera_GetState(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetStateName() {
    string ret = chrono_vehiclePINVOKE.ChChaseCamera_GetStateName(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetCameraPos() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChChaseCamera_GetCameraPos(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetTargetPos() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChChaseCamera_GetTargetPos(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetHorizGain(double g) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetHorizGain(swigCPtr, g);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVertGain(double g) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetVertGain(swigCPtr, g);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMultLimits(double minMult, double maxMult) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetMultLimits(swigCPtr, minMult, maxMult);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassis(ChBody chassis) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetChassis(swigCPtr, ChBody.getCPtr(chassis));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTargetPoint(ChVector3d point) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetTargetPoint(swigCPtr, ChVector3d.getCPtr(point));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChaseDistance(double dist) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetChaseDistance(swigCPtr, dist);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChaseHeight(double height) {
    chrono_vehiclePINVOKE.ChChaseCamera_SetChaseHeight(swigCPtr, height);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum State {
    Chase,
    Follow,
    Track,
    Inside,
    Free
  }

}
