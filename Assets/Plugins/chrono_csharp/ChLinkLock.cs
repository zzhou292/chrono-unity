//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkLock : ChLinkMarkers {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkLock(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkLock_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkLock obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkLock(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkLock() : this(chronoPINVOKE.new_ChLinkLock__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkLock(ChLinkLock other) : this(chronoPINVOKE.new_ChLinkLock__SWIG_1(ChLinkLock.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetDisabled(bool mdis) {
    chronoPINVOKE.ChLinkLock_SetDisabled(swigCPtr, mdis);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetBroken(bool mon) {
    chronoPINVOKE.ChLinkLock_SetBroken(swigCPtr, mon);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_ChLinkMask GetMask() {
    SWIGTYPE_p_ChLinkMask ret = new SWIGTYPE_p_ChLinkMask(chronoPINVOKE.ChLinkLock_GetMask(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void SetupMarkers(ChMarker mark1, ChMarker mark2) {
    chronoPINVOKE.ChLinkLock_SetupMarkers(swigCPtr, ChMarker.getCPtr(mark1), ChMarker.getCPtr(mark2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkForce ForceX() {
    ChLinkForce ret = new ChLinkForce(chronoPINVOKE.ChLinkLock_ForceX(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkForce ForceY() {
    ChLinkForce ret = new ChLinkForce(chronoPINVOKE.ChLinkLock_ForceY(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkForce ForceZ() {
    ChLinkForce ret = new ChLinkForce(chronoPINVOKE.ChLinkLock_ForceZ(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkForce ForceRx() {
    ChLinkForce ret = new ChLinkForce(chronoPINVOKE.ChLinkLock_ForceRx(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkForce ForceRy() {
    ChLinkForce ret = new ChLinkForce(chronoPINVOKE.ChLinkLock_ForceRy(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkForce ForceRz() {
    ChLinkForce ret = new ChLinkForce(chronoPINVOKE.ChLinkLock_ForceRz(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkForce ForceD() {
    ChLinkForce ret = new ChLinkForce(chronoPINVOKE.ChLinkLock_ForceD(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkForce ForceRp() {
    ChLinkForce ret = new ChLinkForce(chronoPINVOKE.ChLinkLock_ForceRp(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLimit LimitX() {
    ChLinkLimit ret = new ChLinkLimit(chronoPINVOKE.ChLinkLock_LimitX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLimit LimitY() {
    ChLinkLimit ret = new ChLinkLimit(chronoPINVOKE.ChLinkLock_LimitY(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLimit LimitZ() {
    ChLinkLimit ret = new ChLinkLimit(chronoPINVOKE.ChLinkLock_LimitZ(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLimit LimitRx() {
    ChLinkLimit ret = new ChLinkLimit(chronoPINVOKE.ChLinkLock_LimitRx(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLimit LimitRy() {
    ChLinkLimit ret = new ChLinkLimit(chronoPINVOKE.ChLinkLock_LimitRy(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLimit LimitRz() {
    ChLinkLimit ret = new ChLinkLimit(chronoPINVOKE.ChLinkLock_LimitRz(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLimit LimitD() {
    ChLinkLimit ret = new ChLinkLimit(chronoPINVOKE.ChLinkLock_LimitD(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkLimit LimitRp() {
    ChLinkLimit ret = new ChLinkLimit(chronoPINVOKE.ChLinkLock_LimitRp(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraints() {
    uint ret = chronoPINVOKE.ChLinkLock_GetNumConstraints(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraintsBilateral() {
    uint ret = chronoPINVOKE.ChLinkLock_GetNumConstraintsBilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraintsUnilateral() {
    uint ret = chronoPINVOKE.ChLinkLock_GetNumConstraintsUnilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVectorDynamicd GetConstraintViolation() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChLinkLock_GetConstraintViolation(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t GetConstraintViolationDt() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t(chronoPINVOKE.ChLinkLock_GetConstraintViolationDt(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t GetConstraintViolationDt2() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t(chronoPINVOKE.ChLinkLock_GetConstraintViolationDt2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_7_Eigen__RowMajor_7_7_t GetCq1() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_7_Eigen__RowMajor_7_7_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_7_Eigen__RowMajor_7_7_t(chronoPINVOKE.ChLinkLock_GetCq1(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_7_Eigen__RowMajor_7_7_t GetCq2() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_7_Eigen__RowMajor_7_7_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_7_Eigen__RowMajor_7_7_t(chronoPINVOKE.ChLinkLock_GetCq2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_6_Eigen__RowMajor_7_6_t GetCqw1() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_6_Eigen__RowMajor_7_6_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_6_Eigen__RowMajor_7_6_t(chronoPINVOKE.ChLinkLock_GetCqw1(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_6_Eigen__RowMajor_7_6_t GetCqw2() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_6_Eigen__RowMajor_7_6_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_6_Eigen__RowMajor_7_6_t(chronoPINVOKE.ChLinkLock_GetCqw2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t GetQc() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t(chronoPINVOKE.ChLinkLock_GetQc(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t GetCt() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t(chronoPINVOKE.ChLinkLock_GetCt(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t GetReact() {
    SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t ret = new SWIGTYPE_p_Eigen__MatrixT_double_Eigen__Dynamic_1_Eigen__ColMajor_7_1_t(chronoPINVOKE.ChLinkLock_GetReact(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void UpdateState() {
    chronoPINVOKE.ChLinkLock_UpdateState(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void UpdateForces(double mytime) {
    chronoPINVOKE.ChLinkLock_UpdateForces(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateCqw() {
    chronoPINVOKE.ChLinkLock_UpdateCqw(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime, bool update_assets) {
    chronoPINVOKE.ChLinkLock_Update__SWIG_0(swigCPtr, mytime, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime) {
    chronoPINVOKE.ChLinkLock_Update__SWIG_1(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkLock_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkLock_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
