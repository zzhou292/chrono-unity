//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkLockLock : ChLinkLock {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkLockLock(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkLockLock_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkLockLock obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkLockLock(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkLockLock() : this(chronoPINVOKE.new_ChLinkLockLock__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkLockLock(ChLinkLockLock other) : this(chronoPINVOKE.new_ChLinkLockLock__SWIG_1(ChLinkLockLock.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionX(ChFunction m_funct) {
    chronoPINVOKE.ChLinkLockLock_SetMotionX(swigCPtr, ChFunction.getCPtr(m_funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionY(ChFunction m_funct) {
    chronoPINVOKE.ChLinkLockLock_SetMotionY(swigCPtr, ChFunction.getCPtr(m_funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionZ(ChFunction m_funct) {
    chronoPINVOKE.ChLinkLockLock_SetMotionZ(swigCPtr, ChFunction.getCPtr(m_funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionAng1(ChFunction m_funct) {
    chronoPINVOKE.ChLinkLockLock_SetMotionAng1(swigCPtr, ChFunction.getCPtr(m_funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionAng2(ChFunction m_funct) {
    chronoPINVOKE.ChLinkLockLock_SetMotionAng2(swigCPtr, ChFunction.getCPtr(m_funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionAng3(ChFunction m_funct) {
    chronoPINVOKE.ChLinkLockLock_SetMotionAng3(swigCPtr, ChFunction.getCPtr(m_funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionAxis(ChVector3d m_axis) {
    chronoPINVOKE.ChLinkLockLock_SetMotionAxis(swigCPtr, ChVector3d.getCPtr(m_axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotationRepresentation(RotRepresentation rot_rep) {
    chronoPINVOKE.ChLinkLockLock_SetRotationRepresentation(swigCPtr, (int)rot_rep);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetMotionX() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLockLock_GetMotionX(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionY() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLockLock_GetMotionY(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionZ() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLockLock_GetMotionZ(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionAng1() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLockLock_GetMotionAng1(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionAng2() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLockLock_GetMotionAng2(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionAng3() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLockLock_GetMotionAng3(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetMotionAxis() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkLockLock_GetMotionAxis(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RotRepresentation GetRotationRepresentation() {
    RotRepresentation ret = (RotRepresentation)chronoPINVOKE.ChLinkLockLock_GetRotationRepresentation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetRelCoordsysViolation() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChLinkLockLock_GetRelCoordsysViolation(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetRelCoordsysViolationDt() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChLinkLockLock_GetRelCoordsysViolationDt(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetRelCoordsysViolationDt2() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChLinkLockLock_GetRelCoordsysViolationDt2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkLockLock_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkLockLock_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
