//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoaderGravity : ChLoaderUVWdistributed {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLoaderGravity(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLoaderGravity_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoaderGravity obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLoaderGravity(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLoaderGravity(ChLoadableUVW mloadable) : this(chronoPINVOKE.new_ChLoaderGravity(ChLoadableUVW.getCPtr(mloadable)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override void ComputeF(double U, double V, double W, ChVectorDynamicd F, ChVectorDynamicd state_x, ChVectorDynamicd state_w) {
    if (SwigDerivedClassHasMethod("ComputeF", swigMethodTypes3)) chronoPINVOKE.ChLoaderGravity_ComputeFSwigExplicitChLoaderGravity(swigCPtr, U, V, W, ChVectorDynamicd.getCPtr(F), ChVectorDynamicd.getCPtr(state_x), ChVectorDynamicd.getCPtr(state_w)); else chronoPINVOKE.ChLoaderGravity_ComputeF(swigCPtr, U, V, W, ChVectorDynamicd.getCPtr(F), ChVectorDynamicd.getCPtr(state_x), ChVectorDynamicd.getCPtr(state_w));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNumIntPoints(int val) {
    chronoPINVOKE.ChLoaderGravity_SetNumIntPoints(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetNumIntPoints() {
    int ret = chronoPINVOKE.ChLoaderGravity_GetNumIntPoints(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetGravitationalAcceleration(ChVector3d m_acc) {
    chronoPINVOKE.ChLoaderGravity_SetGravitationalAcceleration(swigCPtr, ChVector3d.getCPtr(m_acc));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetGravitationalAcceleration() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLoaderGravity_GetGravitationalAcceleration(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetIntegrationPointsU() {
    int ret = (SwigDerivedClassHasMethod("GetIntegrationPointsU", swigMethodTypes4) ? chronoPINVOKE.ChLoaderGravity_GetIntegrationPointsUSwigExplicitChLoaderGravity(swigCPtr) : chronoPINVOKE.ChLoaderGravity_GetIntegrationPointsU(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetIntegrationPointsV() {
    int ret = (SwigDerivedClassHasMethod("GetIntegrationPointsV", swigMethodTypes5) ? chronoPINVOKE.ChLoaderGravity_GetIntegrationPointsVSwigExplicitChLoaderGravity(swigCPtr) : chronoPINVOKE.ChLoaderGravity_GetIntegrationPointsV(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int GetIntegrationPointsW() {
    int ret = (SwigDerivedClassHasMethod("GetIntegrationPointsW", swigMethodTypes6) ? chronoPINVOKE.ChLoaderGravity_GetIntegrationPointsWSwigExplicitChLoaderGravity(swigCPtr) : chronoPINVOKE.ChLoaderGravity_GetIntegrationPointsW(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("ComputeQ", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChLoaderGravity_0(SwigDirectorMethodComputeQ);
    if (SwigDerivedClassHasMethod("GetLoadable", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChLoaderGravity_1(SwigDirectorMethodGetLoadable);
    if (SwigDerivedClassHasMethod("IsStiff", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChLoaderGravity_2(SwigDirectorMethodIsStiff);
    if (SwigDerivedClassHasMethod("ComputeF", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChLoaderGravity_3(SwigDirectorMethodComputeF);
    if (SwigDerivedClassHasMethod("GetIntegrationPointsU", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChLoaderGravity_4(SwigDirectorMethodGetIntegrationPointsU);
    if (SwigDerivedClassHasMethod("GetIntegrationPointsV", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChLoaderGravity_5(SwigDirectorMethodGetIntegrationPointsV);
    if (SwigDerivedClassHasMethod("GetIntegrationPointsW", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateChLoaderGravity_6(SwigDirectorMethodGetIntegrationPointsW);
    chronoPINVOKE.ChLoaderGravity_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChLoaderGravity));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodComputeQ(global::System.IntPtr state_x, global::System.IntPtr state_w) {
    ComputeQ((state_x == global::System.IntPtr.Zero) ? null : new ChVectorDynamicd(state_x, false), (state_w == global::System.IntPtr.Zero) ? null : new ChVectorDynamicd(state_w, false));
  }

  private global::System.IntPtr SwigDirectorMethodGetLoadable() {
    return ChLoadable.getCPtr(GetLoadable()).Handle;
  }

  private bool SwigDirectorMethodIsStiff() {
    return IsStiff();
  }

  private void SwigDirectorMethodComputeF(double U, double V, double W, global::System.IntPtr F, global::System.IntPtr state_x, global::System.IntPtr state_w) {
    ComputeF(U, V, W, new ChVectorDynamicd(F, false), (state_x == global::System.IntPtr.Zero) ? null : new ChVectorDynamicd(state_x, false), (state_w == global::System.IntPtr.Zero) ? null : new ChVectorDynamicd(state_w, false));
  }

  private int SwigDirectorMethodGetIntegrationPointsU() {
    return GetIntegrationPointsU();
  }

  private int SwigDirectorMethodGetIntegrationPointsV() {
    return GetIntegrationPointsV();
  }

  private int SwigDirectorMethodGetIntegrationPointsW() {
    return GetIntegrationPointsW();
  }

  public delegate void SwigDelegateChLoaderGravity_0(global::System.IntPtr state_x, global::System.IntPtr state_w);
  public delegate global::System.IntPtr SwigDelegateChLoaderGravity_1();
  public delegate bool SwigDelegateChLoaderGravity_2();
  public delegate void SwigDelegateChLoaderGravity_3(double U, double V, double W, global::System.IntPtr F, global::System.IntPtr state_x, global::System.IntPtr state_w);
  public delegate int SwigDelegateChLoaderGravity_4();
  public delegate int SwigDelegateChLoaderGravity_5();
  public delegate int SwigDelegateChLoaderGravity_6();

  private SwigDelegateChLoaderGravity_0 swigDelegate0;
  private SwigDelegateChLoaderGravity_1 swigDelegate1;
  private SwigDelegateChLoaderGravity_2 swigDelegate2;
  private SwigDelegateChLoaderGravity_3 swigDelegate3;
  private SwigDelegateChLoaderGravity_4 swigDelegate4;
  private SwigDelegateChLoaderGravity_5 swigDelegate5;
  private SwigDelegateChLoaderGravity_6 swigDelegate6;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(ChVectorDynamicd), typeof(ChVectorDynamicd) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(ChVectorDynamicd), typeof(ChVectorDynamicd), typeof(ChVectorDynamicd) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] {  };
}
