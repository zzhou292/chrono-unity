//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVehicleJoint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChVehicleJoint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVehicleJoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChVehicleJoint() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_ChVehicleJoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChVehicleJoint(ChVehicleJoint.Type type, string name, ChBody body1, ChBody body2, ChFramed joint_frame, SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t bushing_data) : this(chrono_vehiclePINVOKE.new_ChVehicleJoint__SWIG_0((int)type, name, ChBody.getCPtr(body1), ChBody.getCPtr(body2), ChFramed.getCPtr(joint_frame), SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChVehicleBushingData_t.getCPtr(bushing_data)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVehicleJoint(ChVehicleJoint.Type type, string name, ChBody body1, ChBody body2, ChFramed joint_frame) : this(chrono_vehiclePINVOKE.new_ChVehicleJoint__SWIG_1((int)type, name, ChBody.getCPtr(body1), ChBody.getCPtr(body2), ChFramed.getCPtr(joint_frame)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetPos() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChVehicleJoint_GetPos(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetConstraintViolation() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chrono_vehiclePINVOKE.ChVehicleJoint_GetConstraintViolation(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetForce() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChVehicleJoint_GetForce(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsKinematic() {
    bool ret = chrono_vehiclePINVOKE.ChVehicleJoint_IsKinematic(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLink GetAsLink() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicleJoint_GetAsLink(swigCPtr);
    ChLink ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLink(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLoadBodyBodyBushingGeneric GetAsBushing() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChVehicleJoint_GetAsBushing(swigCPtr);
    ChLoadBodyBodyBushingGeneric ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLoadBodyBodyBushingGeneric(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static string GetTypeString(ChVehicleJoint.Type type) {
    string ret = chrono_vehiclePINVOKE.ChVehicleJoint_GetTypeString((int)type);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public enum Type {
    LOCK,
    SPHERICAL,
    REVOLUTE,
    UNIVERSAL,
    POINTLINE,
    POINTPLANE
  }

}
