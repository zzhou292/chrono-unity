//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SprocketDoublePin : ChSprocketDoublePin {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal SprocketDoublePin(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.SprocketDoublePin_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SprocketDoublePin obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_SprocketDoublePin(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public SprocketDoublePin(string filename) : this(chrono_vehiclePINVOKE.new_SprocketDoublePin__SWIG_0(filename), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public SprocketDoublePin(SWIGTYPE_p_rapidjson__Document d) : this(chrono_vehiclePINVOKE.new_SprocketDoublePin__SWIG_1(SWIGTYPE_p_rapidjson__Document.getCPtr(d)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetNumTeeth() {
    uint ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetNumTeeth(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetAssemblyRadius() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetAssemblyRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetAddendumRadius() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetAddendumRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetGearMass() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetGearMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetGearInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.SprocketDoublePin_GetGearInertia(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetAxleInertia() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetAxleInertia(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetSeparation() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetSeparation(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetOuterRadius() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetOuterRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetArcRadius() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetArcRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetArcCenterHeight() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetArcCenterHeight(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetArcCenterOffset() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetArcCenterOffset(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetLateralBacklash() {
    double ret = chrono_vehiclePINVOKE.SprocketDoublePin_GetLateralBacklash(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
