//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChGlyphs : ChVisualShape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChGlyphs(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChGlyphs_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChGlyphs obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChGlyphs(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChGlyphs() : this(chronoPINVOKE.new_ChGlyphs(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChGlyphs.eCh_GlyphType GetDrawMode() {
    ChGlyphs.eCh_GlyphType ret = (ChGlyphs.eCh_GlyphType)chronoPINVOKE.ChGlyphs_GetDrawMode(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDrawMode(ChGlyphs.eCh_GlyphType mmode) {
    chronoPINVOKE.ChGlyphs_SetDrawMode(swigCPtr, (int)mmode);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reserve(uint n_glyphs) {
    chronoPINVOKE.ChGlyphs_Reserve(swigCPtr, n_glyphs);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumberOfGlyphs() {
    uint ret = chronoPINVOKE.ChGlyphs_GetNumberOfGlyphs(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetGlyphsSize() {
    double ret = chronoPINVOKE.ChGlyphs_GetGlyphsSize(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetGlyphsSize(double msize) {
    chronoPINVOKE.ChGlyphs_SetGlyphsSize(swigCPtr, msize);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetZbufferHide(bool mhide) {
    chronoPINVOKE.ChGlyphs_SetZbufferHide(swigCPtr, mhide);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool GetZbufferHide() {
    bool ret = chronoPINVOKE.ChGlyphs_GetZbufferHide(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetGlyphPoint(uint id, ChVector3d mpoint, ChColor mcolor) {
    chronoPINVOKE.ChGlyphs_SetGlyphPoint__SWIG_0(swigCPtr, id, ChVector3d.getCPtr(mpoint), ChColor.getCPtr(mcolor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphPoint(uint id, ChVector3d mpoint) {
    chronoPINVOKE.ChGlyphs_SetGlyphPoint__SWIG_1(swigCPtr, id, ChVector3d.getCPtr(mpoint));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphVector(uint id, ChVector3d mpoint, ChVector3d mvector, ChColor mcolor) {
    chronoPINVOKE.ChGlyphs_SetGlyphVector__SWIG_0(swigCPtr, id, ChVector3d.getCPtr(mpoint), ChVector3d.getCPtr(mvector), ChColor.getCPtr(mcolor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphVector(uint id, ChVector3d mpoint, ChVector3d mvector) {
    chronoPINVOKE.ChGlyphs_SetGlyphVector__SWIG_1(swigCPtr, id, ChVector3d.getCPtr(mpoint), ChVector3d.getCPtr(mvector));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphVectorLocal(uint id, ChVector3d mpoint, ChVector3d mvector, ChQuaterniond mrot, ChColor mcolor) {
    chronoPINVOKE.ChGlyphs_SetGlyphVectorLocal__SWIG_0(swigCPtr, id, ChVector3d.getCPtr(mpoint), ChVector3d.getCPtr(mvector), ChQuaterniond.getCPtr(mrot), ChColor.getCPtr(mcolor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphVectorLocal(uint id, ChVector3d mpoint, ChVector3d mvector, ChQuaterniond mrot) {
    chronoPINVOKE.ChGlyphs_SetGlyphVectorLocal__SWIG_1(swigCPtr, id, ChVector3d.getCPtr(mpoint), ChVector3d.getCPtr(mvector), ChQuaterniond.getCPtr(mrot));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphCoordsys(uint id, ChCoordsysd mcoord) {
    chronoPINVOKE.ChGlyphs_SetGlyphCoordsys(swigCPtr, id, ChCoordsysd.getCPtr(mcoord));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGlyphTensor(uint id, ChVector3d mpoint, ChQuaterniond mbasis, ChVector3d eigenvalues) {
    chronoPINVOKE.ChGlyphs_SetGlyphTensor(swigCPtr, id, ChVector3d.getCPtr(mpoint), ChQuaterniond.getCPtr(mbasis), ChVector3d.getCPtr(eigenvalues));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_ChProperty_p_t getProperties() {
    SWIGTYPE_p_std__vectorT_ChProperty_p_t ret = new SWIGTYPE_p_std__vectorT_ChProperty_p_t(chronoPINVOKE.ChGlyphs_getProperties(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddProperty(SWIGTYPE_p_ChProperty mprop) {
    chronoPINVOKE.ChGlyphs_AddProperty(swigCPtr, SWIGTYPE_p_ChProperty.getCPtr(mprop));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChGlyphs_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChGlyphs_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public vector_ChVector3d points {
    set {
      chronoPINVOKE.ChGlyphs_points_set(swigCPtr, vector_ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_points_get(swigCPtr);
      vector_ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChGlyphs.eCh_GlyphLength glyph_length_type {
    set {
      chronoPINVOKE.ChGlyphs_glyph_length_type_set(swigCPtr, (int)value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ChGlyphs.eCh_GlyphLength ret = (ChGlyphs.eCh_GlyphLength)chronoPINVOKE.ChGlyphs_glyph_length_type_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string glyph_length_prop {
    set {
      chronoPINVOKE.ChGlyphs_glyph_length_prop_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = chronoPINVOKE.ChGlyphs_glyph_length_prop_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double glyph_scalelenght {
    set {
      chronoPINVOKE.ChGlyphs_glyph_scalelenght_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chronoPINVOKE.ChGlyphs_glyph_scalelenght_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChGlyphs.eCh_GlyphWidth glyph_width_type {
    set {
      chronoPINVOKE.ChGlyphs_glyph_width_type_set(swigCPtr, (int)value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ChGlyphs.eCh_GlyphWidth ret = (ChGlyphs.eCh_GlyphWidth)chronoPINVOKE.ChGlyphs_glyph_width_type_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string glyph_width_prop {
    set {
      chronoPINVOKE.ChGlyphs_glyph_width_prop_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = chronoPINVOKE.ChGlyphs_glyph_width_prop_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double glyph_scalewidth {
    set {
      chronoPINVOKE.ChGlyphs_glyph_scalewidth_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chronoPINVOKE.ChGlyphs_glyph_scalewidth_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChGlyphs.eCh_GlyphBasis glyph_basis_type {
    set {
      chronoPINVOKE.ChGlyphs_glyph_basis_type_set(swigCPtr, (int)value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ChGlyphs.eCh_GlyphBasis ret = (ChGlyphs.eCh_GlyphBasis)chronoPINVOKE.ChGlyphs_glyph_basis_type_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string glyph_basis_prop {
    set {
      chronoPINVOKE.ChGlyphs_glyph_basis_prop_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = chronoPINVOKE.ChGlyphs_glyph_basis_prop_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChQuaterniond glyph_basis_constant {
    set {
      chronoPINVOKE.ChGlyphs_glyph_basis_constant_set(swigCPtr, ChQuaterniond.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_glyph_basis_constant_get(swigCPtr);
      ChQuaterniond ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChQuaterniond(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChGlyphs.eCh_GlyphEigenvalues glyph_eigenvalues_type {
    set {
      chronoPINVOKE.ChGlyphs_glyph_eigenvalues_type_set(swigCPtr, (int)value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ChGlyphs.eCh_GlyphEigenvalues ret = (ChGlyphs.eCh_GlyphEigenvalues)chronoPINVOKE.ChGlyphs_glyph_eigenvalues_type_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string glyph_eigenvalues_prop {
    set {
      chronoPINVOKE.ChGlyphs_glyph_eigenvalues_prop_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = chronoPINVOKE.ChGlyphs_glyph_eigenvalues_prop_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChVector3d glyph_eigenvalue_constant {
    set {
      chronoPINVOKE.ChGlyphs_glyph_eigenvalue_constant_set(swigCPtr, ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_glyph_eigenvalue_constant_get(swigCPtr);
      ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChGlyphs.eCh_GlyphColor glyph_color_type {
    set {
      chronoPINVOKE.ChGlyphs_glyph_color_type_set(swigCPtr, (int)value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ChGlyphs.eCh_GlyphColor ret = (ChGlyphs.eCh_GlyphColor)chronoPINVOKE.ChGlyphs_glyph_color_type_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string glyph_color_prop {
    set {
      chronoPINVOKE.ChGlyphs_glyph_color_prop_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = chronoPINVOKE.ChGlyphs_glyph_color_prop_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChColor glyph_color_constant {
    set {
      chronoPINVOKE.ChGlyphs_glyph_color_constant_set(swigCPtr, ChColor.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_glyph_color_constant_get(swigCPtr);
      ChColor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChColor(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double glyph_colormap_startscale {
    set {
      chronoPINVOKE.ChGlyphs_glyph_colormap_startscale_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chronoPINVOKE.ChGlyphs_glyph_colormap_startscale_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double glyph_colormap_endscale {
    set {
      chronoPINVOKE.ChGlyphs_glyph_colormap_endscale_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chronoPINVOKE.ChGlyphs_glyph_colormap_endscale_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public bool vector_tip {
    set {
      chronoPINVOKE.ChGlyphs_vector_tip_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      bool ret = chronoPINVOKE.ChGlyphs_vector_tip_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ChProperty_p_t m_properties {
    set {
      chronoPINVOKE.ChGlyphs_m_properties_set(swigCPtr, SWIGTYPE_p_std__vectorT_ChProperty_p_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_m_properties_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ChProperty_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ChProperty_p_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_chrono__ChColor_t colors {
    set {
      chronoPINVOKE.ChGlyphs_colors_set(swigCPtr, SWIGTYPE_p_std__vectorT_chrono__ChColor_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_colors_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_chrono__ChColor_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_chrono__ChColor_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVector3d vectors {
    set {
      chronoPINVOKE.ChGlyphs_vectors_set(swigCPtr, vector_ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_vectors_get(swigCPtr);
      vector_ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_chrono__ChQuaternionT_double_t_t rotations {
    set {
      chronoPINVOKE.ChGlyphs_rotations_set(swigCPtr, SWIGTYPE_p_std__vectorT_chrono__ChQuaternionT_double_t_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_rotations_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_chrono__ChQuaternionT_double_t_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_chrono__ChQuaternionT_double_t_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVector3d eigenvalues {
    set {
      chronoPINVOKE.ChGlyphs_eigenvalues_set(swigCPtr, vector_ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChGlyphs_eigenvalues_get(swigCPtr);
      vector_ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public enum eCh_GlyphType {
    GLYPH_POINT = 0,
    GLYPH_VECTOR,
    GLYPH_COORDSYS,
    GLYPH_TENSOR
  }

  public enum eCh_GlyphLength {
    CONSTANT = 0,
    PROPERTY
  }

  public enum eCh_GlyphWidth {
    CONSTANT = 0,
    PROPERTY
  }

  public enum eCh_GlyphBasis {
    CONSTANT = 0,
    PROPERTY
  }

  public enum eCh_GlyphEigenvalues {
    CONSTANT = 0,
    PROPERTY
  }

  public enum eCh_GlyphColor {
    CONSTANT = 0,
    PROPERTY
  }

}
