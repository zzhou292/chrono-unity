//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChImplicitIterativeTimestepper : ChImplicitTimestepper {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChImplicitIterativeTimestepper(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChImplicitIterativeTimestepper_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChImplicitIterativeTimestepper obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChImplicitIterativeTimestepper(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChImplicitIterativeTimestepper() : this(chronoPINVOKE.new_ChImplicitIterativeTimestepper(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaxIters(int iters) {
    chronoPINVOKE.ChImplicitIterativeTimestepper_SetMaxIters(swigCPtr, iters);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMaxIters() {
    double ret = chronoPINVOKE.ChImplicitIterativeTimestepper_GetMaxIters(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRelTolerance(double rel_tol) {
    chronoPINVOKE.ChImplicitIterativeTimestepper_SetRelTolerance(swigCPtr, rel_tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAbsTolerances(double abs_tolS, double abs_tolL) {
    chronoPINVOKE.ChImplicitIterativeTimestepper_SetAbsTolerances__SWIG_0(swigCPtr, abs_tolS, abs_tolL);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAbsTolerances(double abs_tol) {
    chronoPINVOKE.ChImplicitIterativeTimestepper_SetAbsTolerances__SWIG_1(swigCPtr, abs_tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumIterations() {
    uint ret = chronoPINVOKE.ChImplicitIterativeTimestepper_GetNumIterations(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumSetupCalls() {
    uint ret = chronoPINVOKE.ChImplicitIterativeTimestepper_GetNumSetupCalls(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumSolveCalls() {
    uint ret = chronoPINVOKE.ChImplicitIterativeTimestepper_GetNumSolveCalls(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive) {
    chronoPINVOKE.ChImplicitIterativeTimestepper_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive) {
    chronoPINVOKE.ChImplicitIterativeTimestepper_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
