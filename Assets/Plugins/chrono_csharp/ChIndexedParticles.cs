//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChIndexedParticles : ChPhysicsItem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChIndexedParticles(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChIndexedParticles_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChIndexedParticles obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChIndexedParticles(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual uint GetNumParticles() {
    uint ret = chronoPINVOKE.ChIndexedParticles_GetNumParticles(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChParticleBase Particle(uint n) {
    ChParticleBase ret = new ChParticleBase(chronoPINVOKE.ChIndexedParticles_Particle__SWIG_0(swigCPtr, n), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ResizeNparticles(int newsize) {
    chronoPINVOKE.ChIndexedParticles_ResizeNparticles(swigCPtr, newsize);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddParticle(ChCoordsysd initial_state) {
    chronoPINVOKE.ChIndexedParticles_AddParticle__SWIG_0(swigCPtr, ChCoordsysd.getCPtr(initial_state));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddParticle() {
    chronoPINVOKE.ChIndexedParticles_AddParticle__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChIndexedParticles_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChIndexedParticles_GetNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetVisualModelFrame(uint nclone) {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChIndexedParticles_GetVisualModelFrame__SWIG_0(swigCPtr, nclone), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetVisualModelFrame() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChIndexedParticles_GetVisualModelFrame__SWIG_1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumVisualModelClones() {
    uint ret = chronoPINVOKE.ChIndexedParticles_GetNumVisualModelClones(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChIndexedParticles_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChIndexedParticles_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
