//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSuspensionTestRig : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChSuspensionTestRig(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSuspensionTestRig obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChSuspensionTestRig() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_ChSuspensionTestRig(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public void SetDriver(ChSuspensionTestRigDriver driver) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetDriver(swigCPtr, ChSuspensionTestRigDriver.getCPtr(driver));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInitialRideHeight(double height) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetInitialRideHeight(swigCPtr, height);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDisplacementLimit(double limit) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetDisplacementLimit(swigCPtr, limit);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void IncludeSteeringMechanism(int index) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_IncludeSteeringMechanism(swigCPtr, index);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void IncludeSubchassis(int index) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_IncludeSubchassis(swigCPtr, index);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSuspensionVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetSuspensionVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSteeringVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetSteeringVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSubchassisVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetSubchassisVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWheelVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetWheelVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTireVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetTireVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize() {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_Initialize(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Advance(double step) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChWheeledVehicle GetVehicle() {
    ChWheeledVehicle ret = new ChWheeledVehicle(chrono_vehiclePINVOKE.ChSuspensionTestRig_GetVehicle(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetSpindlePos(int axle, VehicleSide side) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChSuspensionTestRig_GetSpindlePos(swigCPtr, axle, (int)side), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetSpindleRot(int axle, VehicleSide side) {
    ChQuaterniond ret = new ChQuaterniond(chrono_vehiclePINVOKE.ChSuspensionTestRig_GetSpindleRot(swigCPtr, axle, (int)side), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetSpindleLinVel(int axle, VehicleSide side) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChSuspensionTestRig_GetSpindleLinVel(swigCPtr, axle, (int)side), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetSpindleAngVel(int axle, VehicleSide side) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChSuspensionTestRig_GetSpindleAngVel(swigCPtr, axle, (int)side), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSteeringInput() {
    double ret = chrono_vehiclePINVOKE.ChSuspensionTestRig_GetSteeringInput(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetActuatorDisp(int axle, VehicleSide side) {
    double ret = chrono_vehiclePINVOKE.ChSuspensionTestRig_GetActuatorDisp(swigCPtr, axle, (int)side);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetActuatorForce(int axle, VehicleSide side) {
    double ret = chrono_vehiclePINVOKE.ChSuspensionTestRig_GetActuatorForce(swigCPtr, axle, (int)side);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetWheelTravel(int axle, VehicleSide side) {
    double ret = chrono_vehiclePINVOKE.ChSuspensionTestRig_GetWheelTravel(swigCPtr, axle, (int)side);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetRideHeight(int axle) {
    double ret = chrono_vehiclePINVOKE.ChSuspensionTestRig_GetRideHeight(swigCPtr, axle);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetDriverMessage() {
    string ret = chrono_vehiclePINVOKE.ChSuspensionTestRig_GetDriverMessage(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DriverEnded() {
    bool ret = chrono_vehiclePINVOKE.ChSuspensionTestRig_DriverEnded(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void LogConstraintViolations() {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_LogConstraintViolations(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOutput(ChVehicleOutput.Type type, string out_dir, string out_name, double output_step) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetOutput(swigCPtr, (int)type, out_dir, out_name, output_step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPlotOutput(double output_step) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_SetPlotOutput(swigCPtr, output_step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void PlotOutput(string out_dir, string out_name) {
    chrono_vehiclePINVOKE.ChSuspensionTestRig_PlotOutput(swigCPtr, out_dir, out_name);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
