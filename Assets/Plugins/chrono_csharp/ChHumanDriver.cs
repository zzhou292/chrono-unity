//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChHumanDriver : ChDriver {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChHumanDriver(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChHumanDriver_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChHumanDriver obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChHumanDriver(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChHumanDriver(ChVehicle vehicle, ChBezierCurve path, string path_name, double road_width, double max_wheel_turn_angle, double axle_space) : this(chrono_vehiclePINVOKE.new_ChHumanDriver__SWIG_0(ChVehicle.getCPtr(vehicle), ChBezierCurve.getCPtr(path), path_name, road_width, max_wheel_turn_angle, axle_space), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChHumanDriver(ChVehicle vehicle, ChBezierCurve path, string path_name, double road_width, double max_wheel_turn_angle) : this(chrono_vehiclePINVOKE.new_ChHumanDriver__SWIG_1(ChVehicle.getCPtr(vehicle), ChBezierCurve.getCPtr(path), path_name, road_width, max_wheel_turn_angle), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChHumanDriver(ChVehicle vehicle, ChBezierCurve path, string path_name, double road_width) : this(chrono_vehiclePINVOKE.new_ChHumanDriver__SWIG_2(ChVehicle.getCPtr(vehicle), ChBezierCurve.getCPtr(path), path_name, road_width), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChHumanDriver(ChVehicle vehicle, ChBezierCurve path, string path_name) : this(chrono_vehiclePINVOKE.new_ChHumanDriver__SWIG_3(ChVehicle.getCPtr(vehicle), ChBezierCurve.getCPtr(path), path_name), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChHumanDriver(string filename, ChVehicle vehicle, ChBezierCurve path, string path_name, double road_width, double max_wheel_turn_angle, double axle_space) : this(chrono_vehiclePINVOKE.new_ChHumanDriver__SWIG_4(filename, ChVehicle.getCPtr(vehicle), ChBezierCurve.getCPtr(path), path_name, road_width, max_wheel_turn_angle, axle_space), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChHumanDriver(string filename, ChVehicle vehicle, ChBezierCurve path, string path_name, double road_width, double max_wheel_turn_angle) : this(chrono_vehiclePINVOKE.new_ChHumanDriver__SWIG_5(filename, ChVehicle.getCPtr(vehicle), ChBezierCurve.getCPtr(path), path_name, road_width, max_wheel_turn_angle), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChHumanDriver(string filename, ChVehicle vehicle, ChBezierCurve path, string path_name, double road_width) : this(chrono_vehiclePINVOKE.new_ChHumanDriver__SWIG_6(filename, ChVehicle.getCPtr(vehicle), ChBezierCurve.getCPtr(path), path_name, road_width), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChHumanDriver(string filename, ChVehicle vehicle, ChBezierCurve path, string path_name) : this(chrono_vehiclePINVOKE.new_ChHumanDriver__SWIG_7(filename, ChVehicle.getCPtr(vehicle), ChBezierCurve.getCPtr(path), path_name), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Advance(double step) {
    chrono_vehiclePINVOKE.ChHumanDriver_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Initialize() {
    chrono_vehiclePINVOKE.ChHumanDriver_Initialize(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void ExportPathPovray(string out_dir) {
    chrono_vehiclePINVOKE.ChHumanDriver_ExportPathPovray(swigCPtr, out_dir);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPreviewTime(double Tp) {
    chrono_vehiclePINVOKE.ChHumanDriver_SetPreviewTime__SWIG_0(swigCPtr, Tp);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPreviewTime() {
    chrono_vehiclePINVOKE.ChHumanDriver_SetPreviewTime__SWIG_1(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLateralGains(double Klat, double Kug) {
    chrono_vehiclePINVOKE.ChHumanDriver_SetLateralGains__SWIG_0(swigCPtr, Klat, Kug);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLateralGains(double Klat) {
    chrono_vehiclePINVOKE.ChHumanDriver_SetLateralGains__SWIG_1(swigCPtr, Klat);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLateralGains() {
    chrono_vehiclePINVOKE.ChHumanDriver_SetLateralGains__SWIG_2(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLongitudinalGains(double Klong, double Kplus, double Kminus) {
    chrono_vehiclePINVOKE.ChHumanDriver_SetLongitudinalGains__SWIG_0(swigCPtr, Klong, Kplus, Kminus);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLongitudinalGains(double Klong, double Kplus) {
    chrono_vehiclePINVOKE.ChHumanDriver_SetLongitudinalGains__SWIG_1(swigCPtr, Klong, Kplus);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLongitudinalGains(double Klong) {
    chrono_vehiclePINVOKE.ChHumanDriver_SetLongitudinalGains__SWIG_2(swigCPtr, Klong);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetLongitudinalGains() {
    chrono_vehiclePINVOKE.ChHumanDriver_SetLongitudinalGains__SWIG_3(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpeedRange(double u0, double umax) {
    chrono_vehiclePINVOKE.ChHumanDriver_SetSpeedRange__SWIG_0(swigCPtr, u0, umax);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpeedRange(double u0) {
    chrono_vehiclePINVOKE.ChHumanDriver_SetSpeedRange__SWIG_1(swigCPtr, u0);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpeedRange() {
    chrono_vehiclePINVOKE.ChHumanDriver_SetSpeedRange__SWIG_2(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetTargetLocation() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChHumanDriver_GetTargetLocation(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetSentinelLocation() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChHumanDriver_GetSentinelLocation(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTraveledDistance() {
    double ret = chrono_vehiclePINVOKE.ChHumanDriver_GetTraveledDistance(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAverageSpeed() {
    double ret = chrono_vehiclePINVOKE.ChHumanDriver_GetAverageSpeed(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMaxSpeed() {
    double ret = chrono_vehiclePINVOKE.ChHumanDriver_GetMaxSpeed(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMinSpeed() {
    double ret = chrono_vehiclePINVOKE.ChHumanDriver_GetMinSpeed(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMaxLatAcc() {
    double ret = chrono_vehiclePINVOKE.ChHumanDriver_GetMaxLatAcc(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMinLatAcc() {
    double ret = chrono_vehiclePINVOKE.ChHumanDriver_GetMinLatAcc(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
