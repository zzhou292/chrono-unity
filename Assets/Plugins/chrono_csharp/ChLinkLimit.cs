//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkLimit : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChLinkLimit(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkLimit obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChLinkLimit() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChLinkLimit(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public SWIGTYPE_p_ChConstraintTwoBodies constr_upper {
    set {
      chronoPINVOKE.ChLinkLimit_constr_upper_set(swigCPtr, SWIGTYPE_p_ChConstraintTwoBodies.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ChConstraintTwoBodies ret = new SWIGTYPE_p_ChConstraintTwoBodies(chronoPINVOKE.ChLinkLimit_constr_upper_get(swigCPtr), true);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_ChConstraintTwoBodies constr_lower {
    set {
      chronoPINVOKE.ChLinkLimit_constr_lower_set(swigCPtr, SWIGTYPE_p_ChConstraintTwoBodies.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      SWIGTYPE_p_ChConstraintTwoBodies ret = new SWIGTYPE_p_ChConstraintTwoBodies(chronoPINVOKE.ChLinkLimit_constr_lower_get(swigCPtr), true);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChLinkLimit() : this(chronoPINVOKE.new_ChLinkLimit__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkLimit(ChLinkLimit other) : this(chronoPINVOKE.new_ChLinkLimit__SWIG_1(ChLinkLimit.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkLimit Clone() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLimit_Clone(swigCPtr);
    ChLinkLimit ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkLimit(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsActive() {
    bool ret = chronoPINVOKE.ChLinkLimit_IsActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetActive(bool val) {
    chronoPINVOKE.ChLinkLimit_SetActive(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsPenalty() {
    bool ret = chronoPINVOKE.ChLinkLimit_IsPenalty(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsPolar() {
    bool ret = chronoPINVOKE.ChLinkLimit_IsPolar(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsRotation() {
    bool ret = chronoPINVOKE.ChLinkLimit_IsRotation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPenalty(bool val) {
    chronoPINVOKE.ChLinkLimit_SetPenalty(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPolar(bool val) {
    chronoPINVOKE.ChLinkLimit_SetPolar(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRotation(bool val) {
    chronoPINVOKE.ChLinkLimit_SetRotation(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetMax() {
    double ret = chronoPINVOKE.ChLinkLimit_GetMax(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMin() {
    double ret = chronoPINVOKE.ChLinkLimit_GetMin(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMaxCushion() {
    double ret = chronoPINVOKE.ChLinkLimit_GetMaxCushion(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMinCushion() {
    double ret = chronoPINVOKE.ChLinkLimit_GetMinCushion(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpringCoefficientMax() {
    double ret = chronoPINVOKE.ChLinkLimit_GetSpringCoefficientMax(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSpringCoefficientMin() {
    double ret = chronoPINVOKE.ChLinkLimit_GetSpringCoefficientMin(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDampingCoefficientMax() {
    double ret = chronoPINVOKE.ChLinkLimit_GetDampingCoefficientMax(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDampingCoefficientMin() {
    double ret = chronoPINVOKE.ChLinkLimit_GetDampingCoefficientMin(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetPolarAngleMax(double pol_ang) {
    double ret = chronoPINVOKE.ChLinkLimit_GetPolarAngleMax(swigCPtr, pol_ang);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMax(double val) {
    chronoPINVOKE.ChLinkLimit_SetMax(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMin(double val) {
    chronoPINVOKE.ChLinkLimit_SetMin(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaxCushion(double val) {
    chronoPINVOKE.ChLinkLimit_SetMaxCushion(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMinCushion(double val) {
    chronoPINVOKE.ChLinkLimit_SetMinCushion(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpringCoefficientMax(double val) {
    chronoPINVOKE.ChLinkLimit_SetSpringCoefficientMax(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpringCoefficientMin(double val) {
    chronoPINVOKE.ChLinkLimit_SetSpringCoefficientMin(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDampingCoefficientMax(double val) {
    chronoPINVOKE.ChLinkLimit_SetDampingCoefficientMax(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDampingCoefficientMin(double val) {
    chronoPINVOKE.ChLinkLimit_SetDampingCoefficientMin(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpringModulationMax(ChFunction funct) {
    chronoPINVOKE.ChLinkLimit_SetSpringModulationMax(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpringModulationMin(ChFunction funct) {
    chronoPINVOKE.ChLinkLimit_SetSpringModulationMin(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDamperModulationMax(ChFunction funct) {
    chronoPINVOKE.ChLinkLimit_SetDamperModulationMax(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDamperModulationMin(ChFunction funct) {
    chronoPINVOKE.ChLinkLimit_SetDamperModulationMin(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPolarAngleModulationMax(ChFunction funct) {
    chronoPINVOKE.ChLinkLimit_SetPolarAngleModulationMax(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetSpringModulationMax() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLimit_GetSpringModulationMax(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetSpringModulationMin() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLimit_GetSpringModulationMin(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetDamperModulationMax() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLimit_GetDamperModulationMax(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetDamperModulationMin() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLimit_GetDamperModulationMin(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetPolarAngleModulationMax() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkLimit_GetPolarAngleModulationMax(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetViolation(double x) {
    double ret = chronoPINVOKE.ChLinkLimit_GetViolation(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetForceTorque(double x, double x_dt) {
    double ret = chronoPINVOKE.ChLinkLimit_GetForceTorque(swigCPtr, x, x_dt);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetPolarForce(double x, double x_dt, double pol_ang) {
    double ret = chronoPINVOKE.ChLinkLimit_GetPolarForce(swigCPtr, x, x_dt, pol_ang);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkLimit_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkLimit_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
