//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChRigidTire : ChTire {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChRigidTire(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChRigidTire_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChRigidTire obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChRigidTire(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override string GetTemplateName() {
    string ret = chrono_vehiclePINVOKE.ChRigidTire_GetTemplateName(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMeshFilename(string mesh_file, double sweep_sphere_radius) {
    chrono_vehiclePINVOKE.ChRigidTire_SetMeshFilename__SWIG_0(swigCPtr, mesh_file, sweep_sphere_radius);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMeshFilename(string mesh_file) {
    chrono_vehiclePINVOKE.ChRigidTire_SetMeshFilename__SWIG_1(swigCPtr, mesh_file);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public bool UseContactMesh() {
    bool ret = chrono_vehiclePINVOKE.ChRigidTire_UseContactMesh(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TerrainForce ReportTireForce(ChTerrain terrain) {
    TerrainForce ret = new TerrainForce(chrono_vehiclePINVOKE.ChRigidTire_ReportTireForce(swigCPtr, ChTerrain.getCPtr(terrain)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override TerrainForce ReportTireForceLocal(ChTerrain terrain, ChCoordsysd tire_frame) {
    TerrainForce ret = new TerrainForce(chrono_vehiclePINVOKE.ChRigidTire_ReportTireForceLocal(swigCPtr, ChTerrain.getCPtr(terrain), ChCoordsysd.getCPtr(tire_frame)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChContactMaterial GetContactMaterial() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChRigidTire_GetContactMaterial(swigCPtr);
    ChContactMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactMaterial(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void AddVisualizationAssets(VisualizationType vis) {
    chrono_vehiclePINVOKE.ChRigidTire_AddVisualizationAssets(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override void RemoveVisualizationAssets() {
    chrono_vehiclePINVOKE.ChRigidTire_RemoveVisualizationAssets(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTriangleMeshConnected GetContactMesh() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChRigidTire_GetContactMesh(swigCPtr);
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GetMeshVertexStates(vector_ChVector3d pos, vector_ChVector3d vel) {
    chrono_vehiclePINVOKE.ChRigidTire_GetMeshVertexStates(swigCPtr, vector_ChVector3d.getCPtr(pos), vector_ChVector3d.getCPtr(vel));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
