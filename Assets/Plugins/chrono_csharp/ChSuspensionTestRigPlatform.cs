//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSuspensionTestRigPlatform : ChSuspensionTestRig {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChSuspensionTestRigPlatform(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChSuspensionTestRigPlatform_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSuspensionTestRigPlatform obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChSuspensionTestRigPlatform(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChSuspensionTestRigPlatform(ChWheeledVehicle vehicle, vector_int axle_index, double displ_limit) : this(chrono_vehiclePINVOKE.new_ChSuspensionTestRigPlatform__SWIG_0(ChWheeledVehicle.getCPtr(vehicle), vector_int.getCPtr(axle_index), displ_limit), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSuspensionTestRigPlatform(string spec_filename) : this(chrono_vehiclePINVOKE.new_ChSuspensionTestRigPlatform__SWIG_1(spec_filename), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override double GetActuatorDisp(int axle, VehicleSide side) {
    double ret = chrono_vehiclePINVOKE.ChSuspensionTestRigPlatform_GetActuatorDisp(swigCPtr, axle, (int)side);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetActuatorForce(int axle, VehicleSide side) {
    double ret = chrono_vehiclePINVOKE.ChSuspensionTestRigPlatform_GetActuatorForce(swigCPtr, axle, (int)side);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetRideHeight(int axle) {
    double ret = chrono_vehiclePINVOKE.ChSuspensionTestRigPlatform_GetRideHeight(swigCPtr, axle);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
