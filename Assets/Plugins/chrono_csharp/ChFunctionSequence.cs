//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionSequence : ChFunction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunctionSequence(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChFunctionSequence_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionSequence obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChFunctionSequence(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunctionSequence() : this(chronoPINVOKE.new_ChFunctionSequence__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionSequence(ChFunctionSequence other) : this(chronoPINVOKE.new_ChFunctionSequence__SWIG_1(ChFunctionSequence.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChFunction.Type GetFunctionType() {
    ChFunction.Type ret = (ChFunction.Type)chronoPINVOKE.ChFunctionSequence_GetFunctionType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetVal(double x) {
    double ret = chronoPINVOKE.ChFunctionSequence_GetVal(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetDer(double x) {
    double ret = chronoPINVOKE.ChFunctionSequence_GetDer(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetDer2(double x) {
    double ret = chronoPINVOKE.ChFunctionSequence_GetDer2(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStartArg(double start) {
    chronoPINVOKE.ChFunctionSequence_SetStartArg(swigCPtr, start);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetStartArg() {
    double ret = chronoPINVOKE.ChFunctionSequence_GetStartArg(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__listT_chrono__ChFseqNode_t GetFunctions() {
    SWIGTYPE_p_std__listT_chrono__ChFseqNode_t ret = new SWIGTYPE_p_std__listT_chrono__ChFseqNode_t(chronoPINVOKE.ChFunctionSequence_GetFunctions(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Setup() {
    chronoPINVOKE.ChFunctionSequence_Setup(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight, bool c0, bool c1, bool c2, int position) {
    bool ret = chronoPINVOKE.ChFunctionSequence_InsertFunct__SWIG_0(swigCPtr, ChFunction.getCPtr(myfx), duration, weight, c0, c1, c2, position);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight, bool c0, bool c1, bool c2) {
    bool ret = chronoPINVOKE.ChFunctionSequence_InsertFunct__SWIG_1(swigCPtr, ChFunction.getCPtr(myfx), duration, weight, c0, c1, c2);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight, bool c0, bool c1) {
    bool ret = chronoPINVOKE.ChFunctionSequence_InsertFunct__SWIG_2(swigCPtr, ChFunction.getCPtr(myfx), duration, weight, c0, c1);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight, bool c0) {
    bool ret = chronoPINVOKE.ChFunctionSequence_InsertFunct__SWIG_3(swigCPtr, ChFunction.getCPtr(myfx), duration, weight, c0);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration, double weight) {
    bool ret = chronoPINVOKE.ChFunctionSequence_InsertFunct__SWIG_4(swigCPtr, ChFunction.getCPtr(myfx), duration, weight);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool InsertFunct(ChFunction myfx, double duration) {
    bool ret = chronoPINVOKE.ChFunctionSequence_InsertFunct__SWIG_5(swigCPtr, ChFunction.getCPtr(myfx), duration);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool RemoveFunct(int index) {
    bool ret = chronoPINVOKE.ChFunctionSequence_RemoveFunct(swigCPtr, index);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetFunction(int index) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionSequence_GetFunction(swigCPtr, index);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFseqNode GetNode(int index) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionSequence_GetNode(swigCPtr, index);
    ChFseqNode ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFseqNode(cPtr, false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetWidth(int index) {
    double ret = chronoPINVOKE.ChFunctionSequence_GetWidth(swigCPtr, index);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetWeight(double x) {
    double ret = chronoPINVOKE.ChFunctionSequence_GetWeight(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetClamped(bool clamped) {
    chronoPINVOKE.ChFunctionSequence_SetClamped(swigCPtr, clamped);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsClamped() {
    bool ret = chronoPINVOKE.ChFunctionSequence_IsClamped(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChFunctionSequence_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChFunctionSequence_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
