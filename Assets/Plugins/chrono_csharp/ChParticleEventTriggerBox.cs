//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChParticleEventTriggerBox : ChParticleEventTrigger {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChParticleEventTriggerBox(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChParticleEventTriggerBox_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChParticleEventTriggerBox obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChParticleEventTriggerBox(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChParticleEventTriggerBox() : this(chronoPINVOKE.new_ChParticleEventTriggerBox(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool TriggerEvent(ChBody mbody, ChSystem msystem) {
    bool ret = chronoPINVOKE.ChParticleEventTriggerBox_TriggerEvent(swigCPtr, ChBody.getCPtr(mbody), ChSystem.getCPtr(msystem));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTriggerOutside(bool minvert) {
    chronoPINVOKE.ChParticleEventTriggerBox_SetTriggerOutside(swigCPtr, minvert);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBox m_box {
    set {
      chronoPINVOKE.ChParticleEventTriggerBox_m_box_set(swigCPtr, ChBox.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ChBox ret = new ChBox(chronoPINVOKE.ChParticleEventTriggerBox_m_box_get(swigCPtr), true);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChFramed m_frame {
    set {
      chronoPINVOKE.ChParticleEventTriggerBox_m_frame_set(swigCPtr, ChFramed.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      ChFramed ret = new ChFramed(chronoPINVOKE.ChParticleEventTriggerBox_m_frame_get(swigCPtr), true);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
