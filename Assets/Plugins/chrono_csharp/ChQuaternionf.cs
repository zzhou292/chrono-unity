//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChQuaternionf : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChQuaternionf(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChQuaternionf obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChQuaternionf() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ChQuaternionf(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChQuaternionf() : this(chronoPINVOKE.new_ChQuaternionf__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaternionf(float e0, float e1, float e2, float e3) : this(chronoPINVOKE.new_ChQuaternionf__SWIG_1(e0, e1, e2, e3), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaternionf(float s, ChVector3f v) : this(chronoPINVOKE.new_ChQuaternionf__SWIG_2(s, ChVector3f.getCPtr(v)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaternionf(ChQuaternionf other) : this(chronoPINVOKE.new_ChQuaternionf__SWIG_3(ChQuaternionf.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_float data() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChQuaternionf_data__SWIG_0(swigCPtr);
    SWIGTYPE_p_float ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_float(cPtr, false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set(float e0, float e1, float e2, float e3) {
    chronoPINVOKE.ChQuaternionf_Set__SWIG_0(swigCPtr, e0, e1, e2, e3);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(ChQuaternionf q) {
    chronoPINVOKE.ChQuaternionf_Set__SWIG_1(swigCPtr, ChQuaternionf.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(float s) {
    chronoPINVOKE.ChQuaternionf_Set__SWIG_2(swigCPtr, s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNull() {
    chronoPINVOKE.ChQuaternionf_SetNull(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUnit() {
    chronoPINVOKE.ChQuaternionf_SetUnit(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetScalar(float s) {
    chronoPINVOKE.ChQuaternionf_SetScalar(swigCPtr, s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVector(ChVector3f v) {
    chronoPINVOKE.ChQuaternionf_SetVector(swigCPtr, ChVector3f.getCPtr(v));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsNull() {
    bool ret = chronoPINVOKE.ChQuaternionf_IsNull(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsIdentity() {
    bool ret = chronoPINVOKE.ChQuaternionf_IsIdentity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChQuaternionf other) {
    bool ret = chronoPINVOKE.ChQuaternionf_Equals__SWIG_0(swigCPtr, ChQuaternionf.getCPtr(other));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChQuaternionf other, float tol) {
    bool ret = chronoPINVOKE.ChQuaternionf_Equals__SWIG_1(swigCPtr, ChQuaternionf.getCPtr(other), tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3f GetVector() {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_GetVector(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3f GetAxisX() {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_GetAxisX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3f GetAxisY() {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_GetAxisY(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3f GetAxisZ() {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_GetAxisZ(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float Length() {
    float ret = chronoPINVOKE.ChQuaternionf_Length(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float Length2() {
    float ret = chronoPINVOKE.ChQuaternionf_Length2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float LengthInf() {
    float ret = chronoPINVOKE.ChQuaternionf_LengthInf(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionf conj() {
    ChQuaternionf ret = new ChQuaternionf(chronoPINVOKE.ChQuaternionf_conj(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(ChQuaternionf A, ChQuaternionf B) {
    chronoPINVOKE.ChQuaternionf_Add(swigCPtr, ChQuaternionf.getCPtr(A), ChQuaternionf.getCPtr(B));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Sub(ChQuaternionf A, ChQuaternionf B) {
    chronoPINVOKE.ChQuaternionf_Sub(swigCPtr, ChQuaternionf.getCPtr(A), ChQuaternionf.getCPtr(B));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Cross(ChQuaternionf qa, ChQuaternionf qb) {
    chronoPINVOKE.ChQuaternionf_Cross(swigCPtr, ChQuaternionf.getCPtr(qa), ChQuaternionf.getCPtr(qb));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float Dot(ChQuaternionf B) {
    float ret = chronoPINVOKE.ChQuaternionf_Dot(swigCPtr, ChQuaternionf.getCPtr(B));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Mul(ChQuaternionf A, float s) {
    chronoPINVOKE.ChQuaternionf_Mul(swigCPtr, ChQuaternionf.getCPtr(A), s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Scale(float s) {
    chronoPINVOKE.ChQuaternionf_Scale(swigCPtr, s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Normalize() {
    bool ret = chronoPINVOKE.ChQuaternionf_Normalize(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionf GetNormalized() {
    ChQuaternionf ret = new ChQuaternionf(chronoPINVOKE.ChQuaternionf_GetNormalized(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Conjugate(ChQuaternionf A) {
    chronoPINVOKE.ChQuaternionf_Conjugate__SWIG_0(swigCPtr, ChQuaternionf.getCPtr(A));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Conjugate() {
    chronoPINVOKE.ChQuaternionf_Conjugate__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaternionf GetConjugate() {
    ChQuaternionf ret = new ChQuaternionf(chronoPINVOKE.ChQuaternionf_GetConjugate(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaternionf GetInverse() {
    ChQuaternionf ret = new ChQuaternionf(chronoPINVOKE.ChQuaternionf_GetInverse(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3f Rotate(ChVector3f A) {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_Rotate(swigCPtr, ChVector3f.getCPtr(A)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3f RotateBack(ChVector3f A) {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_RotateBack(swigCPtr, ChVector3f.getCPtr(A)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFromRotVec(ChVector3f angle_axis) {
    chronoPINVOKE.ChQuaternionf_SetFromRotVec(swigCPtr, ChVector3f.getCPtr(angle_axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3f GetRotVec() {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_GetRotVec(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFromAngleAxis(float angle, ChVector3f axis) {
    chronoPINVOKE.ChQuaternionf_SetFromAngleAxis(swigCPtr, angle, ChVector3f.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAngleX(float angleX) {
    chronoPINVOKE.ChQuaternionf_SetFromAngleX(swigCPtr, angleX);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAngleY(float angleY) {
    chronoPINVOKE.ChQuaternionf_SetFromAngleY(swigCPtr, angleY);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAngleZ(float angleZ) {
    chronoPINVOKE.ChQuaternionf_SetFromAngleZ(swigCPtr, angleZ);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAngleAxis(SWIGTYPE_p_float angle, ChVector3f axis) {
    chronoPINVOKE.ChQuaternionf_GetAngleAxis(swigCPtr, SWIGTYPE_p_float.getCPtr(angle), ChVector3f.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromCardanAnglesZYX(ChVector3f ang) {
    chronoPINVOKE.ChQuaternionf_SetFromCardanAnglesZYX(swigCPtr, ChVector3f.getCPtr(ang));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3f GetCardanAnglesZYX() {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_GetCardanAnglesZYX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFromCardanAnglesXYZ(ChVector3f ang) {
    chronoPINVOKE.ChQuaternionf_SetFromCardanAnglesXYZ(swigCPtr, ChVector3f.getCPtr(ang));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3f GetCardanAnglesXYZ() {
    ChVector3f ret = new ChVector3f(chronoPINVOKE.ChQuaternionf_GetCardanAnglesXYZ(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDtFromAngVelAbs(ChVector3f w, ChQuaternionf q) {
    chronoPINVOKE.ChQuaternionf_SetDtFromAngVelAbs(swigCPtr, ChVector3f.getCPtr(w), ChQuaternionf.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDtFromAngVelRel(ChVector3f w, ChQuaternionf q) {
    chronoPINVOKE.ChQuaternionf_SetDtFromAngVelRel(swigCPtr, ChVector3f.getCPtr(w), ChQuaternionf.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAngVelAbs(ChVector3f w, ChQuaternionf q) {
    chronoPINVOKE.ChQuaternionf_GetAngVelAbs(swigCPtr, ChVector3f.getCPtr(w), ChQuaternionf.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAngVelRel(ChVector3f w, ChQuaternionf q) {
    chronoPINVOKE.ChQuaternionf_GetAngVelRel(swigCPtr, ChVector3f.getCPtr(w), ChQuaternionf.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDt2FromAngAccAbs(ChVector3f a, ChQuaternionf q, ChQuaternionf q_dt) {
    chronoPINVOKE.ChQuaternionf_SetDt2FromAngAccAbs(swigCPtr, ChVector3f.getCPtr(a), ChQuaternionf.getCPtr(q), ChQuaternionf.getCPtr(q_dt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDt2FromAngAccRel(ChVector3f a, ChQuaternionf q, ChQuaternionf q_dt) {
    chronoPINVOKE.ChQuaternionf_SetDt2FromAngAccRel(swigCPtr, ChVector3f.getCPtr(a), ChQuaternionf.getCPtr(q), ChQuaternionf.getCPtr(q_dt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDtFromAngleAxis(ChQuaternionf q, float angle_dt, ChVector3f axis) {
    chronoPINVOKE.ChQuaternionf_SetDtFromAngleAxis(swigCPtr, ChQuaternionf.getCPtr(q), angle_dt, ChVector3f.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDt2FromAngleAxis(ChQuaternionf q, ChQuaternionf q_dt, float angle_dtdt, ChVector3f axis) {
    chronoPINVOKE.ChQuaternionf_SetDt2FromAngleAxis(swigCPtr, ChQuaternionf.getCPtr(q), ChQuaternionf.getCPtr(q_dt), angle_dtdt, ChVector3f.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChQuaternionf_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChQuaternionf_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float e0 {
    set {
      chronoPINVOKE.ChQuaternionf_e0_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChQuaternionf_e0_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float e1 {
    set {
      chronoPINVOKE.ChQuaternionf_e1_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChQuaternionf_e1_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float e2 {
    set {
      chronoPINVOKE.ChQuaternionf_e2_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChQuaternionf_e2_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float e3 {
    set {
      chronoPINVOKE.ChQuaternionf_e3_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChQuaternionf_e3_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
