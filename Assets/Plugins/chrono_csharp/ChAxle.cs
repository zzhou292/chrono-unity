//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChAxle : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChAxle(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChAxle obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChAxle() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_ChAxle(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChAxle() : this(chrono_vehiclePINVOKE.new_ChAxle(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetOutput(bool state) {
    chrono_vehiclePINVOKE.ChAxle_SetOutput(swigCPtr, state);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChChassis chassis, ChSubchassis subchassis, ChSteering steering, ChVector3d susp_location, ChVector3d arb_location, double wheel_separation, double left_ang_vel, double right_ang_vel) {
    chrono_vehiclePINVOKE.ChAxle_Initialize__SWIG_0(swigCPtr, ChChassis.getCPtr(chassis), ChSubchassis.getCPtr(subchassis), ChSteering.getCPtr(steering), ChVector3d.getCPtr(susp_location), ChVector3d.getCPtr(arb_location), wheel_separation, left_ang_vel, right_ang_vel);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChChassis chassis, ChSubchassis subchassis, ChSteering steering, ChVector3d susp_location, ChVector3d arb_location, double wheel_separation, double left_ang_vel) {
    chrono_vehiclePINVOKE.ChAxle_Initialize__SWIG_1(swigCPtr, ChChassis.getCPtr(chassis), ChSubchassis.getCPtr(subchassis), ChSteering.getCPtr(steering), ChVector3d.getCPtr(susp_location), ChVector3d.getCPtr(arb_location), wheel_separation, left_ang_vel);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChChassis chassis, ChSubchassis subchassis, ChSteering steering, ChVector3d susp_location, ChVector3d arb_location, double wheel_separation) {
    chrono_vehiclePINVOKE.ChAxle_Initialize__SWIG_2(swigCPtr, ChChassis.getCPtr(chassis), ChSubchassis.getCPtr(subchassis), ChSteering.getCPtr(steering), ChVector3d.getCPtr(susp_location), ChVector3d.getCPtr(arb_location), wheel_separation);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChChassis chassis, ChSubchassis subchassis, ChSteering steering, ChVector3d susp_location, ChVector3d arb_location) {
    chrono_vehiclePINVOKE.ChAxle_Initialize__SWIG_3(swigCPtr, ChChassis.getCPtr(chassis), ChSubchassis.getCPtr(subchassis), ChSteering.getCPtr(steering), ChVector3d.getCPtr(susp_location), ChVector3d.getCPtr(arb_location));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(double time, DriverInputs driver_inputs) {
    chrono_vehiclePINVOKE.ChAxle_Synchronize(swigCPtr, time, DriverInputs.getCPtr(driver_inputs));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Advance(double step) {
    chrono_vehiclePINVOKE.ChAxle_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChWheelList GetWheels() {
    ChWheelList ret = new ChWheelList(chrono_vehiclePINVOKE.ChAxle_GetWheels(swigCPtr), false);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWheel GetWheel(VehicleSide side, WheelLocation location) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChAxle_GetWheel__SWIG_0(swigCPtr, (int)side, (int)location);
    ChWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChWheel(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWheel GetWheel(VehicleSide side) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChAxle_GetWheel__SWIG_1(swigCPtr, (int)side);
    ChWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChWheel(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBrake GetBrake(VehicleSide side) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChAxle_GetBrake(swigCPtr, (int)side);
    ChBrake ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBrake(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChSuspension m_suspension {
    set {
      chrono_vehiclePINVOKE.ChAxle_m_suspension_set(swigCPtr, ChSuspension.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChAxle_m_suspension_get(swigCPtr);
      ChSuspension ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSuspension(cPtr, true);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChBrake m_brake_left {
    set {
      chrono_vehiclePINVOKE.ChAxle_m_brake_left_set(swigCPtr, ChBrake.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChAxle_m_brake_left_get(swigCPtr);
      ChBrake ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBrake(cPtr, true);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChBrake m_brake_right {
    set {
      chrono_vehiclePINVOKE.ChAxle_m_brake_right_set(swigCPtr, ChBrake.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChAxle_m_brake_right_get(swigCPtr);
      ChBrake ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBrake(cPtr, true);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__shared_ptrT_ChAntirollBar_t m_antirollbar {
    set {
      chrono_vehiclePINVOKE.ChAxle_m_antirollbar_set(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChAntirollBar_t.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChAxle_m_antirollbar_get(swigCPtr);
      SWIGTYPE_p_std__shared_ptrT_ChAntirollBar_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__shared_ptrT_ChAntirollBar_t(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChWheelList m_wheels {
    set {
      chrono_vehiclePINVOKE.ChAxle_m_wheels_set(swigCPtr, ChWheelList.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChAxle_m_wheels_get(swigCPtr);
      ChWheelList ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChWheelList(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
