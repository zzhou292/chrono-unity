//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionPosition : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChFunctionPosition(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionPosition obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChFunctionPosition() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChFunctionPosition(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChFunctionPosition() : this(chronoPINVOKE.new_ChFunctionPosition__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public ChFunctionPosition(ChFunctionPosition other) : this(chronoPINVOKE.new_ChFunctionPosition__SWIG_1(ChFunctionPosition.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual ChVector3d GetPos(double s) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFunctionPosition_GetPos(swigCPtr, s), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetLinVel(double s) {
    ChVector3d ret = new ChVector3d((SwigDerivedClassHasMethod("GetLinVel", swigMethodTypes1) ? chronoPINVOKE.ChFunctionPosition_GetLinVelSwigExplicitChFunctionPosition(swigCPtr, s) : chronoPINVOKE.ChFunctionPosition_GetLinVel(swigCPtr, s)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetLinAcc(double s) {
    ChVector3d ret = new ChVector3d((SwigDerivedClassHasMethod("GetLinAcc", swigMethodTypes2) ? chronoPINVOKE.ChFunctionPosition_GetLinAccSwigExplicitChFunctionPosition(swigCPtr, s) : chronoPINVOKE.ChFunctionPosition_GetLinAcc(swigCPtr, s)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Update(double t) {
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes3)) chronoPINVOKE.ChFunctionPosition_UpdateSwigExplicitChFunctionPosition(swigCPtr, t); else chronoPINVOKE.ChFunctionPosition_Update(swigCPtr, t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes4)) chronoPINVOKE.ChFunctionPosition_ArchiveOutSwigExplicitChFunctionPosition(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out)); else chronoPINVOKE.ChFunctionPosition_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes5)) chronoPINVOKE.ChFunctionPosition_ArchiveInSwigExplicitChFunctionPosition(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in)); else chronoPINVOKE.ChFunctionPosition_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetPos", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChFunctionPosition_0(SwigDirectorMethodGetPos);
    if (SwigDerivedClassHasMethod("GetLinVel", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChFunctionPosition_1(SwigDirectorMethodGetLinVel);
    if (SwigDerivedClassHasMethod("GetLinAcc", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChFunctionPosition_2(SwigDirectorMethodGetLinAcc);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChFunctionPosition_3(SwigDirectorMethodUpdate);
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChFunctionPosition_4(SwigDirectorMethodArchiveOut);
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChFunctionPosition_5(SwigDirectorMethodArchiveIn);
    chronoPINVOKE.ChFunctionPosition_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChFunctionPosition));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorMethodGetPos(double s) {
    return ChVector3d.getCPtr(GetPos(s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGetLinVel(double s) {
    return ChVector3d.getCPtr(GetLinVel(s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGetLinAcc(double s) {
    return ChVector3d.getCPtr(GetLinAcc(s)).Handle;
  }

  private void SwigDirectorMethodUpdate(double t) {
    Update(t);
  }

  private void SwigDirectorMethodArchiveOut(global::System.IntPtr archive_out) {
    ArchiveOut(new SWIGTYPE_p_chrono__ChArchiveOut(archive_out, false));
  }

  private void SwigDirectorMethodArchiveIn(global::System.IntPtr archive_in) {
    ArchiveIn(new SWIGTYPE_p_chrono__ChArchiveIn(archive_in, false));
  }

  public delegate global::System.IntPtr SwigDelegateChFunctionPosition_0(double s);
  public delegate global::System.IntPtr SwigDelegateChFunctionPosition_1(double s);
  public delegate global::System.IntPtr SwigDelegateChFunctionPosition_2(double s);
  public delegate void SwigDelegateChFunctionPosition_3(double t);
  public delegate void SwigDelegateChFunctionPosition_4(global::System.IntPtr archive_out);
  public delegate void SwigDelegateChFunctionPosition_5(global::System.IntPtr archive_in);

  private SwigDelegateChFunctionPosition_0 swigDelegate0;
  private SwigDelegateChFunctionPosition_1 swigDelegate1;
  private SwigDelegateChFunctionPosition_2 swigDelegate2;
  private SwigDelegateChFunctionPosition_3 swigDelegate3;
  private SwigDelegateChFunctionPosition_4 swigDelegate4;
  private SwigDelegateChFunctionPosition_5 swigDelegate5;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveOut) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveIn) };
}
