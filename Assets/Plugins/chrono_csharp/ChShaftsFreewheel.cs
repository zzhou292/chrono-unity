//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChShaftsFreewheel : ChShaftsCouple {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChShaftsFreewheel(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChShaftsFreewheel_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChShaftsFreewheel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChShaftsFreewheel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChShaftsFreewheel() : this(chronoPINVOKE.new_ChShaftsFreewheel__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChShaftsFreewheel(ChShaftsFreewheel other) : this(chronoPINVOKE.new_ChShaftsFreewheel__SWIG_1(ChShaftsFreewheel.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetNumConstraintsBilateral() {
    uint ret = chronoPINVOKE.ChShaftsFreewheel_GetNumConstraintsBilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRatchetingModeStep(double mt) {
    chronoPINVOKE.ChShaftsFreewheel_SetRatchetingModeStep(swigCPtr, mt);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRatchetingModeTeeth(int n_teeth) {
    chronoPINVOKE.ChShaftsFreewheel_SetRatchetingModeTeeth(swigCPtr, n_teeth);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetJammingMode() {
    chronoPINVOKE.ChShaftsFreewheel_SetJammingMode(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRatchetingStep() {
    double ret = chronoPINVOKE.ChShaftsFreewheel_GetRatchetingStep(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsModeJamming() {
    bool ret = chronoPINVOKE.ChShaftsFreewheel_IsModeJamming(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsModeRatcheting() {
    bool ret = chronoPINVOKE.ChShaftsFreewheel_IsModeRatcheting(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFreeForward() {
    chronoPINVOKE.ChShaftsFreewheel_SetFreeForward(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFreeBackward() {
    chronoPINVOKE.ChShaftsFreewheel_SetFreeBackward(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsFreeForward() {
    bool ret = chronoPINVOKE.ChShaftsFreewheel_IsFreeForward(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetPhase(double p) {
    chronoPINVOKE.ChShaftsFreewheel_SetPhase(swigCPtr, p);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetPhase() {
    double ret = chronoPINVOKE.ChShaftsFreewheel_GetPhase(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetReaction1() {
    double ret = chronoPINVOKE.ChShaftsFreewheel_GetReaction1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetReaction2() {
    double ret = chronoPINVOKE.ChShaftsFreewheel_GetReaction2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetConstraintViolation() {
    double ret = chronoPINVOKE.ChShaftsFreewheel_GetConstraintViolation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetMaxReachedRelativeRotation() {
    double ret = chronoPINVOKE.ChShaftsFreewheel_GetMaxReachedRelativeRotation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetCurrentTeethVane() {
    double ret = chronoPINVOKE.ChShaftsFreewheel_GetCurrentTeethVane(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Initialize(ChShaft shaft_1, ChShaft shaft_2) {
    bool ret = chronoPINVOKE.ChShaftsFreewheel_Initialize(swigCPtr, ChShaft.getCPtr(shaft_1), ChShaft.getCPtr(shaft_2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChShaftsFreewheel_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChShaftsFreewheel_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
