//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChVisualShapeTriangleMesh : ChVisualShape {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChVisualShapeTriangleMesh(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChVisualShapeTriangleMesh_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChVisualShapeTriangleMesh obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChVisualShapeTriangleMesh(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChVisualShapeTriangleMesh() : this(chronoPINVOKE.new_ChVisualShapeTriangleMesh(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTriangleMeshConnected GetMesh() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChVisualShapeTriangleMesh_GetMesh(swigCPtr);
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMesh(ChTriangleMeshConnected mesh, bool load_materials) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_SetMesh__SWIG_0(swigCPtr, ChTriangleMeshConnected.getCPtr(mesh), load_materials);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMesh(ChTriangleMeshConnected mesh) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_SetMesh__SWIG_1(swigCPtr, ChTriangleMeshConnected.getCPtr(mesh));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsWireframe() {
    bool ret = chronoPINVOKE.ChVisualShapeTriangleMesh_IsWireframe(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetWireframe(bool mw) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_SetWireframe(swigCPtr, mw);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsBackfaceCull() {
    bool ret = chronoPINVOKE.ChVisualShapeTriangleMesh_IsBackfaceCull(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetBackfaceCull(bool mbc) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_SetBackfaceCull(swigCPtr, mbc);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetName() {
    string ret = chronoPINVOKE.ChVisualShapeTriangleMesh_GetName(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetName(string mname) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_SetName(swigCPtr, mname);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetScale() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChVisualShapeTriangleMesh_GetScale(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetScale(ChVector3d mscale) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_SetScale(swigCPtr, ChVector3d.getCPtr(mscale));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFixedConnectivity() {
    chronoPINVOKE.ChVisualShapeTriangleMesh_SetFixedConnectivity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool FixedConnectivity() {
    bool ret = chronoPINVOKE.ChVisualShapeTriangleMesh_FixedConnectivity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetModifiedVertices(SWIGTYPE_p_std__vectorT_int_t vertices) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_SetModifiedVertices(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(vertices));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__vectorT_int_t GetModifiedVertices() {
    SWIGTYPE_p_std__vectorT_int_t ret = new SWIGTYPE_p_std__vectorT_int_t(chronoPINVOKE.ChVisualShapeTriangleMesh_GetModifiedVertices(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChAABB GetBoundingBox() {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChVisualShapeTriangleMesh_GetBoundingBox(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChVisualShapeTriangleMesh_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
