//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionBSpline : ChFunction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunctionBSpline(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChFunctionBSpline_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionBSpline obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChFunctionBSpline(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunctionBSpline(int p, ChVectorDynamicd cpoints, ChVectorDynamicd knots) : this(chronoPINVOKE.new_ChFunctionBSpline__SWIG_0(p, ChVectorDynamicd.getCPtr(cpoints), ChVectorDynamicd.getCPtr(knots)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionBSpline(int p, ChVectorDynamicd cpoints) : this(chronoPINVOKE.new_ChFunctionBSpline__SWIG_1(p, ChVectorDynamicd.getCPtr(cpoints)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionBSpline(int p, ChVectorDynamicd x_interp, ChVectorDynamicd y_dN_interp, ChVectorDynamicI der_order, ChVectorDynamicd knots) : this(chronoPINVOKE.new_ChFunctionBSpline__SWIG_2(p, ChVectorDynamicd.getCPtr(x_interp), ChVectorDynamicd.getCPtr(y_dN_interp), ChVectorDynamicI.getCPtr(der_order), ChVectorDynamicd.getCPtr(knots)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionBSpline(int p, ChVectorDynamicd x_interp, ChVectorDynamicd y_dN_interp, ChVectorDynamicI der_order) : this(chronoPINVOKE.new_ChFunctionBSpline__SWIG_3(p, ChVectorDynamicd.getCPtr(x_interp), ChVectorDynamicd.getCPtr(y_dN_interp), ChVectorDynamicI.getCPtr(der_order)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionBSpline(ChFunctionBSpline other) : this(chronoPINVOKE.new_ChFunctionBSpline__SWIG_4(ChFunctionBSpline.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Setup(int p, ChVectorDynamicd cpoints, ChVectorDynamicd knots) {
    chronoPINVOKE.ChFunctionBSpline_Setup(swigCPtr, p, ChVectorDynamicd.getCPtr(cpoints), ChVectorDynamicd.getCPtr(knots));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChFunction.Type GetFunctionType() {
    ChFunction.Type ret = (ChFunction.Type)chronoPINVOKE.ChFunctionBSpline_GetFunctionType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetOrder() {
    int ret = chronoPINVOKE.ChFunctionBSpline_GetOrder(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetControlPoints() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChFunctionBSpline_GetControlPoints(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetControlPointsAbscissae() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChFunctionBSpline_GetControlPointsAbscissae(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetKnots() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChFunctionBSpline_GetKnots(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChBasisToolsBSpline_t GetBasisTool() {
    SWIGTYPE_p_std__shared_ptrT_ChBasisToolsBSpline_t ret = new SWIGTYPE_p_std__shared_ptrT_ChBasisToolsBSpline_t(chronoPINVOKE.ChFunctionBSpline_GetBasisTool(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetVal(double x) {
    double ret = chronoPINVOKE.ChFunctionBSpline_GetVal(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetDer(double x) {
    double ret = chronoPINVOKE.ChFunctionBSpline_GetDer(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetDer2(double x) {
    double ret = chronoPINVOKE.ChFunctionBSpline_GetDer2(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetDer3(double x) {
    double ret = chronoPINVOKE.ChFunctionBSpline_GetDer3(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ApplyInterpolationConstraints(int p, ChVectorDynamicd x_interp, ChVectorDynamicd y_dN_interp, ChVectorDynamicI der_order, ChVectorDynamicd knots) {
    chronoPINVOKE.ChFunctionBSpline_ApplyInterpolationConstraints__SWIG_0(swigCPtr, p, ChVectorDynamicd.getCPtr(x_interp), ChVectorDynamicd.getCPtr(y_dN_interp), ChVectorDynamicI.getCPtr(der_order), ChVectorDynamicd.getCPtr(knots));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ApplyInterpolationConstraints(int p, ChVectorDynamicd x_interp, ChVectorDynamicd y_dN_interp, ChVectorDynamicI der_order) {
    chronoPINVOKE.ChFunctionBSpline_ApplyInterpolationConstraints__SWIG_1(swigCPtr, p, ChVectorDynamicd.getCPtr(x_interp), ChVectorDynamicd.getCPtr(y_dN_interp), ChVectorDynamicI.getCPtr(der_order));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChFunctionBSpline_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChFunctionBSpline_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
