//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class RSDATorqueFunctor : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RSDATorqueFunctor(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(RSDATorqueFunctor obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~RSDATorqueFunctor() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_RSDATorqueFunctor(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual double evaluate(double time, double rest_angle, double angle, double vel, ChLinkRSDA link) {
    double ret = (SwigDerivedClassHasMethod("evaluate", swigMethodTypes0) ? chronoPINVOKE.RSDATorqueFunctor_evaluateSwigExplicitRSDATorqueFunctor(swigCPtr, time, rest_angle, angle, vel, ChLinkRSDA.getCPtr(link)) : chronoPINVOKE.RSDATorqueFunctor_evaluate(swigCPtr, time, rest_angle, angle, vel, ChLinkRSDA.getCPtr(link)));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public RSDATorqueFunctor() : this(chronoPINVOKE.new_RSDATorqueFunctor(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("evaluate", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateRSDATorqueFunctor_0(SwigDirectorMethodevaluate);
    chronoPINVOKE.RSDATorqueFunctor_director_connect(swigCPtr, swigDelegate0);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(RSDATorqueFunctor));
    return hasDerivedMethod;
  }

  private double SwigDirectorMethodevaluate(double time, double rest_angle, double angle, double vel, global::System.IntPtr link) {
    return evaluate(time, rest_angle, angle, vel, (link == global::System.IntPtr.Zero) ? null : new ChLinkRSDA(link, true));
  }

  public delegate double SwigDelegateRSDATorqueFunctor_0(double time, double rest_angle, double angle, double vel, global::System.IntPtr link);

  private SwigDelegateRSDATorqueFunctor_0 swigDelegate0;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(double), typeof(ChLinkRSDA) };
}
