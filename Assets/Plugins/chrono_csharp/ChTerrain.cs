//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTerrain : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChTerrain(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTerrain obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChTerrain() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_ChTerrain(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChTerrain() : this(chrono_vehiclePINVOKE.new_ChTerrain(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Synchronize(double time) {
    chrono_vehiclePINVOKE.ChTerrain_Synchronize(swigCPtr, time);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Advance(double step) {
    chrono_vehiclePINVOKE.ChTerrain_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetHeight(ChVector3d loc) {
    double ret = chrono_vehiclePINVOKE.ChTerrain_GetHeight(swigCPtr, ChVector3d.getCPtr(loc));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetNormal(ChVector3d loc) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTerrain_GetNormal(swigCPtr, ChVector3d.getCPtr(loc)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual float GetCoefficientFriction(ChVector3d loc) {
    float ret = chrono_vehiclePINVOKE.ChTerrain_GetCoefficientFriction(swigCPtr, ChVector3d.getCPtr(loc));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void GetProperties(ChVector3d loc, SWIGTYPE_p_double height, ChVector3d normal, SWIGTYPE_p_float friction) {
    chrono_vehiclePINVOKE.ChTerrain_GetProperties(swigCPtr, ChVector3d.getCPtr(loc), SWIGTYPE_p_double.getCPtr(height), ChVector3d.getCPtr(normal), SWIGTYPE_p_float.getCPtr(friction));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterHeightFunctor(SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTerrain__HeightFunctor_t functor) {
    chrono_vehiclePINVOKE.ChTerrain_RegisterHeightFunctor(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTerrain__HeightFunctor_t.getCPtr(functor));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterNormalFunctor(SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTerrain__NormalFunctor_t functor) {
    chrono_vehiclePINVOKE.ChTerrain_RegisterNormalFunctor(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTerrain__NormalFunctor_t.getCPtr(functor));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterFrictionFunctor(SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTerrain__FrictionFunctor_t functor) {
    chrono_vehiclePINVOKE.ChTerrain_RegisterFrictionFunctor(swigCPtr, SWIGTYPE_p_std__shared_ptrT_chrono__vehicle__ChTerrain__FrictionFunctor_t.getCPtr(functor));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
