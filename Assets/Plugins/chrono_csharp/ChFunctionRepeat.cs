//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionRepeat : ChFunction {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunctionRepeat(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChFunctionRepeat_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionRepeat obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChFunctionRepeat(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunctionRepeat(ChFunction func, double start, double length, double phase) : this(chronoPINVOKE.new_ChFunctionRepeat__SWIG_0(ChFunction.getCPtr(func), start, length, phase), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionRepeat(ChFunction func, double start, double length) : this(chronoPINVOKE.new_ChFunctionRepeat__SWIG_1(ChFunction.getCPtr(func), start, length), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionRepeat(ChFunction func, double start) : this(chronoPINVOKE.new_ChFunctionRepeat__SWIG_2(ChFunction.getCPtr(func), start), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionRepeat(ChFunction func) : this(chronoPINVOKE.new_ChFunctionRepeat__SWIG_3(ChFunction.getCPtr(func)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionRepeat(ChFunctionRepeat other) : this(chronoPINVOKE.new_ChFunctionRepeat__SWIG_4(ChFunctionRepeat.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChFunction.Type GetFunctionType() {
    ChFunction.Type ret = (ChFunction.Type)chronoPINVOKE.ChFunctionRepeat_GetFunctionType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetVal(double x) {
    double ret = chronoPINVOKE.ChFunctionRepeat_GetVal(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSliceStart(double start) {
    chronoPINVOKE.ChFunctionRepeat_SetSliceStart(swigCPtr, start);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSliceStart() {
    double ret = chronoPINVOKE.ChFunctionRepeat_GetSliceStart(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSliceWidth(double length) {
    chronoPINVOKE.ChFunctionRepeat_SetSliceWidth(swigCPtr, length);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSliceWidth() {
    double ret = chronoPINVOKE.ChFunctionRepeat_GetSliceWidth(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSliceShift(double phase) {
    chronoPINVOKE.ChFunctionRepeat_SetSliceShift(swigCPtr, phase);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSliceShift() {
    double ret = chronoPINVOKE.ChFunctionRepeat_GetSliceShift(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRepeatedFunction(ChFunction func) {
    chronoPINVOKE.ChFunctionRepeat_SetRepeatedFunction(swigCPtr, ChFunction.getCPtr(func));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetRepeatedFunction() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionRepeat_GetRepeatedFunction(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive) {
    chronoPINVOKE.ChFunctionRepeat_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive) {
    chronoPINVOKE.ChFunctionRepeat_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
