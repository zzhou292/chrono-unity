//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoadBodyInertia : ChLoadCustom {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLoadBodyInertia(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLoadBodyInertia_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoadBodyInertia obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLoadBodyInertia(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLoadBodyInertia(ChBody body, ChVector3d offset, double m, ChVector3d IXX, ChVector3d IXY) : this(chronoPINVOKE.new_ChLoadBodyInertia__SWIG_0(ChBody.getCPtr(body), ChVector3d.getCPtr(offset), m, ChVector3d.getCPtr(IXX), ChVector3d.getCPtr(IXY)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLoadBodyInertia(ChBody body, ChVector3d offset, double m, ChVector3d IXX) : this(chronoPINVOKE.new_ChLoadBodyInertia__SWIG_1(ChBody.getCPtr(body), ChVector3d.getCPtr(offset), m, ChVector3d.getCPtr(IXX)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLoadBodyInertia(ChBody body, ChVector3d offset, double m) : this(chronoPINVOKE.new_ChLoadBodyInertia__SWIG_2(ChBody.getCPtr(body), ChVector3d.getCPtr(offset), m), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInertia(ChMatrix33d newXInertia) {
    chronoPINVOKE.ChLoadBodyInertia_SetInertia(swigCPtr, ChMatrix33d.getCPtr(newXInertia));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33d GetInertia() {
    ChMatrix33d ret = new ChMatrix33d(chronoPINVOKE.ChLoadBodyInertia_GetInertia(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInertiaXX(ChVector3d iner) {
    chronoPINVOKE.ChLoadBodyInertia_SetInertiaXX(swigCPtr, ChVector3d.getCPtr(iner));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetInertiaXX() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLoadBodyInertia_GetInertiaXX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetInertiaXY(ChVector3d iner) {
    chronoPINVOKE.ChLoadBodyInertia_SetInertiaXY(swigCPtr, ChVector3d.getCPtr(iner));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetInertiaXY() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLoadBodyInertia_GetInertiaXY(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ComputeQ(ChState state_x, ChStateDelta state_w) {
    chronoPINVOKE.ChLoadBodyInertia_ComputeQ(swigCPtr, ChState.getCPtr(state_x), ChStateDelta.getCPtr(state_w));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadIntLoadResidual_Mv(ChVectorDynamicd R, ChVectorDynamicd w, double c) {
    chronoPINVOKE.ChLoadBodyInertia_LoadIntLoadResidual_Mv(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
