//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChParticleProcessEventRemove : ChParticleProcessEvent {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChParticleProcessEventRemove(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChParticleProcessEventRemove_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChParticleProcessEventRemove obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChParticleProcessEventRemove(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public override void ParticleProcessEvent(ChBody mbody, ChSystem msystem, ChParticleEventTrigger mprocessor) {
    chronoPINVOKE.ChParticleProcessEventRemove_ParticleProcessEvent(swigCPtr, ChBody.getCPtr(mbody), ChSystem.getCPtr(msystem), ChParticleEventTrigger.getCPtr(mprocessor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetupPreProcess(ChSystem msystem) {
    chronoPINVOKE.ChParticleProcessEventRemove_SetupPreProcess(swigCPtr, ChSystem.getCPtr(msystem));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetupPostProcess(ChSystem msystem) {
    chronoPINVOKE.ChParticleProcessEventRemove_SetupPostProcess(swigCPtr, ChSystem.getCPtr(msystem));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChParticleProcessEventRemove() : this(chronoPINVOKE.new_ChParticleProcessEventRemove(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
