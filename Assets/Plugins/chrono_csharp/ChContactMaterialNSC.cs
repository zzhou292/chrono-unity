//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChContactMaterialNSC : ChContactMaterial {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChContactMaterialNSC(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChContactMaterialNSC_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChContactMaterialNSC obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChContactMaterialNSC(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChContactMaterialNSC() : this(chronoPINVOKE.new_ChContactMaterialNSC__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChContactMaterialNSC(ChContactMaterialNSC other) : this(chronoPINVOKE.new_ChContactMaterialNSC__SWIG_1(ChContactMaterialNSC.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChContactMaterial Clone() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChContactMaterialNSC_Clone(swigCPtr);
    ChContactMaterialNSC ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactMaterialNSC(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChContactMethod GetContactMethod() {
    ChContactMethod ret = (ChContactMethod)chronoPINVOKE.ChContactMaterialNSC_GetContactMethod(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public float GetCohesion() {
    float ret = chronoPINVOKE.ChContactMaterialNSC_GetCohesion(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCohesion(float mval) {
    chronoPINVOKE.ChContactMaterialNSC_SetCohesion(swigCPtr, mval);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetDampingF() {
    float ret = chronoPINVOKE.ChContactMaterialNSC_GetDampingF(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDampingF(float mval) {
    chronoPINVOKE.ChContactMaterialNSC_SetDampingF(swigCPtr, mval);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetCompliance() {
    float ret = chronoPINVOKE.ChContactMaterialNSC_GetCompliance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCompliance(float mval) {
    chronoPINVOKE.ChContactMaterialNSC_SetCompliance(swigCPtr, mval);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetComplianceT() {
    float ret = chronoPINVOKE.ChContactMaterialNSC_GetComplianceT(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetComplianceT(float mval) {
    chronoPINVOKE.ChContactMaterialNSC_SetComplianceT(swigCPtr, mval);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetComplianceRolling() {
    float ret = chronoPINVOKE.ChContactMaterialNSC_GetComplianceRolling(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetComplianceRolling(float mval) {
    chronoPINVOKE.ChContactMaterialNSC_SetComplianceRolling(swigCPtr, mval);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetComplianceSpinning() {
    float ret = chronoPINVOKE.ChContactMaterialNSC_GetComplianceSpinning(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetComplianceSpinning(float mval) {
    chronoPINVOKE.ChContactMaterialNSC_SetComplianceSpinning(swigCPtr, mval);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChContactMaterialNSC_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChContactMaterialNSC_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float cohesion {
    set {
      chronoPINVOKE.ChContactMaterialNSC_cohesion_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChContactMaterialNSC_cohesion_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float dampingf {
    set {
      chronoPINVOKE.ChContactMaterialNSC_dampingf_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChContactMaterialNSC_dampingf_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float compliance {
    set {
      chronoPINVOKE.ChContactMaterialNSC_compliance_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChContactMaterialNSC_compliance_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float complianceT {
    set {
      chronoPINVOKE.ChContactMaterialNSC_complianceT_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChContactMaterialNSC_complianceT_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float complianceRoll {
    set {
      chronoPINVOKE.ChContactMaterialNSC_complianceRoll_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChContactMaterialNSC_complianceRoll_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public float complianceSpin {
    set {
      chronoPINVOKE.ChContactMaterialNSC_complianceSpin_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      float ret = chronoPINVOKE.ChContactMaterialNSC_complianceSpin_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
