//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTire : ChPart {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTire(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChTire_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTire obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChTire(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public void SetStepsize(double val) {
    chrono_vehiclePINVOKE.ChTire_SetStepsize(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetStepsize() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetStepsize(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCollisionType(ChTire.CollisionType collision_type) {
    chrono_vehiclePINVOKE.ChTire_SetCollisionType(swigCPtr, (int)collision_type);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContactSurfaceType(ChTire.ContactSurfaceType type, double dim, int collision_family) {
    chrono_vehiclePINVOKE.ChTire_SetContactSurfaceType__SWIG_0(swigCPtr, (int)type, dim, collision_family);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContactSurfaceType(ChTire.ContactSurfaceType type, double dim) {
    chrono_vehiclePINVOKE.ChTire_SetContactSurfaceType__SWIG_1(swigCPtr, (int)type, dim);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContactSurfaceType(ChTire.ContactSurfaceType type) {
    chrono_vehiclePINVOKE.ChTire_SetContactSurfaceType__SWIG_2(swigCPtr, (int)type);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPressure(double pressure) {
    chrono_vehiclePINVOKE.ChTire_SetPressure(swigCPtr, pressure);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetPressure() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetPressure(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetRadius() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetRadius(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetWidth() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetWidth(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTireMass() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetTireMass(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChVector3d GetTireInertia() {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTire_GetTireInertia(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TerrainForce ReportTireForce(ChTerrain terrain) {
    TerrainForce ret = new TerrainForce(chrono_vehiclePINVOKE.ChTire_ReportTireForce(swigCPtr, ChTerrain.getCPtr(terrain)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual TerrainForce ReportTireForceLocal(ChTerrain terrain, ChCoordsysd tire_frame) {
    TerrainForce ret = new TerrainForce(chrono_vehiclePINVOKE.ChTire_ReportTireForceLocal(swigCPtr, ChTerrain.getCPtr(terrain), ChCoordsysd.getCPtr(tire_frame)), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSlipAngle() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetSlipAngle(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetLongitudinalSlip() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetLongitudinalSlip(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetCamberAngle() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetCamberAngle(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d EstimateInertia(double tire_width, double aspect_ratio, double rim_diameter, double tire_mass, double t_factor) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTire_EstimateInertia__SWIG_0(tire_width, aspect_ratio, rim_diameter, tire_mass, t_factor), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVector3d EstimateInertia(double tire_width, double aspect_ratio, double rim_diameter, double tire_mass) {
    ChVector3d ret = new ChVector3d(chrono_vehiclePINVOKE.ChTire_EstimateInertia__SWIG_1(tire_width, aspect_ratio, rim_diameter, tire_mass), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDeflection() {
    double ret = chrono_vehiclePINVOKE.ChTire_GetDeflection(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public string GetMeshFilename() {
    string ret = chrono_vehiclePINVOKE.ChTire_GetMeshFilename(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWheel GetWheel() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChTire_GetWheel(swigCPtr);
    ChWheel ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChWheel(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void Initialize(ChWheel wheel) {
    chrono_vehiclePINVOKE.ChTire_Initialize(swigCPtr, ChWheel.getCPtr(wheel));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Synchronize(double time, ChTerrain terrain) {
    chrono_vehiclePINVOKE.ChTire_Synchronize(swigCPtr, time, ChTerrain.getCPtr(terrain));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Advance(double step) {
    chrono_vehiclePINVOKE.ChTire_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public enum CollisionType {
    SINGLE_POINT,
    FOUR_POINTS,
    ENVELOPE
  }

  public enum ContactSurfaceType {
    NODE_CLOUD,
    TRIANGLE_MESH
  }

}
