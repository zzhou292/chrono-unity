//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChCollisionShape : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChCollisionShape(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChCollisionShape obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChCollisionShape() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChCollisionShape(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChCollisionShape(ChCollisionShape.Type type) : this(chronoPINVOKE.new_ChCollisionShape__SWIG_0((int)type), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionShape() : this(chronoPINVOKE.new_ChCollisionShape__SWIG_1(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionShape(ChCollisionShape.Type type, ChContactMaterial material) : this(chronoPINVOKE.new_ChCollisionShape__SWIG_2((int)type, ChContactMaterial.getCPtr(material)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public new ChCollisionShape.Type GetType() {
    ChCollisionShape.Type ret = (ChCollisionShape.Type)chronoPINVOKE.ChCollisionShape_GetType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChContactMaterial GetMaterial() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChCollisionShape_GetMaterial(swigCPtr);
    ChContactMaterial ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactMaterial(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChContactMethod GetContactMethod() {
    ChContactMethod ret = (ChContactMethod)chronoPINVOKE.ChCollisionShape_GetContactMethod(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual ChAABB GetBoundingBox() {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChCollisionShape_GetBoundingBox(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChCollisionShape_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChCollisionShape_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum Type {
    SPHERE,
    ELLIPSOID,
    BOX,
    CYLINDER,
    CYLSHELL,
    CONVEXHULL,
    TRIANGLEMESH,
    BARREL,
    POINT,
    SEGMENT,
    TRIANGLE,
    MESHTRIANGLE,
    CAPSULE,
    CONE,
    ROUNDEDBOX,
    ROUNDEDCYL,
    TETRAHEDRON,
    PATH2D,
    SEGMENT2D,
    ARC2D,
    UNKNOWN_SHAPE
  }

}
