//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class NodeInfo : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal NodeInfo(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NodeInfo obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~NodeInfo() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chrono_vehiclePINVOKE.delete_NodeInfo(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public double sinkage {
    set {
      chrono_vehiclePINVOKE.NodeInfo_sinkage_set(swigCPtr, value);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chrono_vehiclePINVOKE.NodeInfo_sinkage_get(swigCPtr);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double sinkage_plastic {
    set {
      chrono_vehiclePINVOKE.NodeInfo_sinkage_plastic_set(swigCPtr, value);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chrono_vehiclePINVOKE.NodeInfo_sinkage_plastic_get(swigCPtr);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double sinkage_elastic {
    set {
      chrono_vehiclePINVOKE.NodeInfo_sinkage_elastic_set(swigCPtr, value);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chrono_vehiclePINVOKE.NodeInfo_sinkage_elastic_get(swigCPtr);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double sigma {
    set {
      chrono_vehiclePINVOKE.NodeInfo_sigma_set(swigCPtr, value);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chrono_vehiclePINVOKE.NodeInfo_sigma_get(swigCPtr);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double sigma_yield {
    set {
      chrono_vehiclePINVOKE.NodeInfo_sigma_yield_set(swigCPtr, value);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chrono_vehiclePINVOKE.NodeInfo_sigma_yield_get(swigCPtr);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double kshear {
    set {
      chrono_vehiclePINVOKE.NodeInfo_kshear_set(swigCPtr, value);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chrono_vehiclePINVOKE.NodeInfo_kshear_get(swigCPtr);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double tau {
    set {
      chrono_vehiclePINVOKE.NodeInfo_tau_set(swigCPtr, value);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chrono_vehiclePINVOKE.NodeInfo_tau_get(swigCPtr);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public NodeInfo() : this(chrono_vehiclePINVOKE.new_NodeInfo(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
