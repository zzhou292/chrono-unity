//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChMatrix33d : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChMatrix33d(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChMatrix33d obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChMatrix33d() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ChMatrix33d(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChMatrix33d() : this(chronoPINVOKE.new_ChMatrix33d__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33d(double val) : this(chronoPINVOKE.new_ChMatrix33d__SWIG_1(val), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33d(ChVector3d v) : this(chronoPINVOKE.new_ChMatrix33d__SWIG_2(ChVector3d.getCPtr(v)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33d(ChVector3d diag, ChVector3d off_diag) : this(chronoPINVOKE.new_ChMatrix33d__SWIG_3(ChVector3d.getCPtr(diag), ChVector3d.getCPtr(off_diag)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33d(ChQuaterniond q) : this(chronoPINVOKE.new_ChMatrix33d__SWIG_4(ChQuaterniond.getCPtr(q)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33d(double angle, ChVector3d axis) : this(chronoPINVOKE.new_ChMatrix33d__SWIG_5(angle, ChVector3d.getCPtr(axis)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMatrix33d(ChVector3d X, ChVector3d Y, ChVector3d Z) : this(chronoPINVOKE.new_ChMatrix33d__SWIG_6(ChVector3d.getCPtr(X), ChVector3d.getCPtr(Y), ChVector3d.getCPtr(Z)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromQuaternion(ChQuaterniond q) {
    chronoPINVOKE.ChMatrix33d_SetFromQuaternion(swigCPtr, ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromEulerAnglesZXZ(ChVector3d angles) {
    chronoPINVOKE.ChMatrix33d_SetFromEulerAnglesZXZ(swigCPtr, ChVector3d.getCPtr(angles));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromCardanAnglesZXY(ChVector3d angles) {
    chronoPINVOKE.ChMatrix33d_SetFromCardanAnglesZXY(swigCPtr, ChVector3d.getCPtr(angles));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromCardanAnglesZYX(ChVector3d angles) {
    chronoPINVOKE.ChMatrix33d_SetFromCardanAnglesZYX(swigCPtr, ChVector3d.getCPtr(angles));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromCardanAnglesXYZ(ChVector3d angles) {
    chronoPINVOKE.ChMatrix33d_SetFromCardanAnglesXYZ(swigCPtr, ChVector3d.getCPtr(angles));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromRodriguesParameters(ChVector3d r) {
    chronoPINVOKE.ChMatrix33d_SetFromRodriguesParameters(swigCPtr, ChVector3d.getCPtr(r));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromDirectionAxes(ChVector3d X, ChVector3d Y, ChVector3d Z) {
    chronoPINVOKE.ChMatrix33d_SetFromDirectionAxes(swigCPtr, ChVector3d.getCPtr(X), ChVector3d.getCPtr(Y), ChVector3d.getCPtr(Z));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAxisX(ChVector3d x_dir, ChVector3d y_sugg) {
    chronoPINVOKE.ChMatrix33d_SetFromAxisX__SWIG_0(swigCPtr, ChVector3d.getCPtr(x_dir), ChVector3d.getCPtr(y_sugg));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAxisX(ChVector3d x_dir) {
    chronoPINVOKE.ChMatrix33d_SetFromAxisX__SWIG_1(swigCPtr, ChVector3d.getCPtr(x_dir));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAxisY(ChVector3d y_dir, ChVector3d z_sugg) {
    chronoPINVOKE.ChMatrix33d_SetFromAxisY__SWIG_0(swigCPtr, ChVector3d.getCPtr(y_dir), ChVector3d.getCPtr(z_sugg));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAxisY(ChVector3d y_dir) {
    chronoPINVOKE.ChMatrix33d_SetFromAxisY__SWIG_1(swigCPtr, ChVector3d.getCPtr(y_dir));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAxisZ(ChVector3d z_dir, ChVector3d x_sugg) {
    chronoPINVOKE.ChMatrix33d_SetFromAxisZ__SWIG_0(swigCPtr, ChVector3d.getCPtr(z_dir), ChVector3d.getCPtr(x_sugg));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAxisZ(ChVector3d z_dir) {
    chronoPINVOKE.ChMatrix33d_SetFromAxisZ__SWIG_1(swigCPtr, ChVector3d.getCPtr(z_dir));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetAxisX() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMatrix33d_GetAxisX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAxisY() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMatrix33d_GetAxisY(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAxisZ() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMatrix33d_GetAxisZ(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetQuaternion() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChMatrix33d_GetQuaternion(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetEulerAnglesZXZ() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMatrix33d_GetEulerAnglesZXZ(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetCardanAnglesZXY() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMatrix33d_GetCardanAnglesZXY(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetCardanAnglesZYX() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMatrix33d_GetCardanAnglesZYX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetCardanAnglesXYZ() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMatrix33d_GetCardanAnglesXYZ(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetRodriguesParameters() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMatrix33d_GetRodriguesParameters(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SelfAdjointEigenSolve(ChMatrix33d evec, SWIGTYPE_p_chrono__ChVectorNT_double_3_t evals) {
    chronoPINVOKE.ChMatrix33d_SelfAdjointEigenSolve(swigCPtr, ChMatrix33d.getCPtr(evec), SWIGTYPE_p_chrono__ChVectorNT_double_3_t.getCPtr(evals));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double getitem(int i, int j) {
    double ret = chronoPINVOKE.ChMatrix33d_getitem(swigCPtr, i, j);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setitem(int i, int j, double v) {
    chronoPINVOKE.ChMatrix33d_setitem(swigCPtr, i, j, v);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetRows() {
    int ret = chronoPINVOKE.ChMatrix33d_GetRows(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetColumns() {
    int ret = chronoPINVOKE.ChMatrix33d_GetColumns(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
