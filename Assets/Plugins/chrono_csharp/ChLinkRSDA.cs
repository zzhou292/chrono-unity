//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkRSDA : ChLink {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkRSDA(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkRSDA_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkRSDA obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkRSDA(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkRSDA() : this(chronoPINVOKE.new_ChLinkRSDA__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkRSDA(ChLinkRSDA other) : this(chronoPINVOKE.new_ChLinkRSDA__SWIG_1(ChLinkRSDA.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSpringCoefficient(double k) {
    chronoPINVOKE.ChLinkRSDA_SetSpringCoefficient(swigCPtr, k);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDampingCoefficient(double r) {
    chronoPINVOKE.ChLinkRSDA_SetDampingCoefficient(swigCPtr, r);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetActuatorTorque(double t) {
    chronoPINVOKE.ChLinkRSDA_SetActuatorTorque(swigCPtr, t);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRestAngle(double rest_angle) {
    chronoPINVOKE.ChLinkRSDA_SetRestAngle(swigCPtr, rest_angle);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNumInitRevolutions(int n) {
    chronoPINVOKE.ChLinkRSDA_SetNumInitRevolutions(swigCPtr, n);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetSpringCoefficient() {
    double ret = chronoPINVOKE.ChLinkRSDA_GetSpringCoefficient(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDampingCoefficient() {
    double ret = chronoPINVOKE.ChLinkRSDA_GetDampingCoefficient(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetActuatorTorque() {
    double ret = chronoPINVOKE.ChLinkRSDA_GetActuatorTorque(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RegisterTorqueFunctor(TorqueFunctor functor) {
    chronoPINVOKE.ChLinkRSDA_RegisterTorqueFunctor__SWIG_0(swigCPtr, TorqueFunctor.getCPtr(functor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public TorqueFunctor GetTorqueFunctor() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkRSDA_GetTorqueFunctor(swigCPtr);
    TorqueFunctor ret = (cPtr == global::System.IntPtr.Zero) ? null : new TorqueFunctor(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRestAngle() {
    double ret = chronoPINVOKE.ChLinkRSDA_GetRestAngle(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAngle() {
    double ret = chronoPINVOKE.ChLinkRSDA_GetAngle(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDeformation() {
    double ret = chronoPINVOKE.ChLinkRSDA_GetDeformation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetVelocity() {
    double ret = chronoPINVOKE.ChLinkRSDA_GetVelocity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTorque() {
    double ret = chronoPINVOKE.ChLinkRSDA_GetTorque(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame1Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkRSDA_GetFrame1Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame2Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkRSDA_GetFrame2Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetVisualModelFrame(uint nclone) {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkRSDA_GetVisualModelFrame__SWIG_0(swigCPtr, nclone), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetVisualModelFrame() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkRSDA_GetVisualModelFrame__SWIG_1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initialize(ChBody body1, ChBody body2, ChFramed frame) {
    chronoPINVOKE.ChLinkRSDA_Initialize__SWIG_0(swigCPtr, ChBody.getCPtr(body1), ChBody.getCPtr(body2), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Initialize(ChBody body1, ChBody body2, bool local, ChFramed frame1, ChFramed frame2) {
    chronoPINVOKE.ChLinkRSDA_Initialize__SWIG_1(swigCPtr, ChBody.getCPtr(body1), ChBody.getCPtr(body2), local, ChFramed.getCPtr(frame1), ChFramed.getCPtr(frame2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkRSDA_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkRSDA_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RegisterTorqueFunctor(SWIGTYPE_p_std__shared_ptrT_RSDATorqueFunctor_t functor) {
    chronoPINVOKE.ChLinkRSDA_RegisterTorqueFunctor__SWIG_1(swigCPtr, SWIGTYPE_p_std__shared_ptrT_RSDATorqueFunctor_t.getCPtr(functor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
