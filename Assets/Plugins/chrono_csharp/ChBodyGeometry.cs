//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChBodyGeometry : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChBodyGeometry(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChBodyGeometry obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChBodyGeometry() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_ChBodyGeometry(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChBodyGeometry() : this(chrono_vehiclePINVOKE.new_ChBodyGeometry(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CreateVisualizationAssets(ChBody body, VisualizationType vis) {
    chrono_vehiclePINVOKE.ChBodyGeometry_CreateVisualizationAssets__SWIG_0(swigCPtr, ChBody.getCPtr(body), (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CreateVisualizationAssets(ChBody body) {
    chrono_vehiclePINVOKE.ChBodyGeometry_CreateVisualizationAssets__SWIG_1(swigCPtr, ChBody.getCPtr(body));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CreateCollisionShapes(ChBody body, int collision_family, ChContactMethod contact_method) {
    chrono_vehiclePINVOKE.ChBodyGeometry_CreateCollisionShapes(swigCPtr, ChBody.getCPtr(body), collision_family, (int)contact_method);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChVisualShape AddVisualizationCylinder(ChBody body, ChVector3d p1, ChVector3d p2, double radius, SWIGTYPE_p_std__shared_ptrT_chrono__ChVisualMaterial_t mat) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_AddVisualizationCylinder__SWIG_0(ChBody.getCPtr(body), ChVector3d.getCPtr(p1), ChVector3d.getCPtr(p2), radius, SWIGTYPE_p_std__shared_ptrT_chrono__ChVisualMaterial_t.getCPtr(mat));
    ChVisualShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShape(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChVisualShape AddVisualizationCylinder(ChBody body, ChVector3d p1, ChVector3d p2, double radius) {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_AddVisualizationCylinder__SWIG_1(ChBody.getCPtr(body), ChVector3d.getCPtr(p1), ChVector3d.getCPtr(p2), radius);
    ChVisualShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualShape(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChAABB CalculateAABB() {
    ChAABB ret = new ChAABB(chrono_vehiclePINVOKE.ChBodyGeometry_CalculateAABB(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasCollision() {
    bool ret = chrono_vehiclePINVOKE.ChBodyGeometry_HasCollision(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasVisualizationPrimitives() {
    bool ret = chrono_vehiclePINVOKE.ChBodyGeometry_HasVisualizationPrimitives(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool HasVisualizationMesh() {
    bool ret = chrono_vehiclePINVOKE.ChBodyGeometry_HasVisualizationMesh(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChContactMaterialData materials {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_materials_set(swigCPtr, vector_ChContactMaterialData.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_materials_get(swigCPtr);
      vector_ChContactMaterialData ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChContactMaterialData(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_BoxShape coll_boxes {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_coll_boxes_set(swigCPtr, vector_BoxShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_coll_boxes_get(swigCPtr);
      vector_BoxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_BoxShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_SphereShape coll_spheres {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_coll_spheres_set(swigCPtr, vector_SphereShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_coll_spheres_get(swigCPtr);
      vector_SphereShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_SphereShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_CylinderShape coll_cylinders {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_coll_cylinders_set(swigCPtr, vector_CylinderShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_coll_cylinders_get(swigCPtr);
      vector_CylinderShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_CylinderShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ConvexHullsShape coll_hulls {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_coll_hulls_set(swigCPtr, vector_ConvexHullsShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_coll_hulls_get(swigCPtr);
      vector_ConvexHullsShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ConvexHullsShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_TrimeshShape coll_meshes {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_coll_meshes_set(swigCPtr, vector_TrimeshShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_coll_meshes_get(swigCPtr);
      vector_TrimeshShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_TrimeshShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_BoxShape vis_boxes {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_vis_boxes_set(swigCPtr, vector_BoxShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_vis_boxes_get(swigCPtr);
      vector_BoxShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_BoxShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_SphereShape vis_spheres {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_vis_spheres_set(swigCPtr, vector_SphereShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_vis_spheres_get(swigCPtr);
      vector_SphereShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_SphereShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_CylinderShape vis_cylinders {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_vis_cylinders_set(swigCPtr, vector_CylinderShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_vis_cylinders_get(swigCPtr);
      vector_CylinderShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_CylinderShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_LineShape vis_lines {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_vis_lines_set(swigCPtr, vector_LineShape.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_vis_lines_get(swigCPtr);
      vector_LineShape ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_LineShape(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChColor color_boxes {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_color_boxes_set(swigCPtr, ChColor.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_color_boxes_get(swigCPtr);
      ChColor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChColor(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChColor color_spheres {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_color_spheres_set(swigCPtr, ChColor.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_color_spheres_get(swigCPtr);
      ChColor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChColor(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChColor color_cylinders {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_color_cylinders_set(swigCPtr, ChColor.getCPtr(value));
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chrono_vehiclePINVOKE.ChBodyGeometry_color_cylinders_get(swigCPtr);
      ChColor ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChColor(cPtr, false);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string vis_mesh_file {
    set {
      chrono_vehiclePINVOKE.ChBodyGeometry_vis_mesh_file_set(swigCPtr, value);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = chrono_vehiclePINVOKE.ChBodyGeometry_vis_mesh_file_get(swigCPtr);
      if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
