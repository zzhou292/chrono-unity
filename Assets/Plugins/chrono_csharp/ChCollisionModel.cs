//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChCollisionModel : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChCollisionModel(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChCollisionModel obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChCollisionModel() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChCollisionModel(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChCollisionModel() : this(chronoPINVOKE.new_ChCollisionModel__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionModel(ChCollisionModel other) : this(chronoPINVOKE.new_ChCollisionModel__SWIG_1(ChCollisionModel.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    chronoPINVOKE.ChCollisionModel_Clear(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddShape(ChCollisionShape shape, ChFramed frame) {
    chronoPINVOKE.ChCollisionModel_AddShape__SWIG_0(swigCPtr, ChCollisionShape.getCPtr(shape), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddShape(ChCollisionShape shape) {
    chronoPINVOKE.ChCollisionModel_AddShape__SWIG_1(swigCPtr, ChCollisionShape.getCPtr(shape));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddCylinder(ChContactMaterial material, double radius, ChVector3d p1, ChVector3d p2) {
    chronoPINVOKE.ChCollisionModel_AddCylinder(swigCPtr, ChContactMaterial.getCPtr(material), radius, ChVector3d.getCPtr(p1), ChVector3d.getCPtr(p2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddShapes(ChCollisionModel model, ChFramed frame) {
    chronoPINVOKE.ChCollisionModel_AddShapes__SWIG_0(swigCPtr, ChCollisionModel.getCPtr(model), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddShapes(ChCollisionModel model) {
    chronoPINVOKE.ChCollisionModel_AddShapes__SWIG_1(swigCPtr, ChCollisionModel.getCPtr(model));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContactable(ChContactable contactable) {
    chronoPINVOKE.ChCollisionModel_SetContactable(swigCPtr, ChContactable.getCPtr(contactable));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChContactable GetContactable() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChCollisionModel_GetContactable(swigCPtr);
    ChContactable ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactable(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPhysicsItem GetPhysicsItem() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChCollisionModel_GetPhysicsItem(swigCPtr);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SyncPosition() {
    chronoPINVOKE.ChCollisionModel_SyncPosition(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFamily(int family) {
    chronoPINVOKE.ChCollisionModel_SetFamily(swigCPtr, family);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetFamily() {
    int ret = chronoPINVOKE.ChCollisionModel_GetFamily(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void DisallowCollisionsWith(int family) {
    chronoPINVOKE.ChCollisionModel_DisallowCollisionsWith(swigCPtr, family);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AllowCollisionsWith(int family) {
    chronoPINVOKE.ChCollisionModel_AllowCollisionsWith(swigCPtr, family);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool CollidesWith(int family) {
    bool ret = chronoPINVOKE.ChCollisionModel_CollidesWith(swigCPtr, family);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public short GetFamilyGroup() {
    short ret = chronoPINVOKE.ChCollisionModel_GetFamilyGroup(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFamilyGroup(short group) {
    chronoPINVOKE.ChCollisionModel_SetFamilyGroup(swigCPtr, group);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public short GetFamilyMask() {
    short ret = chronoPINVOKE.ChCollisionModel_GetFamilyMask(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFamilyMask(short mask) {
    chronoPINVOKE.ChCollisionModel_SetFamilyMask(swigCPtr, mask);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSafeMargin(float margin) {
    chronoPINVOKE.ChCollisionModel_SetSafeMargin(swigCPtr, margin);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetSafeMargin() {
    float ret = chronoPINVOKE.ChCollisionModel_GetSafeMargin(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetEnvelope(float envelope) {
    chronoPINVOKE.ChCollisionModel_SetEnvelope(swigCPtr, envelope);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public float GetEnvelope() {
    float ret = chronoPINVOKE.ChCollisionModel_GetEnvelope(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetDefaultSuggestedEnvelope(double envelope) {
    chronoPINVOKE.ChCollisionModel_SetDefaultSuggestedEnvelope(envelope);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static void SetDefaultSuggestedMargin(double margin) {
    chronoPINVOKE.ChCollisionModel_SetDefaultSuggestedMargin(margin);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static double GetDefaultSuggestedEnvelope() {
    double ret = chronoPINVOKE.ChCollisionModel_GetDefaultSuggestedEnvelope();
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double GetDefaultSuggestedMargin() {
    double ret = chronoPINVOKE.ChCollisionModel_GetDefaultSuggestedMargin();
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChAABB GetBoundingBox(bool local) {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChCollisionModel_GetBoundingBox__SWIG_0(swigCPtr, local), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChAABB GetBoundingBox() {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChCollisionModel_GetBoundingBox__SWIG_1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChCollisionModel_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChCollisionModel_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumShapes() {
    uint ret = chronoPINVOKE.ChCollisionModel_GetNumShapes(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ShapeInstance GetShapeInstances() {
    vector_ShapeInstance ret = new vector_ShapeInstance(chronoPINVOKE.ChCollisionModel_GetShapeInstances(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ShapeInstance GetShapeInstance(int index) {
    ShapeInstance ret = new ShapeInstance(chronoPINVOKE.ChCollisionModel_GetShapeInstance(swigCPtr, index), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAllShapesMaterial(ChContactMaterial mat) {
    chronoPINVOKE.ChCollisionModel_SetAllShapesMaterial(swigCPtr, ChContactMaterial.getCPtr(mat));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool HasImplementation() {
    bool ret = chronoPINVOKE.ChCollisionModel_HasImplementation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCollisionModelImpl GetImplementation() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChCollisionModel_GetImplementation(swigCPtr);
    ChCollisionModelImpl ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionModelImpl(cPtr, false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RemoveImplementation() {
    chronoPINVOKE.ChCollisionModel_RemoveImplementation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
