//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChSystem : ChIntegrableIIorder {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChSystem(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChSystem_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChSystem obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChSystem(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual ChSystem Clone() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_Clone(swigCPtr);
    ChSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSystem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTimestepperType(ChTimestepper.Type type) {
    chronoPINVOKE.ChSystem_SetTimestepperType(swigCPtr, (int)type);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTimestepper.Type GetTimestepperType() {
    ChTimestepper.Type ret = (ChTimestepper.Type)chronoPINVOKE.ChSystem_GetTimestepperType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetTimestepper(ChTimestepper stepper) {
    chronoPINVOKE.ChSystem_SetTimestepper(swigCPtr, ChTimestepper.getCPtr(stepper));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTimestepper GetTimestepper() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_GetTimestepper(swigCPtr);
    ChTimestepper ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTimestepper(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetCollisionSystemType(ChCollisionSystem.Type type) {
    chronoPINVOKE.ChSystem_SetCollisionSystemType(swigCPtr, (int)type);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetCollisionSystem(ChCollisionSystem coll_system) {
    chronoPINVOKE.ChSystem_SetCollisionSystem(swigCPtr, ChCollisionSystem.getCPtr(coll_system));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCollisionSystem GetCollisionSystem() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_GetCollisionSystem(swigCPtr);
    ChCollisionSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChCollisionSystem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetMaterialCompositionStrategy(SWIGTYPE_p_std__unique_ptrT_chrono__ChContactMaterialCompositionStrategy_t strategy) {
    chronoPINVOKE.ChSystem_SetMaterialCompositionStrategy(swigCPtr, SWIGTYPE_p_std__unique_ptrT_chrono__ChContactMaterialCompositionStrategy_t.getCPtr(strategy));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChContactMaterialCompositionStrategy GetMaterialCompositionStrategy() {
    ChContactMaterialCompositionStrategy ret = new ChContactMaterialCompositionStrategy(chronoPINVOKE.ChSystem_GetMaterialCompositionStrategy(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxPenetrationRecoverySpeed(double value) {
    chronoPINVOKE.ChSystem_SetMaxPenetrationRecoverySpeed(swigCPtr, value);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSolver(ChSolver newsolver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_0(swigCPtr, ChSolver.getCPtr(newsolver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChSolver GetSolver() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_GetSolver(swigCPtr);
    ChSolver ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSolver(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSolverType(ChSolver.Type type) {
    chronoPINVOKE.ChSystem_SetSolverType(swigCPtr, (int)type);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSolver.Type GetSolverType() {
    ChSolver.Type ret = (ChSolver.Type)chronoPINVOKE.ChSystem_GetSolverType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSystemDescriptor(SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t newdescriptor) {
    chronoPINVOKE.ChSystem_SetSystemDescriptor(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t.getCPtr(newdescriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t GetSystemDescriptor() {
    SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t ret = new SWIGTYPE_p_std__shared_ptrT_ChSystemDescriptor_t(chronoPINVOKE.ChSystem_GetSystemDescriptor(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetGravitationalAcceleration(ChVector3d gacc) {
    chronoPINVOKE.ChSystem_SetGravitationalAcceleration(swigCPtr, ChVector3d.getCPtr(gacc));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetGravitationalAcceleration() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChSystem_GetGravitationalAcceleration(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetChTime() {
    double ret = chronoPINVOKE.ChSystem_GetChTime(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetChTime(double time) {
    chronoPINVOKE.ChSystem_SetChTime(swigCPtr, time);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetStep() {
    double ret = chronoPINVOKE.ChSystem_GetStep(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumSteps() {
    uint ret = chronoPINVOKE.ChSystem_GetNumSteps(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ResetNumSteps() {
    chronoPINVOKE.ChSystem_ResetNumSteps(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int DoStepDynamics(double step_size) {
    int ret = chronoPINVOKE.ChSystem_DoStepDynamics(swigCPtr, step_size);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoFrameDynamics(double frame_time, double step_size) {
    bool ret = chronoPINVOKE.ChSystem_DoFrameDynamics(swigCPtr, frame_time, step_size);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExitFlag DoStepKinematics(double step_size) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChSystem_DoStepKinematics(swigCPtr, step_size);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExitFlag DoFrameKinematics(double frame_time, double step_size) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChSystem_DoFrameKinematics(swigCPtr, frame_time, step_size);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticAnalysis(ChStaticAnalysis analysis) {
    bool ret = chronoPINVOKE.ChSystem_DoStaticAnalysis(swigCPtr, ChStaticAnalysis.getCPtr(analysis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticLinear() {
    bool ret = chronoPINVOKE.ChSystem_DoStaticLinear(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinear(int nsteps, bool verbose) {
    bool ret = chronoPINVOKE.ChSystem_DoStaticNonlinear__SWIG_0(swigCPtr, nsteps, verbose);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinear(int nsteps) {
    bool ret = chronoPINVOKE.ChSystem_DoStaticNonlinear__SWIG_1(swigCPtr, nsteps);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinear() {
    bool ret = chronoPINVOKE.ChSystem_DoStaticNonlinear__SWIG_2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinearRheonomic(int max_num_iterations, bool verbose, SWIGTYPE_p_std__shared_ptrT_chrono__ChStaticNonLinearRheonomicAnalysis__IterationCallback_t callback) {
    bool ret = chronoPINVOKE.ChSystem_DoStaticNonlinearRheonomic__SWIG_0(swigCPtr, max_num_iterations, verbose, SWIGTYPE_p_std__shared_ptrT_chrono__ChStaticNonLinearRheonomicAnalysis__IterationCallback_t.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinearRheonomic(int max_num_iterations, bool verbose) {
    bool ret = chronoPINVOKE.ChSystem_DoStaticNonlinearRheonomic__SWIG_1(swigCPtr, max_num_iterations, verbose);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinearRheonomic(int max_num_iterations) {
    bool ret = chronoPINVOKE.ChSystem_DoStaticNonlinearRheonomic__SWIG_2(swigCPtr, max_num_iterations);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticNonlinearRheonomic() {
    bool ret = chronoPINVOKE.ChSystem_DoStaticNonlinearRheonomic__SWIG_3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticRelaxing(double step_size, int num_iterations) {
    bool ret = chronoPINVOKE.ChSystem_DoStaticRelaxing__SWIG_0(swigCPtr, step_size, num_iterations);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool DoStaticRelaxing(double step_size) {
    bool ret = chronoPINVOKE.ChSystem_DoStaticRelaxing__SWIG_1(swigCPtr, step_size);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetSolverSolveCount() {
    uint ret = chronoPINVOKE.ChSystem_GetSolverSolveCount(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetSolverSetupCount() {
    uint ret = chronoPINVOKE.ChSystem_GetSolverSetupCount(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExitFlag DoAssembly(int action, int max_num_iterationsNR, double abstol_residualNR, double reltol_updateNR, double abstol_updateNR) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChSystem_DoAssembly__SWIG_0(swigCPtr, action, max_num_iterationsNR, abstol_residualNR, reltol_updateNR, abstol_updateNR);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExitFlag DoAssembly(int action, int max_num_iterationsNR, double abstol_residualNR, double reltol_updateNR) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChSystem_DoAssembly__SWIG_1(swigCPtr, action, max_num_iterationsNR, abstol_residualNR, reltol_updateNR);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExitFlag DoAssembly(int action, int max_num_iterationsNR, double abstol_residualNR) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChSystem_DoAssembly__SWIG_2(swigCPtr, action, max_num_iterationsNR, abstol_residualNR);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExitFlag DoAssembly(int action, int max_num_iterationsNR) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChSystem_DoAssembly__SWIG_3(swigCPtr, action, max_num_iterationsNR);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExitFlag DoAssembly(int action) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChSystem_DoAssembly__SWIG_4(swigCPtr, action);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint RemoveRedundantConstraints(bool remove_links, double qr_tol, bool verbose) {
    uint ret = chronoPINVOKE.ChSystem_RemoveRedundantConstraints__SWIG_0(swigCPtr, remove_links, qr_tol, verbose);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint RemoveRedundantConstraints(bool remove_links, double qr_tol) {
    uint ret = chronoPINVOKE.ChSystem_RemoveRedundantConstraints__SWIG_1(swigCPtr, remove_links, qr_tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint RemoveRedundantConstraints(bool remove_links) {
    uint ret = chronoPINVOKE.ChSystem_RemoveRedundantConstraints__SWIG_2(swigCPtr, remove_links);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint RemoveRedundantConstraints() {
    uint ret = chronoPINVOKE.ChSystem_RemoveRedundantConstraints__SWIG_3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetNumThreads(int num_threads_chrono, int num_threads_collision, int num_threads_eigen) {
    chronoPINVOKE.ChSystem_SetNumThreads__SWIG_0(swigCPtr, num_threads_chrono, num_threads_collision, num_threads_eigen);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetNumThreads(int num_threads_chrono, int num_threads_collision) {
    chronoPINVOKE.ChSystem_SetNumThreads__SWIG_1(swigCPtr, num_threads_chrono, num_threads_collision);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetNumThreads(int num_threads_chrono) {
    chronoPINVOKE.ChSystem_SetNumThreads__SWIG_2(swigCPtr, num_threads_chrono);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumThreadsChrono() {
    uint ret = chronoPINVOKE.ChSystem_GetNumThreadsChrono(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumThreadsCollision() {
    uint ret = chronoPINVOKE.ChSystem_GetNumThreadsCollision(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumThreadsEigen() {
    uint ret = chronoPINVOKE.ChSystem_GetNumThreadsEigen(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChAssembly GetAssembly() {
    ChAssembly ret = new ChAssembly(chronoPINVOKE.ChSystem_GetAssembly(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void AddBody(ChBody body) {
    chronoPINVOKE.ChSystem_AddBody(swigCPtr, ChBody.getCPtr(body));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddShaft(SWIGTYPE_p_std__shared_ptrT_ChShaft_t shaft) {
    chronoPINVOKE.ChSystem_AddShaft(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChShaft_t.getCPtr(shaft));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddLink(ChLinkBase link) {
    chronoPINVOKE.ChSystem_AddLink(swigCPtr, ChLinkBase.getCPtr(link));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddMesh(ChMesh mesh) {
    chronoPINVOKE.ChSystem_AddMesh(swigCPtr, ChMesh.getCPtr(mesh));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void AddOtherPhysicsItem(ChPhysicsItem item) {
    chronoPINVOKE.ChSystem_AddOtherPhysicsItem(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Add(ChPhysicsItem item) {
    chronoPINVOKE.ChSystem_Add(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddBatch(ChPhysicsItem item) {
    chronoPINVOKE.ChSystem_AddBatch(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void FlushBatch() {
    chronoPINVOKE.ChSystem_FlushBatch(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveBody(ChBody body) {
    chronoPINVOKE.ChSystem_RemoveBody(swigCPtr, ChBody.getCPtr(body));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveShaft(SWIGTYPE_p_std__shared_ptrT_ChShaft_t shaft) {
    chronoPINVOKE.ChSystem_RemoveShaft(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChShaft_t.getCPtr(shaft));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveLink(ChLinkBase link) {
    chronoPINVOKE.ChSystem_RemoveLink(swigCPtr, ChLinkBase.getCPtr(link));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveMesh(ChMesh mesh) {
    chronoPINVOKE.ChSystem_RemoveMesh(swigCPtr, ChMesh.getCPtr(mesh));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void RemoveOtherPhysicsItem(ChPhysicsItem item) {
    chronoPINVOKE.ChSystem_RemoveOtherPhysicsItem(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Remove(ChPhysicsItem item) {
    chronoPINVOKE.ChSystem_Remove(swigCPtr, ChPhysicsItem.getCPtr(item));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllBodies() {
    chronoPINVOKE.ChSystem_RemoveAllBodies(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllShafts() {
    chronoPINVOKE.ChSystem_RemoveAllShafts(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllLinks() {
    chronoPINVOKE.ChSystem_RemoveAllLinks(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllMeshes() {
    chronoPINVOKE.ChSystem_RemoveAllMeshes(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void RemoveAllOtherPhysicsItems() {
    chronoPINVOKE.ChSystem_RemoveAllOtherPhysicsItems(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public vector_ChBody GetBodies() {
    vector_ChBody ret = new vector_ChBody(chronoPINVOKE.ChSystem_GetBodies(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t GetShafts() {
    SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t ret = new SWIGTYPE_p_std__vectorT_std__shared_ptrT_ChShaft_t_t(chronoPINVOKE.ChSystem_GetShafts(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChLinkBase GetLinks() {
    vector_ChLinkBase ret = new vector_ChLinkBase(chronoPINVOKE.ChSystem_GetLinks(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChMesh GetMeshes() {
    vector_ChMesh ret = new vector_ChMesh(chronoPINVOKE.ChSystem_GetMeshes(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChPhysicsItem GetOtherPhysicsItems() {
    vector_ChPhysicsItem ret = new vector_ChPhysicsItem(chronoPINVOKE.ChSystem_GetOtherPhysicsItems(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody SearchBody(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_SearchBody(swigCPtr, name);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBody SearchBodyID(int id) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_SearchBodyID(swigCPtr, id);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__shared_ptrT_ChShaft_t SearchShaft(string name) {
    SWIGTYPE_p_std__shared_ptrT_ChShaft_t ret = new SWIGTYPE_p_std__shared_ptrT_ChShaft_t(chronoPINVOKE.ChSystem_SearchShaft(swigCPtr, name), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChLinkBase SearchLink(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_SearchLink(swigCPtr, name);
    ChLinkBase ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChLinkBase(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMesh SearchMesh(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_SearchMesh(swigCPtr, name);
    ChMesh ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMesh(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPhysicsItem SearchOtherPhysicsItem(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_SearchOtherPhysicsItem(swigCPtr, name);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarker SearchMarker(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_SearchMarker__SWIG_0(swigCPtr, name);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarker SearchMarker(int id) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_SearchMarker__SWIG_1(swigCPtr, id);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChPhysicsItem Search(string name) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_Search(swigCPtr, name);
    ChPhysicsItem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChPhysicsItem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumBodies() {
    uint ret = chronoPINVOKE.ChSystem_GetNumBodies(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumBodiesActive() {
    uint ret = chronoPINVOKE.ChSystem_GetNumBodiesActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumBodiesSleeping() {
    uint ret = chronoPINVOKE.ChSystem_GetNumBodiesSleeping(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumBodiesFixed() {
    uint ret = chronoPINVOKE.ChSystem_GetNumBodiesFixed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumShafts() {
    uint ret = chronoPINVOKE.ChSystem_GetNumShafts(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumShaftsSleeping() {
    uint ret = chronoPINVOKE.ChSystem_GetNumShaftsSleeping(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumShaftsFixed() {
    uint ret = chronoPINVOKE.ChSystem_GetNumShaftsFixed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumShaftsTotal() {
    uint ret = chronoPINVOKE.ChSystem_GetNumShaftsTotal(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumLinks() {
    uint ret = chronoPINVOKE.ChSystem_GetNumLinks(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumLinksActive() {
    uint ret = chronoPINVOKE.ChSystem_GetNumLinksActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumMeshes() {
    uint ret = chronoPINVOKE.ChSystem_GetNumMeshes(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumOtherPhysicsItems() {
    uint ret = chronoPINVOKE.ChSystem_GetNumOtherPhysicsItems(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumOtherPhysicsItemsActive() {
    uint ret = chronoPINVOKE.ChSystem_GetNumOtherPhysicsItemsActive(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ShowHierarchy(SWIGTYPE_p_std__ostream m_file, int level) {
    chronoPINVOKE.ChSystem_ShowHierarchy__SWIG_0(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(m_file), level);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ShowHierarchy(SWIGTYPE_p_std__ostream m_file) {
    chronoPINVOKE.ChSystem_ShowHierarchy__SWIG_1(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(m_file));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Clear() {
    chronoPINVOKE.ChSystem_Clear(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChContactMethod GetContactMethod() {
    ChContactMethod ret = (ChContactMethod)chronoPINVOKE.ChSystem_GetContactMethod(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void CustomEndOfStep() {
    chronoPINVOKE.ChSystem_CustomEndOfStep(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint ComputeCollisions() {
    uint ret = chronoPINVOKE.ChSystem_ComputeCollisions(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RegisterCustomCollisionCallback(CustomCollisionCallback callback) {
    chronoPINVOKE.ChSystem_RegisterCustomCollisionCallback(swigCPtr, CustomCollisionCallback.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UnregisterCustomCollisionCallback(CustomCollisionCallback callback) {
    chronoPINVOKE.ChSystem_UnregisterCustomCollisionCallback(swigCPtr, CustomCollisionCallback.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetContactContainer(ChContactContainer container) {
    chronoPINVOKE.ChSystem_SetContactContainer(swigCPtr, ChContactContainer.getCPtr(container));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChContactContainer GetContactContainer() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_GetContactContainer(swigCPtr);
    ChContactContainer ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChContactContainer(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetSleepingAllowed(bool ms) {
    chronoPINVOKE.ChSystem_SetSleepingAllowed(swigCPtr, ms);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsSleepingAllowed() {
    bool ret = chronoPINVOKE.ChSystem_IsSleepingAllowed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVisualSystem GetVisualSystem() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChSystem_GetVisualSystem(swigCPtr);
    ChVisualSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVisualSystem(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumContacts() {
    uint ret = chronoPINVOKE.ChSystem_GetNumContacts(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerStep() {
    double ret = chronoPINVOKE.ChSystem_GetTimerStep(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerAdvance() {
    double ret = chronoPINVOKE.ChSystem_GetTimerAdvance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerLSsolve() {
    double ret = chronoPINVOKE.ChSystem_GetTimerLSsolve(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerLSsetup() {
    double ret = chronoPINVOKE.ChSystem_GetTimerLSsetup(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerJacobian() {
    double ret = chronoPINVOKE.ChSystem_GetTimerJacobian(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerCollision() {
    double ret = chronoPINVOKE.ChSystem_GetTimerCollision(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerSetup() {
    double ret = chronoPINVOKE.ChSystem_GetTimerSetup(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetTimerUpdate() {
    double ret = chronoPINVOKE.ChSystem_GetTimerUpdate(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTimerCollisionBroad() {
    double ret = chronoPINVOKE.ChSystem_GetTimerCollisionBroad(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTimerCollisionNarrow() {
    double ret = chronoPINVOKE.ChSystem_GetTimerCollisionNarrow(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRTF() {
    double ret = chronoPINVOKE.ChSystem_GetRTF(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRTF(double rtf) {
    chronoPINVOKE.ChSystem_SetRTF(swigCPtr, rtf);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ResetTimers() {
    chronoPINVOKE.ChSystem_ResetTimers(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableSolverMatrixWrite(bool val, string out_dir) {
    chronoPINVOKE.ChSystem_EnableSolverMatrixWrite__SWIG_0(swigCPtr, val, out_dir);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void EnableSolverMatrixWrite(bool val) {
    chronoPINVOKE.ChSystem_EnableSolverMatrixWrite__SWIG_1(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsSolverMatrixWriteEnabled() {
    bool ret = chronoPINVOKE.ChSystem_IsSolverMatrixWriteEnabled(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void WriteSystemMatrices(bool save_M, bool save_K, bool save_R, bool save_Cq, string path, bool one_indexed) {
    chronoPINVOKE.ChSystem_WriteSystemMatrices__SWIG_0(swigCPtr, save_M, save_K, save_R, save_Cq, path, one_indexed);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void WriteSystemMatrices(bool save_M, bool save_K, bool save_R, bool save_Cq, string path) {
    chronoPINVOKE.ChSystem_WriteSystemMatrices__SWIG_1(swigCPtr, save_M, save_K, save_R, save_Cq, path);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetMassMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t M) {
    chronoPINVOKE.ChSystem_GetMassMatrix(swigCPtr, SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(M));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetStiffnessMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t K) {
    chronoPINVOKE.ChSystem_GetStiffnessMatrix(swigCPtr, SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(K));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetDampingMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t R) {
    chronoPINVOKE.ChSystem_GetDampingMatrix(swigCPtr, SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(R));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetConstraintJacobianMatrix(SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t Cq) {
    chronoPINVOKE.ChSystem_GetConstraintJacobianMatrix(swigCPtr, SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t.getCPtr(Cq));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChSystem_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChSystem_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Setup() {
    chronoPINVOKE.ChSystem_Setup(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(double mytime, bool update_assets) {
    chronoPINVOKE.ChSystem_Update__SWIG_0(swigCPtr, mytime, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(double mytime) {
    chronoPINVOKE.ChSystem_Update__SWIG_1(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(bool update_assets) {
    chronoPINVOKE.ChSystem_Update__SWIG_2(swigCPtr, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update() {
    chronoPINVOKE.ChSystem_Update__SWIG_3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ForceUpdate() {
    chronoPINVOKE.ChSystem_ForceUpdate(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IntToDescriptor(uint off_v, ChStateDelta v, ChVectorDynamicd R, uint off_L, ChVectorDynamicd L, ChVectorDynamicd Qc) {
    chronoPINVOKE.ChSystem_IntToDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), ChVectorDynamicd.getCPtr(R), off_L, ChVectorDynamicd.getCPtr(L), ChVectorDynamicd.getCPtr(Qc));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IntFromDescriptor(uint off_v, ChStateDelta v, uint off_L, ChVectorDynamicd L) {
    chronoPINVOKE.ChSystem_IntFromDescriptor(swigCPtr, off_v, ChStateDelta.getCPtr(v), off_L, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InjectVariables(SWIGTYPE_p_ChSystemDescriptor sys_descriptor) {
    chronoPINVOKE.ChSystem_InjectVariables(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(sys_descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InjectConstraints(SWIGTYPE_p_ChSystemDescriptor sys_descriptor) {
    chronoPINVOKE.ChSystem_InjectConstraints(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(sys_descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadConstraintJacobians() {
    chronoPINVOKE.ChSystem_LoadConstraintJacobians(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void InjectKRMMatrices(SWIGTYPE_p_ChSystemDescriptor sys_descriptor) {
    chronoPINVOKE.ChSystem_InjectKRMMatrices(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(sys_descriptor));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LoadKRMMatrices(double Kfactor, double Rfactor, double Mfactor) {
    chronoPINVOKE.ChSystem_LoadKRMMatrices(swigCPtr, Kfactor, Rfactor, Mfactor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesFbReset() {
    chronoPINVOKE.ChSystem_VariablesFbReset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesFbLoadForces(double factor) {
    chronoPINVOKE.ChSystem_VariablesFbLoadForces__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesFbLoadForces() {
    chronoPINVOKE.ChSystem_VariablesFbLoadForces__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesQbLoadSpeed() {
    chronoPINVOKE.ChSystem_VariablesQbLoadSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesFbIncrementMq() {
    chronoPINVOKE.ChSystem_VariablesFbIncrementMq(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesQbSetSpeed(double step) {
    chronoPINVOKE.ChSystem_VariablesQbSetSpeed__SWIG_0(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesQbSetSpeed() {
    chronoPINVOKE.ChSystem_VariablesQbSetSpeed__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void VariablesQbIncrementPosition(double step) {
    chronoPINVOKE.ChSystem_VariablesQbIncrementPosition(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiReset() {
    chronoPINVOKE.ChSystem_ConstraintsBiReset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_C(double factor, double recovery_clamp, bool do_clamp) {
    chronoPINVOKE.ChSystem_ConstraintsBiLoad_C__SWIG_0(swigCPtr, factor, recovery_clamp, do_clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_C(double factor, double recovery_clamp) {
    chronoPINVOKE.ChSystem_ConstraintsBiLoad_C__SWIG_1(swigCPtr, factor, recovery_clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_C(double factor) {
    chronoPINVOKE.ChSystem_ConstraintsBiLoad_C__SWIG_2(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_C() {
    chronoPINVOKE.ChSystem_ConstraintsBiLoad_C__SWIG_3(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_Ct(double factor) {
    chronoPINVOKE.ChSystem_ConstraintsBiLoad_Ct__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_Ct() {
    chronoPINVOKE.ChSystem_ConstraintsBiLoad_Ct__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_Qc(double factor) {
    chronoPINVOKE.ChSystem_ConstraintsBiLoad_Qc__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsBiLoad_Qc() {
    chronoPINVOKE.ChSystem_ConstraintsBiLoad_Qc__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsFbLoadForces(double factor) {
    chronoPINVOKE.ChSystem_ConstraintsFbLoadForces__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsFbLoadForces() {
    chronoPINVOKE.ChSystem_ConstraintsFbLoadForces__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsFetch_react(double factor) {
    chronoPINVOKE.ChSystem_ConstraintsFetch_react__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConstraintsFetch_react() {
    chronoPINVOKE.ChSystem_ConstraintsFetch_react__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChSystem_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChSystem_GetNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumConstraints() {
    uint ret = chronoPINVOKE.ChSystem_GetNumConstraints(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumConstraintsBilateral() {
    uint ret = chronoPINVOKE.ChSystem_GetNumConstraintsBilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumConstraintsUnilateral() {
    uint ret = chronoPINVOKE.ChSystem_GetNumConstraintsUnilateral(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void StateGather(ChState x, ChStateDelta v, SWIGTYPE_p_double T) {
    chronoPINVOKE.ChSystem_StateGather(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(v), SWIGTYPE_p_double.getCPtr(T));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateScatter(ChState x, ChStateDelta v, double T, bool full_update) {
    chronoPINVOKE.ChSystem_StateScatter(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(v), T, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateGatherAcceleration(ChStateDelta a) {
    chronoPINVOKE.ChSystem_StateGatherAcceleration(swigCPtr, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateScatterAcceleration(ChStateDelta a) {
    chronoPINVOKE.ChSystem_StateScatterAcceleration(swigCPtr, ChStateDelta.getCPtr(a));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateGatherReactions(ChVectorDynamicd L) {
    chronoPINVOKE.ChSystem_StateGatherReactions(swigCPtr, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateScatterReactions(ChVectorDynamicd L) {
    chronoPINVOKE.ChSystem_StateScatterReactions(swigCPtr, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void StateIncrementX(ChState x_new, ChState x, ChStateDelta Dx) {
    chronoPINVOKE.ChSystem_StateIncrementX(swigCPtr, ChState.getCPtr(x_new), ChState.getCPtr(x), ChStateDelta.getCPtr(Dx));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool StateSolveCorrection(ChStateDelta Dv, ChVectorDynamicd DL, ChVectorDynamicd R, ChVectorDynamicd Qc, double c_a, double c_v, double c_x, ChState x, ChStateDelta v, double T, bool force_state_scatter, bool full_update, bool force_setup) {
    bool ret = chronoPINVOKE.ChSystem_StateSolveCorrection(swigCPtr, ChStateDelta.getCPtr(Dv), ChVectorDynamicd.getCPtr(DL), ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(Qc), c_a, c_v, c_x, ChState.getCPtr(x), ChStateDelta.getCPtr(v), T, force_state_scatter, full_update, force_setup);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void LoadResidual_F(ChVectorDynamicd R, double c) {
    chronoPINVOKE.ChSystem_LoadResidual_F(swigCPtr, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadResidual_Mv(ChVectorDynamicd R, ChVectorDynamicd w, double c) {
    chronoPINVOKE.ChSystem_LoadResidual_Mv(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadLumpedMass_Md(ChVectorDynamicd Md, SWIGTYPE_p_double err, double c) {
    chronoPINVOKE.ChSystem_LoadLumpedMass_Md(swigCPtr, ChVectorDynamicd.getCPtr(Md), SWIGTYPE_p_double.getCPtr(err), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadResidual_CqL(ChVectorDynamicd R, ChVectorDynamicd L, double c) {
    chronoPINVOKE.ChSystem_LoadResidual_CqL(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(L), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicd Qc, double c, bool do_clamp, double clamp) {
    chronoPINVOKE.ChSystem_LoadConstraint_C__SWIG_0(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c, do_clamp, clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicd Qc, double c, bool do_clamp) {
    chronoPINVOKE.ChSystem_LoadConstraint_C__SWIG_1(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c, do_clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_C(ChVectorDynamicd Qc, double c) {
    chronoPINVOKE.ChSystem_LoadConstraint_C__SWIG_2(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadConstraint_Ct(ChVectorDynamicd Qc, double c) {
    chronoPINVOKE.ChSystem_LoadConstraint_Ct(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SerializeToJSON(string path) {
    chronoPINVOKE.ChSystem_SerializeToJSON(swigCPtr, path);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverPSOR solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_1(swigCPtr, ChSolverPSOR.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverPJacobi solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_2(swigCPtr, ChSolverPJacobi.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverBB solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_3(swigCPtr, ChSolverBB.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverAPGD solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_4(swigCPtr, ChSolverAPGD.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverSparseLU solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_5(swigCPtr, ChSolverSparseLU.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverSparseQR solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_6(swigCPtr, ChSolverSparseQR.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverGMRES solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_7(swigCPtr, ChSolverGMRES.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverBiCGSTAB solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_8(swigCPtr, ChSolverBiCGSTAB.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSolver(ChSolverMINRES solver) {
    chronoPINVOKE.ChSystem_SetSolver__SWIG_9(swigCPtr, ChSolverMINRES.getCPtr(solver));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
