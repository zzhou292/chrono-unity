//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkMotionImposed : ChLinkMateGeneric {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkMotionImposed(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkMotionImposed_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkMotionImposed obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkMotionImposed(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChLinkMotionImposed() : this(chronoPINVOKE.new_ChLinkMotionImposed__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChLinkMotionImposed(ChLinkMotionImposed other) : this(chronoPINVOKE.new_ChLinkMotionImposed__SWIG_1(ChLinkMotionImposed.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPositionFunction(ChFunctionPosition mf) {
    chronoPINVOKE.ChLinkMotionImposed_SetPositionFunction(swigCPtr, ChFunctionPosition.getCPtr(mf));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionPosition GetPositionFunction() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkMotionImposed_GetPositionFunction(swigCPtr);
    ChFunctionPosition ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionPosition(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRotationFunction(ChFunctionRotation mf) {
    chronoPINVOKE.ChLinkMotionImposed_SetRotationFunction(swigCPtr, ChFunctionRotation.getCPtr(mf));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionRotation GetRotationFunction() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkMotionImposed_GetRotationFunction(swigCPtr);
    ChFunctionRotation ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunctionRotation(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFramed GetFrameM2() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMotionImposed_GetFrameM2(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame2Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMotionImposed_GetFrame2Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void LoadKRMMatrices(double Kfactor, double Rfactor, double Mfactor) {
    chronoPINVOKE.ChLinkMotionImposed_LoadKRMMatrices(swigCPtr, Kfactor, Rfactor, Mfactor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkMotionImposed_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkMotionImposed_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
