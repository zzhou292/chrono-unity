//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChPathSteeringControllerPP : ChSteeringController {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ChPathSteeringControllerPP(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChPathSteeringControllerPP_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChPathSteeringControllerPP obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chrono_vehiclePINVOKE.delete_ChPathSteeringControllerPP(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChPathSteeringControllerPP(ChBezierCurve path, double max_wheel_turn_angle, double wheel_base) : this(chrono_vehiclePINVOKE.new_ChPathSteeringControllerPP__SWIG_0(ChBezierCurve.getCPtr(path), max_wheel_turn_angle, wheel_base), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerPP(ChBezierCurve path, double max_wheel_turn_angle) : this(chrono_vehiclePINVOKE.new_ChPathSteeringControllerPP__SWIG_1(ChBezierCurve.getCPtr(path), max_wheel_turn_angle), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerPP(ChBezierCurve path) : this(chrono_vehiclePINVOKE.new_ChPathSteeringControllerPP__SWIG_2(ChBezierCurve.getCPtr(path)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerPP(string filename, ChBezierCurve path, double max_wheel_turn_angle, double wheel_base) : this(chrono_vehiclePINVOKE.new_ChPathSteeringControllerPP__SWIG_3(filename, ChBezierCurve.getCPtr(path), max_wheel_turn_angle, wheel_base), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerPP(string filename, ChBezierCurve path, double max_wheel_turn_angle) : this(chrono_vehiclePINVOKE.new_ChPathSteeringControllerPP__SWIG_4(filename, ChBezierCurve.getCPtr(path), max_wheel_turn_angle), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChPathSteeringControllerPP(string filename, ChBezierCurve path) : this(chrono_vehiclePINVOKE.new_ChPathSteeringControllerPP__SWIG_5(filename, ChBezierCurve.getCPtr(path)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGain(double Kd) {
    chrono_vehiclePINVOKE.ChPathSteeringControllerPP_SetGain(swigCPtr, Kd);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPreviewDistance(double pvd) {
    chrono_vehiclePINVOKE.ChPathSteeringControllerPP_SetPreviewDistance(swigCPtr, pvd);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStartSpeed(double v_start) {
    chrono_vehiclePINVOKE.ChPathSteeringControllerPP_SetStartSpeed(swigCPtr, v_start);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override double Advance(ChFrameMovingd ref_frame, double time, double step) {
    double ret = chrono_vehiclePINVOKE.ChPathSteeringControllerPP_Advance(swigCPtr, ChFrameMovingd.getCPtr(ref_frame), time, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Reset(ChFrameMovingd ref_frame) {
    chrono_vehiclePINVOKE.ChPathSteeringControllerPP_Reset(swigCPtr, ChFrameMovingd.getCPtr(ref_frame));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void CalcTargetLocation() {
    chrono_vehiclePINVOKE.ChPathSteeringControllerPP_CalcTargetLocation(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public double CalcHeadingError(ChVector3d a, ChVector3d b) {
    double ret = chrono_vehiclePINVOKE.ChPathSteeringControllerPP_CalcHeadingError(swigCPtr, ChVector3d.getCPtr(a), ChVector3d.getCPtr(b));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
