//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class M113 : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal M113(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(M113 obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~M113() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chrono_vehiclePINVOKE.delete_M113(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public M113() : this(chrono_vehiclePINVOKE.new_M113__SWIG_0(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public M113(ChSystem system) : this(chrono_vehiclePINVOKE.new_M113__SWIG_1(ChSystem.getCPtr(system)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetContactMethod(ChContactMethod val) {
    chrono_vehiclePINVOKE.M113_SetContactMethod(swigCPtr, (int)val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCollisionSystemType(SWIGTYPE_p_chrono__ChCollisionSystem__Type collsys_type) {
    chrono_vehiclePINVOKE.M113_SetCollisionSystemType(swigCPtr, SWIGTYPE_p_chrono__ChCollisionSystem__Type.getCPtr(collsys_type));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisFixed(bool val) {
    chrono_vehiclePINVOKE.M113_SetChassisFixed(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisCollisionType(CollisionType val) {
    chrono_vehiclePINVOKE.M113_SetChassisCollisionType(swigCPtr, (int)val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetWheelCollisionType(bool roadwheel_as_cylinder, bool idler_as_cylinder) {
    chrono_vehiclePINVOKE.M113_SetWheelCollisionType(swigCPtr, roadwheel_as_cylinder, idler_as_cylinder);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetBrakeType(BrakeType brake_type) {
    chrono_vehiclePINVOKE.M113_SetBrakeType(swigCPtr, (int)brake_type);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackShoeType(TrackShoeType shoe_type) {
    chrono_vehiclePINVOKE.M113_SetTrackShoeType(swigCPtr, (int)shoe_type);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDoublePinTrackShoeType(DoublePinTrackShoeType topology) {
    chrono_vehiclePINVOKE.M113_SetDoublePinTrackShoeType(swigCPtr, (int)topology);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetANCFTrackShoeElementType(ChTrackShoeBandANCF.ElementType type) {
    chrono_vehiclePINVOKE.M113_SetANCFTrackShoeElementType(swigCPtr, (int)type);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetANCFTrackShoeNumElements(int num_elements_length, int num_elements_width) {
    chrono_vehiclePINVOKE.M113_SetANCFTrackShoeNumElements(swigCPtr, num_elements_length, num_elements_width);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetANCFTrackShoeCurvatureConstraints(bool constrain_curvature) {
    chrono_vehiclePINVOKE.M113_SetANCFTrackShoeCurvatureConstraints(swigCPtr, constrain_curvature);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDrivelineType(DrivelineTypeTV driveline_type) {
    chrono_vehiclePINVOKE.M113_SetDrivelineType(swigCPtr, (int)driveline_type);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetEngineType(EngineModelType val) {
    chrono_vehiclePINVOKE.M113_SetEngineType(swigCPtr, (int)val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTransmissionType(TransmissionModelType val) {
    chrono_vehiclePINVOKE.M113_SetTransmissionType(swigCPtr, (int)val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackBushings(bool val) {
    chrono_vehiclePINVOKE.M113_SetTrackBushings(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSuspensionBushings(bool val) {
    chrono_vehiclePINVOKE.M113_SetSuspensionBushings(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackStiffness(bool val) {
    chrono_vehiclePINVOKE.M113_SetTrackStiffness(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInitPosition(ChCoordsysd pos) {
    chrono_vehiclePINVOKE.M113_SetInitPosition(swigCPtr, ChCoordsysd.getCPtr(pos));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetInitFwdVel(double fwdVel) {
    chrono_vehiclePINVOKE.M113_SetInitFwdVel(swigCPtr, fwdVel);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetGyrationMode(bool val) {
    chrono_vehiclePINVOKE.M113_SetGyrationMode(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAerodynamicDrag(double Cd, double area, double air_density) {
    chrono_vehiclePINVOKE.M113_SetAerodynamicDrag(swigCPtr, Cd, area, air_density);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void CreateTrack(bool val) {
    chrono_vehiclePINVOKE.M113_CreateTrack(swigCPtr, val);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChSystem GetSystem() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.M113_GetSystem(swigCPtr);
    ChSystem ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChSystem(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChTrackedVehicle GetVehicle() {
    ChTrackedVehicle ret = new ChTrackedVehicle(chrono_vehiclePINVOKE.M113_GetVehicle(swigCPtr), true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChChassis GetChassis() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.M113_GetChassis(swigCPtr);
    ChChassis ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChChassis(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChBodyAuxRef GetChassisBody() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.M113_GetChassisBody(swigCPtr);
    ChBodyAuxRef ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBodyAuxRef(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChDrivelineTV GetDriveline() {
    global::System.IntPtr cPtr = chrono_vehiclePINVOKE.M113_GetDriveline(swigCPtr);
    ChDrivelineTV ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChDrivelineTV(cPtr, true);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Initialize() {
    chrono_vehiclePINVOKE.M113_Initialize(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetChassisVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.M113_SetChassisVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSprocketVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.M113_SetSprocketVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIdlerVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.M113_SetIdlerVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSuspensionVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.M113_SetSuspensionVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetIdlerWheelVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.M113_SetIdlerWheelVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRoadWheelVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.M113_SetRoadWheelVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetTrackShoeVisualizationType(VisualizationType vis) {
    chrono_vehiclePINVOKE.M113_SetTrackShoeVisualizationType(swigCPtr, (int)vis);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(double time, DriverInputs driver_inputs) {
    chrono_vehiclePINVOKE.M113_Synchronize__SWIG_0(swigCPtr, time, DriverInputs.getCPtr(driver_inputs));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Synchronize(double time, DriverInputs driver_inputs, TerrainForces shoe_forces_left, TerrainForces shoe_forces_right) {
    chrono_vehiclePINVOKE.M113_Synchronize__SWIG_1(swigCPtr, time, DriverInputs.getCPtr(driver_inputs), TerrainForces.getCPtr(shoe_forces_left), TerrainForces.getCPtr(shoe_forces_right));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Advance(double step) {
    chrono_vehiclePINVOKE.M113_Advance(swigCPtr, step);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void LogConstraintViolations() {
    chrono_vehiclePINVOKE.M113_LogConstraintViolations(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
