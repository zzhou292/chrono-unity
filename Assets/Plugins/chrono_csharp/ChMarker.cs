//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChMarker : ChObj {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChMarker(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChMarker_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChMarker obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChMarker(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChMarker() : this(chronoPINVOKE.new_ChMarker__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMarker(string name, ChBody body, ChCoordsysd rel_csys, ChCoordsysd rel_csys_dt, ChCoordsysd rel_csys_dtdt) : this(chronoPINVOKE.new_ChMarker__SWIG_1(name, ChBody.getCPtr(body), ChCoordsysd.getCPtr(rel_csys), ChCoordsysd.getCPtr(rel_csys_dt), ChCoordsysd.getCPtr(rel_csys_dtdt)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMarker(ChMarker other) : this(chronoPINVOKE.new_ChMarker__SWIG_2(ChMarker.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChBody GetBody() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChMarker_GetBody(swigCPtr);
    ChBody ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChBody(cPtr, false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetBody(ChBody body) {
    chronoPINVOKE.ChMarker_SetBody(swigCPtr, ChBody.getCPtr(body));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ImposeRelativeTransform(ChFramed frame) {
    chronoPINVOKE.ChMarker_ImposeRelativeTransform(swigCPtr, ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ImposeAbsoluteTransform(ChFramed frame) {
    chronoPINVOKE.ChMarker_ImposeAbsoluteTransform(swigCPtr, ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCoordsysd GetRestCoordsys() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChMarker_GetRestCoordsys(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFrameMovingd GetAbsFrame() {
    ChFrameMovingd ret = new ChFrameMovingd(chronoPINVOKE.ChMarker_GetAbsFrame(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetAbsCoordsys() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChMarker_GetAbsCoordsys(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetAbsCoordsysDt() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChMarker_GetAbsCoordsysDt(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetAbsCoordsysDt2() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChMarker_GetAbsCoordsysDt2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAbsCoordsys(ChCoordsysd csys) {
    chronoPINVOKE.ChMarker_SetAbsCoordsys(swigCPtr, ChCoordsysd.getCPtr(csys));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAbsCoordsysDt(ChCoordsysd csys_dt) {
    chronoPINVOKE.ChMarker_SetAbsCoordsysDt(swigCPtr, ChCoordsysd.getCPtr(csys_dt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAbsCoordsysDt2(ChCoordsysd csys_dtdt) {
    chronoPINVOKE.ChMarker_SetAbsCoordsysDt2(swigCPtr, ChCoordsysd.getCPtr(csys_dtdt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetAbsAngVel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMarker_GetAbsAngVel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAbsAngAcc() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMarker_GetAbsAngAcc(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMotionType(ChMarker.MotionType motion_type) {
    chronoPINVOKE.ChMarker_SetMotionType(swigCPtr, (int)motion_type);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionX(ChFunction funct) {
    chronoPINVOKE.ChMarker_SetMotionX(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionY(ChFunction funct) {
    chronoPINVOKE.ChMarker_SetMotionY(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionZ(ChFunction funct) {
    chronoPINVOKE.ChMarker_SetMotionZ(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionAngle(ChFunction funct) {
    chronoPINVOKE.ChMarker_SetMotionAngle(swigCPtr, ChFunction.getCPtr(funct));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMotionAxis(ChVector3d axis) {
    chronoPINVOKE.ChMarker_SetMotionAxis(swigCPtr, ChVector3d.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChMarker.MotionType GetMotionType() {
    ChMarker.MotionType ret = (ChMarker.MotionType)chronoPINVOKE.ChMarker_GetMotionType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionX() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChMarker_GetMotionX(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionY() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChMarker_GetMotionY(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionZ() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChMarker_GetMotionZ(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFunction GetMotionAngle() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChMarker_GetMotionAngle(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetMotionAxis() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChMarker_GetMotionAxis(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void UpdateTime(double mytime) {
    chronoPINVOKE.ChMarker_UpdateTime(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdateState() {
    chronoPINVOKE.ChMarker_UpdateState(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Update(double mytime) {
    chronoPINVOKE.ChMarker_Update(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UpdatedExternalTime(double prevtime, double mtime) {
    chronoPINVOKE.ChMarker_UpdatedExternalTime(swigCPtr, prevtime, mtime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChMarker_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChMarker_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum MotionType {
    FUNCTIONS,
    KEYFRAMED,
    EXTERNAL
  }

}
