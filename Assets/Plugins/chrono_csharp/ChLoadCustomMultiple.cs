//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLoadCustomMultiple : ChLoadBase {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLoadCustomMultiple(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLoadCustomMultiple_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLoadCustomMultiple obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLoadCustomMultiple(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public vector_ChLoadable loadables {
    set {
      chronoPINVOKE.ChLoadCustomMultiple_loadables_set(swigCPtr, vector_ChLoadable.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChLoadCustomMultiple_loadables_get(swigCPtr);
      vector_ChLoadable ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChLoadable(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChVectorDynamicd load_Q {
    set {
      chronoPINVOKE.ChLoadCustomMultiple_load_Q_set(swigCPtr, ChVectorDynamicd.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChLoadCustomMultiple_load_Q_get(swigCPtr);
      ChVectorDynamicd ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChVectorDynamicd(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public ChLoadCustomMultiple(vector_ChLoadable loadable_objects) : this(chronoPINVOKE.new_ChLoadCustomMultiple__SWIG_0(vector_ChLoadable.getCPtr(loadable_objects)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public ChLoadCustomMultiple(ChLoadable loadableA, ChLoadable loadableB) : this(chronoPINVOKE.new_ChLoadCustomMultiple__SWIG_1(ChLoadable.getCPtr(loadableA), ChLoadable.getCPtr(loadableB)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public ChLoadCustomMultiple(ChLoadable loadableA, ChLoadable loadableB, ChLoadable loadableC) : this(chronoPINVOKE.new_ChLoadCustomMultiple__SWIG_2(ChLoadable.getCPtr(loadableA), ChLoadable.getCPtr(loadableB), ChLoadable.getCPtr(loadableC)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public override int LoadGetNumCoordsPosLevel() {
    int ret = (SwigDerivedClassHasMethod("LoadGetNumCoordsPosLevel", swigMethodTypes2) ? chronoPINVOKE.ChLoadCustomMultiple_LoadGetNumCoordsPosLevelSwigExplicitChLoadCustomMultiple(swigCPtr) : chronoPINVOKE.ChLoadCustomMultiple_LoadGetNumCoordsPosLevel(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override int LoadGetNumCoordsVelLevel() {
    int ret = (SwigDerivedClassHasMethod("LoadGetNumCoordsVelLevel", swigMethodTypes3) ? chronoPINVOKE.ChLoadCustomMultiple_LoadGetNumCoordsVelLevelSwigExplicitChLoadCustomMultiple(swigCPtr) : chronoPINVOKE.ChLoadCustomMultiple_LoadGetNumCoordsVelLevel(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void LoadGetStateBlock_x(ChState mD) {
    if (SwigDerivedClassHasMethod("LoadGetStateBlock_x", swigMethodTypes4)) chronoPINVOKE.ChLoadCustomMultiple_LoadGetStateBlock_xSwigExplicitChLoadCustomMultiple(swigCPtr, ChState.getCPtr(mD)); else chronoPINVOKE.ChLoadCustomMultiple_LoadGetStateBlock_x(swigCPtr, ChState.getCPtr(mD));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadGetStateBlock_w(ChStateDelta mD) {
    if (SwigDerivedClassHasMethod("LoadGetStateBlock_w", swigMethodTypes5)) chronoPINVOKE.ChLoadCustomMultiple_LoadGetStateBlock_wSwigExplicitChLoadCustomMultiple(swigCPtr, ChStateDelta.getCPtr(mD)); else chronoPINVOKE.ChLoadCustomMultiple_LoadGetStateBlock_w(swigCPtr, ChStateDelta.getCPtr(mD));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadStateIncrement(ChState x, ChStateDelta dw, ChState x_new) {
    if (SwigDerivedClassHasMethod("LoadStateIncrement", swigMethodTypes6)) chronoPINVOKE.ChLoadCustomMultiple_LoadStateIncrementSwigExplicitChLoadCustomMultiple(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(dw), ChState.getCPtr(x_new)); else chronoPINVOKE.ChLoadCustomMultiple_LoadStateIncrement(swigCPtr, ChState.getCPtr(x), ChStateDelta.getCPtr(dw), ChState.getCPtr(x_new));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int LoadGetNumFieldCoords() {
    int ret = (SwigDerivedClassHasMethod("LoadGetNumFieldCoords", swigMethodTypes7) ? chronoPINVOKE.ChLoadCustomMultiple_LoadGetNumFieldCoordsSwigExplicitChLoadCustomMultiple(swigCPtr) : chronoPINVOKE.ChLoadCustomMultiple_LoadGetNumFieldCoords(swigCPtr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void LoadIntLoadResidual_F(ChVectorDynamicd R, double c) {
    if (SwigDerivedClassHasMethod("LoadIntLoadResidual_F", swigMethodTypes12)) chronoPINVOKE.ChLoadCustomMultiple_LoadIntLoadResidual_FSwigExplicitChLoadCustomMultiple(swigCPtr, ChVectorDynamicd.getCPtr(R), c); else chronoPINVOKE.ChLoadCustomMultiple_LoadIntLoadResidual_F(swigCPtr, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadIntLoadResidual_Mv(ChVectorDynamicd R, ChVectorDynamicd w, double c) {
    if (SwigDerivedClassHasMethod("LoadIntLoadResidual_Mv", swigMethodTypes13)) chronoPINVOKE.ChLoadCustomMultiple_LoadIntLoadResidual_MvSwigExplicitChLoadCustomMultiple(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c); else chronoPINVOKE.ChLoadCustomMultiple_LoadIntLoadResidual_Mv(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(w), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void LoadIntLoadLumpedMass_Md(ChVectorDynamicd Md, SWIGTYPE_p_double err, double c) {
    if (SwigDerivedClassHasMethod("LoadIntLoadLumpedMass_Md", swigMethodTypes14)) chronoPINVOKE.ChLoadCustomMultiple_LoadIntLoadLumpedMass_MdSwigExplicitChLoadCustomMultiple(swigCPtr, ChVectorDynamicd.getCPtr(Md), SWIGTYPE_p_double.getCPtr(err), c); else chronoPINVOKE.ChLoadCustomMultiple_LoadIntLoadLumpedMass_Md(swigCPtr, ChVectorDynamicd.getCPtr(Md), SWIGTYPE_p_double.getCPtr(err), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void CreateJacobianMatrices() {
    if (SwigDerivedClassHasMethod("CreateJacobianMatrices", swigMethodTypes9)) chronoPINVOKE.ChLoadCustomMultiple_CreateJacobianMatricesSwigExplicitChLoadCustomMultiple(swigCPtr); else chronoPINVOKE.ChLoadCustomMultiple_CreateJacobianMatrices(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual ChVectorDynamicd GetQ() {
    ChVectorDynamicd ret = new ChVectorDynamicd((SwigDerivedClassHasMethod("GetQ", swigMethodTypes17) ? chronoPINVOKE.ChLoadCustomMultiple_GetQSwigExplicitChLoadCustomMultiple(swigCPtr) : chronoPINVOKE.ChLoadCustomMultiple_GetQ(swigCPtr)), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChLoadCustomMultiple_0(SwigDirectorMethodArchiveOut);
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChLoadCustomMultiple_1(SwigDirectorMethodArchiveIn);
    if (SwigDerivedClassHasMethod("LoadGetNumCoordsPosLevel", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChLoadCustomMultiple_2(SwigDirectorMethodLoadGetNumCoordsPosLevel);
    if (SwigDerivedClassHasMethod("LoadGetNumCoordsVelLevel", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChLoadCustomMultiple_3(SwigDirectorMethodLoadGetNumCoordsVelLevel);
    if (SwigDerivedClassHasMethod("LoadGetStateBlock_x", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChLoadCustomMultiple_4(SwigDirectorMethodLoadGetStateBlock_x);
    if (SwigDerivedClassHasMethod("LoadGetStateBlock_w", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChLoadCustomMultiple_5(SwigDirectorMethodLoadGetStateBlock_w);
    if (SwigDerivedClassHasMethod("LoadStateIncrement", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateChLoadCustomMultiple_6(SwigDirectorMethodLoadStateIncrement);
    if (SwigDerivedClassHasMethod("LoadGetNumFieldCoords", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateChLoadCustomMultiple_7(SwigDirectorMethodLoadGetNumFieldCoords);
    if (SwigDerivedClassHasMethod("ComputeQ", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateChLoadCustomMultiple_8(SwigDirectorMethodComputeQ);
    if (SwigDerivedClassHasMethod("CreateJacobianMatrices", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateChLoadCustomMultiple_9(SwigDirectorMethodCreateJacobianMatrices);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateChLoadCustomMultiple_10(SwigDirectorMethodUpdate);
    if (SwigDerivedClassHasMethod("IsStiff", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateChLoadCustomMultiple_11(SwigDirectorMethodIsStiff);
    if (SwigDerivedClassHasMethod("LoadIntLoadResidual_F", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateChLoadCustomMultiple_12(SwigDirectorMethodLoadIntLoadResidual_F);
    if (SwigDerivedClassHasMethod("LoadIntLoadResidual_Mv", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateChLoadCustomMultiple_13(SwigDirectorMethodLoadIntLoadResidual_Mv);
    if (SwigDerivedClassHasMethod("LoadIntLoadLumpedMass_Md", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateChLoadCustomMultiple_14(SwigDirectorMethodLoadIntLoadLumpedMass_Md);
    if (SwigDerivedClassHasMethod("InjectKRMMatrices", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateChLoadCustomMultiple_15(SwigDirectorMethodInjectKRMMatrices);
    if (SwigDerivedClassHasMethod("LoadKRMMatrices", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateChLoadCustomMultiple_16(SwigDirectorMethodLoadKRMMatrices);
    if (SwigDerivedClassHasMethod("GetQ", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateChLoadCustomMultiple_17(SwigDirectorMethodGetQ);
    chronoPINVOKE.ChLoadCustomMultiple_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChLoadCustomMultiple));
    return hasDerivedMethod;
  }

  private void SwigDirectorMethodArchiveOut(global::System.IntPtr archive_out) {
    ArchiveOut(new SWIGTYPE_p_chrono__ChArchiveOut(archive_out, false));
  }

  private void SwigDirectorMethodArchiveIn(global::System.IntPtr archive_in) {
    ArchiveIn(new SWIGTYPE_p_chrono__ChArchiveIn(archive_in, false));
  }

  private int SwigDirectorMethodLoadGetNumCoordsPosLevel() {
    return LoadGetNumCoordsPosLevel();
  }

  private int SwigDirectorMethodLoadGetNumCoordsVelLevel() {
    return LoadGetNumCoordsVelLevel();
  }

  private void SwigDirectorMethodLoadGetStateBlock_x(global::System.IntPtr mD) {
    LoadGetStateBlock_x(new ChState(mD, false));
  }

  private void SwigDirectorMethodLoadGetStateBlock_w(global::System.IntPtr mD) {
    LoadGetStateBlock_w(new ChStateDelta(mD, false));
  }

  private void SwigDirectorMethodLoadStateIncrement(global::System.IntPtr x, global::System.IntPtr dw, global::System.IntPtr x_new) {
    LoadStateIncrement(new ChState(x, false), new ChStateDelta(dw, false), new ChState(x_new, false));
  }

  private int SwigDirectorMethodLoadGetNumFieldCoords() {
    return LoadGetNumFieldCoords();
  }

  private void SwigDirectorMethodComputeQ(global::System.IntPtr state_x, global::System.IntPtr state_w) {
    ComputeQ((state_x == global::System.IntPtr.Zero) ? null : new ChState(state_x, false), (state_w == global::System.IntPtr.Zero) ? null : new ChStateDelta(state_w, false));
  }

  private void SwigDirectorMethodCreateJacobianMatrices() {
    CreateJacobianMatrices();
  }

  private void SwigDirectorMethodUpdate(double time) {
    Update(time);
  }

  private bool SwigDirectorMethodIsStiff() {
    return IsStiff();
  }

  private void SwigDirectorMethodLoadIntLoadResidual_F(global::System.IntPtr R, double c) {
    LoadIntLoadResidual_F(new ChVectorDynamicd(R, false), c);
  }

  private void SwigDirectorMethodLoadIntLoadResidual_Mv(global::System.IntPtr R, global::System.IntPtr w, double c) {
    LoadIntLoadResidual_Mv(new ChVectorDynamicd(R, false), new ChVectorDynamicd(w, false), c);
  }

  private void SwigDirectorMethodLoadIntLoadLumpedMass_Md(global::System.IntPtr Md, global::System.IntPtr err, double c) {
    LoadIntLoadLumpedMass_Md(new ChVectorDynamicd(Md, false), new SWIGTYPE_p_double(err, false), c);
  }

  private void SwigDirectorMethodInjectKRMMatrices(global::System.IntPtr descriptor) {
    InjectKRMMatrices(new SWIGTYPE_p_ChSystemDescriptor(descriptor, false));
  }

  private void SwigDirectorMethodLoadKRMMatrices(double Kfactor, double Rfactor, double Mfactor) {
    LoadKRMMatrices(Kfactor, Rfactor, Mfactor);
  }

  private global::System.IntPtr SwigDirectorMethodGetQ() {
    return ChVectorDynamicd.getCPtr(GetQ()).Handle;
  }

  public delegate void SwigDelegateChLoadCustomMultiple_0(global::System.IntPtr archive_out);
  public delegate void SwigDelegateChLoadCustomMultiple_1(global::System.IntPtr archive_in);
  public delegate int SwigDelegateChLoadCustomMultiple_2();
  public delegate int SwigDelegateChLoadCustomMultiple_3();
  public delegate void SwigDelegateChLoadCustomMultiple_4(global::System.IntPtr mD);
  public delegate void SwigDelegateChLoadCustomMultiple_5(global::System.IntPtr mD);
  public delegate void SwigDelegateChLoadCustomMultiple_6(global::System.IntPtr x, global::System.IntPtr dw, global::System.IntPtr x_new);
  public delegate int SwigDelegateChLoadCustomMultiple_7();
  public delegate void SwigDelegateChLoadCustomMultiple_8(global::System.IntPtr state_x, global::System.IntPtr state_w);
  public delegate void SwigDelegateChLoadCustomMultiple_9();
  public delegate void SwigDelegateChLoadCustomMultiple_10(double time);
  public delegate bool SwigDelegateChLoadCustomMultiple_11();
  public delegate void SwigDelegateChLoadCustomMultiple_12(global::System.IntPtr R, double c);
  public delegate void SwigDelegateChLoadCustomMultiple_13(global::System.IntPtr R, global::System.IntPtr w, double c);
  public delegate void SwigDelegateChLoadCustomMultiple_14(global::System.IntPtr Md, global::System.IntPtr err, double c);
  public delegate void SwigDelegateChLoadCustomMultiple_15(global::System.IntPtr descriptor);
  public delegate void SwigDelegateChLoadCustomMultiple_16(double Kfactor, double Rfactor, double Mfactor);
  public delegate global::System.IntPtr SwigDelegateChLoadCustomMultiple_17();

  private SwigDelegateChLoadCustomMultiple_0 swigDelegate0;
  private SwigDelegateChLoadCustomMultiple_1 swigDelegate1;
  private SwigDelegateChLoadCustomMultiple_2 swigDelegate2;
  private SwigDelegateChLoadCustomMultiple_3 swigDelegate3;
  private SwigDelegateChLoadCustomMultiple_4 swigDelegate4;
  private SwigDelegateChLoadCustomMultiple_5 swigDelegate5;
  private SwigDelegateChLoadCustomMultiple_6 swigDelegate6;
  private SwigDelegateChLoadCustomMultiple_7 swigDelegate7;
  private SwigDelegateChLoadCustomMultiple_8 swigDelegate8;
  private SwigDelegateChLoadCustomMultiple_9 swigDelegate9;
  private SwigDelegateChLoadCustomMultiple_10 swigDelegate10;
  private SwigDelegateChLoadCustomMultiple_11 swigDelegate11;
  private SwigDelegateChLoadCustomMultiple_12 swigDelegate12;
  private SwigDelegateChLoadCustomMultiple_13 swigDelegate13;
  private SwigDelegateChLoadCustomMultiple_14 swigDelegate14;
  private SwigDelegateChLoadCustomMultiple_15 swigDelegate15;
  private SwigDelegateChLoadCustomMultiple_16 swigDelegate16;
  private SwigDelegateChLoadCustomMultiple_17 swigDelegate17;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveOut) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveIn) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(ChState) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(ChStateDelta) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(ChState), typeof(ChStateDelta), typeof(ChState) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(ChState), typeof(ChStateDelta) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(ChVectorDynamicd), typeof(double) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] { typeof(ChVectorDynamicd), typeof(ChVectorDynamicd), typeof(double) };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] { typeof(ChVectorDynamicd), typeof(SWIGTYPE_p_double), typeof(double) };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] { typeof(SWIGTYPE_p_ChSystemDescriptor) };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] {  };
}
