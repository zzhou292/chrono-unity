//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionSetpointCallback : ChFunctionSetpoint {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunctionSetpointCallback(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChFunctionSetpointCallback_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionSetpointCallback obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChFunctionSetpointCallback(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunctionSetpointCallback() : this(chronoPINVOKE.new_ChFunctionSetpointCallback__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public ChFunctionSetpointCallback(ChFunctionSetpointCallback other) : this(chronoPINVOKE.new_ChFunctionSetpointCallback__SWIG_1(ChFunctionSetpointCallback.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public virtual double SetpointCallback(double x) {
    double ret = chronoPINVOKE.ChFunctionSetpointCallback_SetpointCallback(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Update(double x) {
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes7)) chronoPINVOKE.ChFunctionSetpointCallback_UpdateSwigExplicitChFunctionSetpointCallback(swigCPtr, x); else chronoPINVOKE.ChFunctionSetpointCallback_Update(swigCPtr, x);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetFunctionType", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChFunctionSetpointCallback_0(SwigDirectorMethodGetFunctionType);
    if (SwigDerivedClassHasMethod("GetVal", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChFunctionSetpointCallback_1(SwigDirectorMethodGetVal);
    if (SwigDerivedClassHasMethod("GetDer", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChFunctionSetpointCallback_2(SwigDirectorMethodGetDer);
    if (SwigDerivedClassHasMethod("GetDer2", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChFunctionSetpointCallback_3(SwigDirectorMethodGetDer2);
    if (SwigDerivedClassHasMethod("GetDer3", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChFunctionSetpointCallback_4(SwigDirectorMethodGetDer3);
    if (SwigDerivedClassHasMethod("GetDerN", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChFunctionSetpointCallback_5(SwigDirectorMethodGetDerN);
    if (SwigDerivedClassHasMethod("GetWeight", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateChFunctionSetpointCallback_6(SwigDirectorMethodGetWeight);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateChFunctionSetpointCallback_7(SwigDirectorMethodUpdate);
    if (SwigDerivedClassHasMethod("GetMax", swigMethodTypes8))
      swigDelegate8 = new SwigDelegateChFunctionSetpointCallback_8(SwigDirectorMethodGetMax);
    if (SwigDerivedClassHasMethod("GetMin", swigMethodTypes9))
      swigDelegate9 = new SwigDelegateChFunctionSetpointCallback_9(SwigDirectorMethodGetMin);
    if (SwigDerivedClassHasMethod("GetMean", swigMethodTypes10))
      swigDelegate10 = new SwigDelegateChFunctionSetpointCallback_10(SwigDirectorMethodGetMean);
    if (SwigDerivedClassHasMethod("GetSquaredMean", swigMethodTypes11))
      swigDelegate11 = new SwigDelegateChFunctionSetpointCallback_11(SwigDirectorMethodGetSquaredMean);
    if (SwigDerivedClassHasMethod("GetIntegral", swigMethodTypes12))
      swigDelegate12 = new SwigDelegateChFunctionSetpointCallback_12(SwigDirectorMethodGetIntegral);
    if (SwigDerivedClassHasMethod("GetPositiveAccelerationCoeff", swigMethodTypes13))
      swigDelegate13 = new SwigDelegateChFunctionSetpointCallback_13(SwigDirectorMethodGetPositiveAccelerationCoeff);
    if (SwigDerivedClassHasMethod("GetNegativeAccelerationCoeff", swigMethodTypes14))
      swigDelegate14 = new SwigDelegateChFunctionSetpointCallback_14(SwigDirectorMethodGetNegativeAccelerationCoeff);
    if (SwigDerivedClassHasMethod("GetVelocityCoefficient", swigMethodTypes15))
      swigDelegate15 = new SwigDelegateChFunctionSetpointCallback_15(SwigDirectorMethodGetVelocityCoefficient);
    if (SwigDerivedClassHasMethod("OutputToASCIIFile", swigMethodTypes16))
      swigDelegate16 = new SwigDelegateChFunctionSetpointCallback_16(SwigDirectorMethodOutputToASCIIFile);
    if (SwigDerivedClassHasMethod("SampleUpToDerN", swigMethodTypes17))
      swigDelegate17 = new SwigDelegateChFunctionSetpointCallback_17(SwigDirectorMethodSampleUpToDerN__SWIG_0);
    if (SwigDerivedClassHasMethod("SampleUpToDerN", swigMethodTypes18))
      swigDelegate18 = new SwigDelegateChFunctionSetpointCallback_18(SwigDirectorMethodSampleUpToDerN__SWIG_1);
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes19))
      swigDelegate19 = new SwigDelegateChFunctionSetpointCallback_19(SwigDirectorMethodArchiveOut);
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes20))
      swigDelegate20 = new SwigDelegateChFunctionSetpointCallback_20(SwigDirectorMethodArchiveIn);
    if (SwigDerivedClassHasMethod("SetSetpoint", swigMethodTypes21))
      swigDelegate21 = new SwigDelegateChFunctionSetpointCallback_21(SwigDirectorMethodSetSetpoint);
    if (SwigDerivedClassHasMethod("SetSetpointAndDerivatives", swigMethodTypes22))
      swigDelegate22 = new SwigDelegateChFunctionSetpointCallback_22(SwigDirectorMethodSetSetpointAndDerivatives);
    if (SwigDerivedClassHasMethod("SetpointCallback", swigMethodTypes23))
      swigDelegate23 = new SwigDelegateChFunctionSetpointCallback_23(SwigDirectorMethodSetpointCallback);
    chronoPINVOKE.ChFunctionSetpointCallback_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7, swigDelegate8, swigDelegate9, swigDelegate10, swigDelegate11, swigDelegate12, swigDelegate13, swigDelegate14, swigDelegate15, swigDelegate16, swigDelegate17, swigDelegate18, swigDelegate19, swigDelegate20, swigDelegate21, swigDelegate22, swigDelegate23);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChFunctionSetpointCallback));
    return hasDerivedMethod;
  }

  private int SwigDirectorMethodGetFunctionType() {
    return (int)GetFunctionType();
  }

  private double SwigDirectorMethodGetVal(double x) {
    return GetVal(x);
  }

  private double SwigDirectorMethodGetDer(double x) {
    return GetDer(x);
  }

  private double SwigDirectorMethodGetDer2(double x) {
    return GetDer2(x);
  }

  private double SwigDirectorMethodGetDer3(double x) {
    return GetDer3(x);
  }

  private double SwigDirectorMethodGetDerN(double x, int der_order) {
    return GetDerN(x, der_order);
  }

  private double SwigDirectorMethodGetWeight(double x) {
    return GetWeight(x);
  }

  private void SwigDirectorMethodUpdate(double x) {
    Update(x);
  }

  private double SwigDirectorMethodGetMax(double xmin, double xmax, double sampling_step, int der_order) {
    return GetMax(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetMin(double xmin, double xmax, double sampling_step, int der_order) {
    return GetMin(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetMean(double xmin, double xmax, double sampling_step, int der_order) {
    return GetMean(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetSquaredMean(double xmin, double xmax, double sampling_step, int der_order) {
    return GetSquaredMean(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetIntegral(double xmin, double xmax, double sampling_step, int der_order) {
    return GetIntegral(xmin, xmax, sampling_step, der_order);
  }

  private double SwigDirectorMethodGetPositiveAccelerationCoeff() {
    return GetPositiveAccelerationCoeff();
  }

  private double SwigDirectorMethodGetNegativeAccelerationCoeff() {
    return GetNegativeAccelerationCoeff();
  }

  private double SwigDirectorMethodGetVelocityCoefficient() {
    return GetVelocityCoefficient();
  }

  private void SwigDirectorMethodOutputToASCIIFile(global::System.IntPtr file, double xmin, double xmax, int samples, char delimiter) {
    OutputToASCIIFile(new SWIGTYPE_p_std__ostream(file, false), xmin, xmax, samples, delimiter);
  }

  private global::System.IntPtr SwigDirectorMethodSampleUpToDerN__SWIG_0(double xmin, double xmax, double step, int derN) {
    return ChMatrixDynamicd.getCPtr(SampleUpToDerN(xmin, xmax, step, derN)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodSampleUpToDerN__SWIG_1(double xmin, double xmax, double step) {
    return ChMatrixDynamicd.getCPtr(SampleUpToDerN(xmin, xmax, step)).Handle;
  }

  private void SwigDirectorMethodArchiveOut(global::System.IntPtr archive_out) {
    ArchiveOut(new SWIGTYPE_p_chrono__ChArchiveOut(archive_out, false));
  }

  private void SwigDirectorMethodArchiveIn(global::System.IntPtr archive_in) {
    ArchiveIn(new SWIGTYPE_p_chrono__ChArchiveIn(archive_in, false));
  }

  private void SwigDirectorMethodSetSetpoint(double setpoint, double x) {
    SetSetpoint(setpoint, x);
  }

  private void SwigDirectorMethodSetSetpointAndDerivatives(double setpoint, double setpoint_dx, double setpoint_dxdx) {
    SetSetpointAndDerivatives(setpoint, setpoint_dx, setpoint_dxdx);
  }

  private double SwigDirectorMethodSetpointCallback(double x) {
    return SetpointCallback(x);
  }

  public delegate int SwigDelegateChFunctionSetpointCallback_0();
  public delegate double SwigDelegateChFunctionSetpointCallback_1(double x);
  public delegate double SwigDelegateChFunctionSetpointCallback_2(double x);
  public delegate double SwigDelegateChFunctionSetpointCallback_3(double x);
  public delegate double SwigDelegateChFunctionSetpointCallback_4(double x);
  public delegate double SwigDelegateChFunctionSetpointCallback_5(double x, int der_order);
  public delegate double SwigDelegateChFunctionSetpointCallback_6(double x);
  public delegate void SwigDelegateChFunctionSetpointCallback_7(double x);
  public delegate double SwigDelegateChFunctionSetpointCallback_8(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunctionSetpointCallback_9(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunctionSetpointCallback_10(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunctionSetpointCallback_11(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunctionSetpointCallback_12(double xmin, double xmax, double sampling_step, int der_order);
  public delegate double SwigDelegateChFunctionSetpointCallback_13();
  public delegate double SwigDelegateChFunctionSetpointCallback_14();
  public delegate double SwigDelegateChFunctionSetpointCallback_15();
  public delegate void SwigDelegateChFunctionSetpointCallback_16(global::System.IntPtr file, double xmin, double xmax, int samples, char delimiter);
  public delegate global::System.IntPtr SwigDelegateChFunctionSetpointCallback_17(double xmin, double xmax, double step, int derN);
  public delegate global::System.IntPtr SwigDelegateChFunctionSetpointCallback_18(double xmin, double xmax, double step);
  public delegate void SwigDelegateChFunctionSetpointCallback_19(global::System.IntPtr archive_out);
  public delegate void SwigDelegateChFunctionSetpointCallback_20(global::System.IntPtr archive_in);
  public delegate void SwigDelegateChFunctionSetpointCallback_21(double setpoint, double x);
  public delegate void SwigDelegateChFunctionSetpointCallback_22(double setpoint, double setpoint_dx, double setpoint_dxdx);
  public delegate double SwigDelegateChFunctionSetpointCallback_23(double x);

  private SwigDelegateChFunctionSetpointCallback_0 swigDelegate0;
  private SwigDelegateChFunctionSetpointCallback_1 swigDelegate1;
  private SwigDelegateChFunctionSetpointCallback_2 swigDelegate2;
  private SwigDelegateChFunctionSetpointCallback_3 swigDelegate3;
  private SwigDelegateChFunctionSetpointCallback_4 swigDelegate4;
  private SwigDelegateChFunctionSetpointCallback_5 swigDelegate5;
  private SwigDelegateChFunctionSetpointCallback_6 swigDelegate6;
  private SwigDelegateChFunctionSetpointCallback_7 swigDelegate7;
  private SwigDelegateChFunctionSetpointCallback_8 swigDelegate8;
  private SwigDelegateChFunctionSetpointCallback_9 swigDelegate9;
  private SwigDelegateChFunctionSetpointCallback_10 swigDelegate10;
  private SwigDelegateChFunctionSetpointCallback_11 swigDelegate11;
  private SwigDelegateChFunctionSetpointCallback_12 swigDelegate12;
  private SwigDelegateChFunctionSetpointCallback_13 swigDelegate13;
  private SwigDelegateChFunctionSetpointCallback_14 swigDelegate14;
  private SwigDelegateChFunctionSetpointCallback_15 swigDelegate15;
  private SwigDelegateChFunctionSetpointCallback_16 swigDelegate16;
  private SwigDelegateChFunctionSetpointCallback_17 swigDelegate17;
  private SwigDelegateChFunctionSetpointCallback_18 swigDelegate18;
  private SwigDelegateChFunctionSetpointCallback_19 swigDelegate19;
  private SwigDelegateChFunctionSetpointCallback_20 swigDelegate20;
  private SwigDelegateChFunctionSetpointCallback_21 swigDelegate21;
  private SwigDelegateChFunctionSetpointCallback_22 swigDelegate22;
  private SwigDelegateChFunctionSetpointCallback_23 swigDelegate23;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes8 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes9 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes10 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes11 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes12 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes13 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes14 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes15 = new global::System.Type[] {  };
  private static global::System.Type[] swigMethodTypes16 = new global::System.Type[] { typeof(SWIGTYPE_p_std__ostream), typeof(double), typeof(double), typeof(int), typeof(char) };
  private static global::System.Type[] swigMethodTypes17 = new global::System.Type[] { typeof(double), typeof(double), typeof(double), typeof(int) };
  private static global::System.Type[] swigMethodTypes18 = new global::System.Type[] { typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes19 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveOut) };
  private static global::System.Type[] swigMethodTypes20 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveIn) };
  private static global::System.Type[] swigMethodTypes21 = new global::System.Type[] { typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes22 = new global::System.Type[] { typeof(double), typeof(double), typeof(double) };
  private static global::System.Type[] swigMethodTypes23 = new global::System.Type[] { typeof(double) };
}
