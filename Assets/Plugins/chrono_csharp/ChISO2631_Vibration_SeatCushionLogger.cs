//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChISO2631_Vibration_SeatCushionLogger : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChISO2631_Vibration_SeatCushionLogger(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChISO2631_Vibration_SeatCushionLogger obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChISO2631_Vibration_SeatCushionLogger() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ChISO2631_Vibration_SeatCushionLogger(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChISO2631_Vibration_SeatCushionLogger() : this(chronoPINVOKE.new_ChISO2631_Vibration_SeatCushionLogger__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChISO2631_Vibration_SeatCushionLogger(double step) : this(chronoPINVOKE.new_ChISO2631_Vibration_SeatCushionLogger__SWIG_1(step), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Config(double step) {
    chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_Config(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddData(double speed, double acc_x, double acc_y, double acc_z) {
    chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_AddData__SWIG_0(swigCPtr, speed, acc_x, acc_y, acc_z);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddData(double speed, ChVector3d acc_v) {
    chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_AddData__SWIG_1(swigCPtr, speed, ChVector3d.getCPtr(acc_v));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reset() {
    chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_Reset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetExposureTime() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetExposureTime(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInputRMS_X() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetInputRMS_X(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInputRMS_Y() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetInputRMS_Y(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetInputRMS_Z() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetInputRMS_Z(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAW_X() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetAW_X(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAW_Y() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetAW_Y(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAW_Z() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetAW_Z(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAW_V() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetAW_V(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetCrestFactor() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetCrestFactor(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetVDV() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetVDV(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAVGSpeed() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetAVGSpeed(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetSeverityVDV() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetSeverityVDV(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetAbsorbedPowerVertical() {
    double ret = chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GetAbsorbedPowerVertical(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void GeneratePlotFile(string fName, string testInfo) {
    chronoPINVOKE.ChISO2631_Vibration_SeatCushionLogger_GeneratePlotFile(swigCPtr, fName, testInfo);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
