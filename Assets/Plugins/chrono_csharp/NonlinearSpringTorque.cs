//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class NonlinearSpringTorque : TorqueFunctor {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal NonlinearSpringTorque(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.NonlinearSpringTorque_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(NonlinearSpringTorque obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_NonlinearSpringTorque(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public NonlinearSpringTorque(double preload) : this(chrono_vehiclePINVOKE.new_NonlinearSpringTorque__SWIG_0(preload), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public NonlinearSpringTorque() : this(chrono_vehiclePINVOKE.new_NonlinearSpringTorque__SWIG_1(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public NonlinearSpringTorque(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t dataK, double preload) : this(chrono_vehiclePINVOKE.new_NonlinearSpringTorque__SWIG_2(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t.getCPtr(dataK), preload), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public NonlinearSpringTorque(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t dataK) : this(chrono_vehiclePINVOKE.new_NonlinearSpringTorque__SWIG_3(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t.getCPtr(dataK)), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void add_pointK(double x, double y) {
    chrono_vehiclePINVOKE.NonlinearSpringTorque_add_pointK(swigCPtr, x, y);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public override double evaluate(double time, double rest_angle, double angle, double vel, ChLinkRSDA link) {
    double ret = chrono_vehiclePINVOKE.NonlinearSpringTorque_evaluate(swigCPtr, time, rest_angle, angle, vel, ChLinkRSDA.getCPtr(link));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
