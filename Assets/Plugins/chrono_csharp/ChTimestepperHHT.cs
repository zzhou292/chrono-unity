//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTimestepperHHT : ChTimestepperIIorder {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTimestepperHHT(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChTimestepperHHT_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTimestepperHHT obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChTimestepperHHT(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChTimestepperHHT(ChIntegrableIIorder intgr) : this(chronoPINVOKE.new_ChTimestepperHHT__SWIG_0(ChIntegrableIIorder.getCPtr(intgr)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTimestepperHHT() : this(chronoPINVOKE.new_ChTimestepperHHT__SWIG_1(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual new ChTimestepper.Type GetType() {
    ChTimestepper.Type ret = (ChTimestepper.Type)chronoPINVOKE.ChTimestepperHHT_GetType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAlpha(double val) {
    chronoPINVOKE.ChTimestepperHHT_SetAlpha(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetAlpha() {
    double ret = chronoPINVOKE.ChTimestepperHHT_GetAlpha(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetStepControl(bool enable) {
    chronoPINVOKE.ChTimestepperHHT_SetStepControl(swigCPtr, enable);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMinStepSize(double step) {
    chronoPINVOKE.ChTimestepperHHT_SetMinStepSize(swigCPtr, step);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaxItersSuccess(int iters) {
    chronoPINVOKE.ChTimestepperHHT_SetMaxItersSuccess(swigCPtr, iters);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRequiredSuccessfulSteps(int num_steps) {
    chronoPINVOKE.ChTimestepperHHT_SetRequiredSuccessfulSteps(swigCPtr, num_steps);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStepIncreaseFactor(double factor) {
    chronoPINVOKE.ChTimestepperHHT_SetStepIncreaseFactor(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetStepDecreaseFactor(double factor) {
    chronoPINVOKE.ChTimestepperHHT_SetStepDecreaseFactor(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetModifiedNewton(bool enable) {
    chronoPINVOKE.ChTimestepperHHT_SetModifiedNewton(swigCPtr, enable);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Advance(double dt) {
    chronoPINVOKE.ChTimestepperHHT_Advance(swigCPtr, dt);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetEstimatedConvergenceRate() {
    double ret = chronoPINVOKE.ChTimestepperHHT_GetEstimatedConvergenceRate(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive) {
    chronoPINVOKE.ChTimestepperHHT_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive) {
    chronoPINVOKE.ChTimestepperHHT_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetMaxIters(int iters) {
    chronoPINVOKE.ChTimestepperHHT_SetMaxIters(swigCPtr, iters);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRelTolerance(double rel_tol) {
    chronoPINVOKE.ChTimestepperHHT_SetRelTolerance(swigCPtr, rel_tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAbsTolerances(double abs_tolS, double abs_tolL) {
    chronoPINVOKE.ChTimestepperHHT_SetAbsTolerances__SWIG_0(swigCPtr, abs_tolS, abs_tolL);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetAbsTolerances(double abs_tol) {
    chronoPINVOKE.ChTimestepperHHT_SetAbsTolerances__SWIG_1(swigCPtr, abs_tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetNumIterations() {
    int ret = chronoPINVOKE.ChTimestepperHHT_GetNumIterations(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNumSetupCalls() {
    int ret = chronoPINVOKE.ChTimestepperHHT_GetNumSetupCalls(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int GetNumSolveCalls() {
    int ret = chronoPINVOKE.ChTimestepperHHT_GetNumSolveCalls(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
