//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChLinkMarkers : ChLink {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChLinkMarkers(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChLinkMarkers_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChLinkMarkers obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChLinkMarkers(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChMarker GetMarker1() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkMarkers_GetMarker1(swigCPtr);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMarker GetMarker2() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChLinkMarkers_GetMarker2(swigCPtr);
    ChMarker ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChMarker(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame1Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMarkers_GetFrame1Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetFrame2Rel() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMarkers_GetFrame2Rel(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetRelCoordsys() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChLinkMarkers_GetRelCoordsys(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetRelCoordsysDt() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChLinkMarkers_GetRelCoordsysDt(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChCoordsysd GetRelCoordsysDt2() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChLinkMarkers_GetRelCoordsysDt2(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRelAngle() {
    double ret = chronoPINVOKE.ChLinkMarkers_GetRelAngle(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetRelAxis() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkMarkers_GetRelAxis(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetRelAngleAxis() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkMarkers_GetRelAngleAxis(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetRelativeAngVel() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkMarkers_GetRelativeAngVel(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetRelativeAngAcc() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkMarkers_GetRelativeAngAcc(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDistance() {
    double ret = chronoPINVOKE.ChLinkMarkers_GetDistance(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetDistanceDt() {
    double ret = chronoPINVOKE.ChLinkMarkers_GetDistanceDt(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAccumulatedForce() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkMarkers_GetAccumulatedForce(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAccumulatedTorque() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChLinkMarkers_GetAccumulatedTorque(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetupMarkers(ChMarker mark1, ChMarker mark2) {
    chronoPINVOKE.ChLinkMarkers_SetupMarkers(swigCPtr, ChMarker.getCPtr(mark1), ChMarker.getCPtr(mark2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChMarker mark1, ChMarker mark2) {
    chronoPINVOKE.ChLinkMarkers_Initialize__SWIG_0(swigCPtr, ChMarker.getCPtr(mark1), ChMarker.getCPtr(mark2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChBody mbody1, ChBody mbody2, ChFramed frame) {
    chronoPINVOKE.ChLinkMarkers_Initialize__SWIG_1(swigCPtr, ChBody.getCPtr(mbody1), ChBody.getCPtr(mbody2), ChFramed.getCPtr(frame));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Initialize(ChBody mbody1, ChBody mbody2, bool rel_frames, ChFramed frame1, ChFramed frame2) {
    chronoPINVOKE.ChLinkMarkers_Initialize__SWIG_2(swigCPtr, ChBody.getCPtr(mbody1), ChBody.getCPtr(mbody2), rel_frames, ChFramed.getCPtr(frame1), ChFramed.getCPtr(frame2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChFramed GetVisualModelFrame(uint nclone) {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMarkers_GetVisualModelFrame__SWIG_0(swigCPtr, nclone), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChFramed GetVisualModelFrame() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChLinkMarkers_GetVisualModelFrame__SWIG_1(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void UpdateRelMarkerCoords() {
    chronoPINVOKE.ChLinkMarkers_UpdateRelMarkerCoords(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void UpdateForces(double mytime) {
    chronoPINVOKE.ChLinkMarkers_UpdateForces(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime, bool update_assets) {
    chronoPINVOKE.ChLinkMarkers_Update__SWIG_0(swigCPtr, mytime, update_assets);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Update(double mytime) {
    chronoPINVOKE.ChLinkMarkers_Update__SWIG_1(swigCPtr, mytime);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void IntLoadResidual_F(uint off, ChVectorDynamicd R, double c) {
    chronoPINVOKE.ChLinkMarkers_IntLoadResidual_F(swigCPtr, off, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsFbLoadForces(double factor) {
    chronoPINVOKE.ChLinkMarkers_ConstraintsFbLoadForces__SWIG_0(swigCPtr, factor);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ConstraintsFbLoadForces() {
    chronoPINVOKE.ChLinkMarkers_ConstraintsFbLoadForces__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChLinkMarkers_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChLinkMarkers_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
