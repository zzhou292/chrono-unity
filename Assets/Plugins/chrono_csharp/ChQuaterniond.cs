//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChQuaterniond : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChQuaterniond(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChQuaterniond obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChQuaterniond() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ChQuaterniond(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChQuaterniond() : this(chronoPINVOKE.new_ChQuaterniond__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaterniond(double e0, double e1, double e2, double e3) : this(chronoPINVOKE.new_ChQuaterniond__SWIG_1(e0, e1, e2, e3), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaterniond(double s, ChVector3d v) : this(chronoPINVOKE.new_ChQuaterniond__SWIG_2(s, ChVector3d.getCPtr(v)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaterniond(ChQuaterniond other) : this(chronoPINVOKE.new_ChQuaterniond__SWIG_3(ChQuaterniond.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_double data() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChQuaterniond_data__SWIG_0(swigCPtr);
    SWIGTYPE_p_double ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Set(double e0, double e1, double e2, double e3) {
    chronoPINVOKE.ChQuaterniond_Set__SWIG_0(swigCPtr, e0, e1, e2, e3);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(ChQuaterniond q) {
    chronoPINVOKE.ChQuaterniond_Set__SWIG_1(swigCPtr, ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(double s) {
    chronoPINVOKE.ChQuaterniond_Set__SWIG_2(swigCPtr, s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetNull() {
    chronoPINVOKE.ChQuaterniond_SetNull(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetUnit() {
    chronoPINVOKE.ChQuaterniond_SetUnit(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetScalar(double s) {
    chronoPINVOKE.ChQuaterniond_SetScalar(swigCPtr, s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetVector(ChVector3d v) {
    chronoPINVOKE.ChQuaterniond_SetVector(swigCPtr, ChVector3d.getCPtr(v));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool IsNull() {
    bool ret = chronoPINVOKE.ChQuaterniond_IsNull(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool IsIdentity() {
    bool ret = chronoPINVOKE.ChQuaterniond_IsIdentity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChQuaterniond other) {
    bool ret = chronoPINVOKE.ChQuaterniond_Equals__SWIG_0(swigCPtr, ChQuaterniond.getCPtr(other));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChQuaterniond other, double tol) {
    bool ret = chronoPINVOKE.ChQuaterniond_Equals__SWIG_1(swigCPtr, ChQuaterniond.getCPtr(other), tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetVector() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_GetVector(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAxisX() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_GetAxisX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAxisY() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_GetAxisY(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetAxisZ() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_GetAxisZ(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Length() {
    double ret = chronoPINVOKE.ChQuaterniond_Length(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double Length2() {
    double ret = chronoPINVOKE.ChQuaterniond_Length2(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double LengthInf() {
    double ret = chronoPINVOKE.ChQuaterniond_LengthInf(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond conj() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChQuaterniond_conj(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Add(ChQuaterniond A, ChQuaterniond B) {
    chronoPINVOKE.ChQuaterniond_Add(swigCPtr, ChQuaterniond.getCPtr(A), ChQuaterniond.getCPtr(B));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Sub(ChQuaterniond A, ChQuaterniond B) {
    chronoPINVOKE.ChQuaterniond_Sub(swigCPtr, ChQuaterniond.getCPtr(A), ChQuaterniond.getCPtr(B));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Cross(ChQuaterniond qa, ChQuaterniond qb) {
    chronoPINVOKE.ChQuaterniond_Cross(swigCPtr, ChQuaterniond.getCPtr(qa), ChQuaterniond.getCPtr(qb));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double Dot(ChQuaterniond B) {
    double ret = chronoPINVOKE.ChQuaterniond_Dot(swigCPtr, ChQuaterniond.getCPtr(B));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Mul(ChQuaterniond A, double s) {
    chronoPINVOKE.ChQuaterniond_Mul(swigCPtr, ChQuaterniond.getCPtr(A), s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Scale(double s) {
    chronoPINVOKE.ChQuaterniond_Scale(swigCPtr, s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool Normalize() {
    bool ret = chronoPINVOKE.ChQuaterniond_Normalize(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetNormalized() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChQuaterniond_GetNormalized(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Conjugate(ChQuaterniond A) {
    chronoPINVOKE.ChQuaterniond_Conjugate__SWIG_0(swigCPtr, ChQuaterniond.getCPtr(A));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Conjugate() {
    chronoPINVOKE.ChQuaterniond_Conjugate__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChQuaterniond GetConjugate() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChQuaterniond_GetConjugate(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetInverse() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChQuaterniond_GetInverse(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d Rotate(ChVector3d A) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_Rotate(swigCPtr, ChVector3d.getCPtr(A)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d RotateBack(ChVector3d A) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_RotateBack(swigCPtr, ChVector3d.getCPtr(A)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFromRotVec(ChVector3d angle_axis) {
    chronoPINVOKE.ChQuaterniond_SetFromRotVec(swigCPtr, ChVector3d.getCPtr(angle_axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetRotVec() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_GetRotVec(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFromAngleAxis(double angle, ChVector3d axis) {
    chronoPINVOKE.ChQuaterniond_SetFromAngleAxis(swigCPtr, angle, ChVector3d.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAngleX(double angleX) {
    chronoPINVOKE.ChQuaterniond_SetFromAngleX(swigCPtr, angleX);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAngleY(double angleY) {
    chronoPINVOKE.ChQuaterniond_SetFromAngleY(swigCPtr, angleY);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromAngleZ(double angleZ) {
    chronoPINVOKE.ChQuaterniond_SetFromAngleZ(swigCPtr, angleZ);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAngleAxis(SWIGTYPE_p_double angle, ChVector3d axis) {
    chronoPINVOKE.ChQuaterniond_GetAngleAxis(swigCPtr, SWIGTYPE_p_double.getCPtr(angle), ChVector3d.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFromCardanAnglesZYX(ChVector3d ang) {
    chronoPINVOKE.ChQuaterniond_SetFromCardanAnglesZYX(swigCPtr, ChVector3d.getCPtr(ang));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetCardanAnglesZYX() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_GetCardanAnglesZYX(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFromCardanAnglesXYZ(ChVector3d ang) {
    chronoPINVOKE.ChQuaterniond_SetFromCardanAnglesXYZ(swigCPtr, ChVector3d.getCPtr(ang));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d GetCardanAnglesXYZ() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChQuaterniond_GetCardanAnglesXYZ(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetDtFromAngVelAbs(ChVector3d w, ChQuaterniond q) {
    chronoPINVOKE.ChQuaterniond_SetDtFromAngVelAbs(swigCPtr, ChVector3d.getCPtr(w), ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDtFromAngVelRel(ChVector3d w, ChQuaterniond q) {
    chronoPINVOKE.ChQuaterniond_SetDtFromAngVelRel(swigCPtr, ChVector3d.getCPtr(w), ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAngVelAbs(ChVector3d w, ChQuaterniond q) {
    chronoPINVOKE.ChQuaterniond_GetAngVelAbs(swigCPtr, ChVector3d.getCPtr(w), ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void GetAngVelRel(ChVector3d w, ChQuaterniond q) {
    chronoPINVOKE.ChQuaterniond_GetAngVelRel(swigCPtr, ChVector3d.getCPtr(w), ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDt2FromAngAccAbs(ChVector3d a, ChQuaterniond q, ChQuaterniond q_dt) {
    chronoPINVOKE.ChQuaterniond_SetDt2FromAngAccAbs(swigCPtr, ChVector3d.getCPtr(a), ChQuaterniond.getCPtr(q), ChQuaterniond.getCPtr(q_dt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDt2FromAngAccRel(ChVector3d a, ChQuaterniond q, ChQuaterniond q_dt) {
    chronoPINVOKE.ChQuaterniond_SetDt2FromAngAccRel(swigCPtr, ChVector3d.getCPtr(a), ChQuaterniond.getCPtr(q), ChQuaterniond.getCPtr(q_dt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDtFromAngleAxis(ChQuaterniond q, double angle_dt, ChVector3d axis) {
    chronoPINVOKE.ChQuaterniond_SetDtFromAngleAxis(swigCPtr, ChQuaterniond.getCPtr(q), angle_dt, ChVector3d.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetDt2FromAngleAxis(ChQuaterniond q, ChQuaterniond q_dt, double angle_dtdt, ChVector3d axis) {
    chronoPINVOKE.ChQuaterniond_SetDt2FromAngleAxis(swigCPtr, ChQuaterniond.getCPtr(q), ChQuaterniond.getCPtr(q_dt), angle_dtdt, ChVector3d.getCPtr(axis));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChQuaterniond_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChQuaterniond_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double e0 {
    set {
      chronoPINVOKE.ChQuaterniond_e0_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chronoPINVOKE.ChQuaterniond_e0_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double e1 {
    set {
      chronoPINVOKE.ChQuaterniond_e1_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chronoPINVOKE.ChQuaterniond_e1_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double e2 {
    set {
      chronoPINVOKE.ChQuaterniond_e2_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chronoPINVOKE.ChQuaterniond_e2_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public double e3 {
    set {
      chronoPINVOKE.ChQuaterniond_e3_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      double ret = chronoPINVOKE.ChQuaterniond_e3_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
