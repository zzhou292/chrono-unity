//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ODE : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ODE(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ODE obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ODE() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ODE(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual uint GetNumStates() {
    uint ret = chronoPINVOKE.ODE_GetNumStates(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetInitialConditions(ChVectorDynamicd states, ChLinkTSDA link) {
    chronoPINVOKE.ODE_SetInitialConditions(swigCPtr, ChVectorDynamicd.getCPtr(states), ChLinkTSDA.getCPtr(link));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void CalculateRHS(double time, ChVectorDynamicd states, ChVectorDynamicd rhs, ChLinkTSDA link) {
    chronoPINVOKE.ODE_CalculateRHS(swigCPtr, time, ChVectorDynamicd.getCPtr(states), ChVectorDynamicd.getCPtr(rhs), ChLinkTSDA.getCPtr(link));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool CalculateJac(double time, ChVectorDynamicd states, ChVectorDynamicd rhs, ChMatrixDynamicd jac, ChLinkTSDA link) {
    bool ret = chronoPINVOKE.ODE_CalculateJac(swigCPtr, time, ChVectorDynamicd.getCPtr(states), ChVectorDynamicd.getCPtr(rhs), ChMatrixDynamicd.getCPtr(jac), ChLinkTSDA.getCPtr(link));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
