//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChIntegrable : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChIntegrable(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChIntegrable obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChIntegrable() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChIntegrable(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public virtual uint GetNumCoordsPosLevel() {
    uint ret = chronoPINVOKE.ChIntegrable_GetNumCoordsPosLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumCoordsVelLevel() {
    uint ret = chronoPINVOKE.ChIntegrable_GetNumCoordsVelLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumCoordsAccLevel() {
    uint ret = chronoPINVOKE.ChIntegrable_GetNumCoordsAccLevel(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual uint GetNumConstraints() {
    uint ret = chronoPINVOKE.ChIntegrable_GetNumConstraints(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void StateSetup(ChState y, ChStateDelta dy) {
    chronoPINVOKE.ChIntegrable_StateSetup(swigCPtr, ChState.getCPtr(y), ChStateDelta.getCPtr(dy));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateGather(ChState y, SWIGTYPE_p_double T) {
    chronoPINVOKE.ChIntegrable_StateGather(swigCPtr, ChState.getCPtr(y), SWIGTYPE_p_double.getCPtr(T));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateScatter(ChState y, double T, bool full_update) {
    chronoPINVOKE.ChIntegrable_StateScatter(swigCPtr, ChState.getCPtr(y), T, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateGatherDerivative(ChStateDelta Dydt) {
    chronoPINVOKE.ChIntegrable_StateGatherDerivative(swigCPtr, ChStateDelta.getCPtr(Dydt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateScatterDerivative(ChStateDelta Dydt) {
    chronoPINVOKE.ChIntegrable_StateScatterDerivative(swigCPtr, ChStateDelta.getCPtr(Dydt));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateGatherReactions(ChVectorDynamicd L) {
    chronoPINVOKE.ChIntegrable_StateGatherReactions(swigCPtr, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void StateScatterReactions(ChVectorDynamicd L) {
    chronoPINVOKE.ChIntegrable_StateScatterReactions(swigCPtr, ChVectorDynamicd.getCPtr(L));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool StateSolve(ChStateDelta Dydt, ChVectorDynamicd L, ChState y, double T, double dt, bool force_state_scatter, bool full_update, ChLumpingParms lumping) {
    bool ret = chronoPINVOKE.ChIntegrable_StateSolve__SWIG_0(swigCPtr, ChStateDelta.getCPtr(Dydt), ChVectorDynamicd.getCPtr(L), ChState.getCPtr(y), T, dt, force_state_scatter, full_update, ChLumpingParms.getCPtr(lumping));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool StateSolve(ChStateDelta Dydt, ChVectorDynamicd L, ChState y, double T, double dt, bool force_state_scatter, bool full_update) {
    bool ret = chronoPINVOKE.ChIntegrable_StateSolve__SWIG_1(swigCPtr, ChStateDelta.getCPtr(Dydt), ChVectorDynamicd.getCPtr(L), ChState.getCPtr(y), T, dt, force_state_scatter, full_update);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void StateIncrement(ChState y_new, ChState y, ChStateDelta Dy) {
    chronoPINVOKE.ChIntegrable_StateIncrement(swigCPtr, ChState.getCPtr(y_new), ChState.getCPtr(y), ChStateDelta.getCPtr(Dy));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual bool StateSolveCorrection(ChStateDelta Dy, ChVectorDynamicd DL, ChVectorDynamicd R, ChVectorDynamicd Qc, double a, double b, ChState y, double T, double dt, bool force_state_scatter, bool full_update, bool force_setup) {
    bool ret = chronoPINVOKE.ChIntegrable_StateSolveCorrection(swigCPtr, ChStateDelta.getCPtr(Dy), ChVectorDynamicd.getCPtr(DL), ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(Qc), a, b, ChState.getCPtr(y), T, dt, force_state_scatter, full_update, force_setup);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void LoadResidual_Hv(ChVectorDynamicd R, ChVectorDynamicd v, double c) {
    chronoPINVOKE.ChIntegrable_LoadResidual_Hv(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(v), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadResidual_F(ChVectorDynamicd R, double c) {
    chronoPINVOKE.ChIntegrable_LoadResidual_F(swigCPtr, ChVectorDynamicd.getCPtr(R), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadResidual_CqL(ChVectorDynamicd R, ChVectorDynamicd L, double c) {
    chronoPINVOKE.ChIntegrable_LoadResidual_CqL(swigCPtr, ChVectorDynamicd.getCPtr(R), ChVectorDynamicd.getCPtr(L), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadConstraint_C(ChVectorDynamicd Qc, double c, bool do_clamp, double mclam) {
    chronoPINVOKE.ChIntegrable_LoadConstraint_C__SWIG_0(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c, do_clamp, mclam);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadConstraint_C(ChVectorDynamicd Qc, double c, bool do_clamp) {
    chronoPINVOKE.ChIntegrable_LoadConstraint_C__SWIG_1(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c, do_clamp);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadConstraint_C(ChVectorDynamicd Qc, double c) {
    chronoPINVOKE.ChIntegrable_LoadConstraint_C__SWIG_2(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void LoadConstraint_Ct(ChVectorDynamicd Qc, double c) {
    chronoPINVOKE.ChIntegrable_LoadConstraint_Ct(swigCPtr, ChVectorDynamicd.getCPtr(Qc), c);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
