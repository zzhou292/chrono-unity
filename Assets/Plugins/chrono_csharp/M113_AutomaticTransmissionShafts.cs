//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class M113_AutomaticTransmissionShafts : ChAutomaticTransmissionShafts {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal M113_AutomaticTransmissionShafts(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(M113_AutomaticTransmissionShafts obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_M113_AutomaticTransmissionShafts(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public M113_AutomaticTransmissionShafts(string name) : this(chrono_vehiclePINVOKE.new_M113_AutomaticTransmissionShafts(name), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetGearRatios(vector_double fwd, SWIGTYPE_p_double rev) {
    chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_SetGearRatios(swigCPtr, vector_double.getCPtr(fwd), SWIGTYPE_p_double.getCPtr(rev));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual double GetTransmissionBlockInertia() {
    double ret = chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_GetTransmissionBlockInertia(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetIngearShaftInertia() {
    double ret = chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_GetIngearShaftInertia(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetMotorshaftInertia() {
    double ret = chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_GetMotorshaftInertia(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDriveshaftInertia() {
    double ret = chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_GetDriveshaftInertia(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetUpshiftRPM() {
    double ret = chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_GetUpshiftRPM(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double GetDownshiftRPM() {
    double ret = chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_GetDownshiftRPM(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void SetTorqueConverterCapacityFactorMap(SWIGTYPE_p_std__shared_ptrT_ChFunctionInterp_t map) {
    chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_SetTorqueConverterCapacityFactorMap(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunctionInterp_t.getCPtr(map));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetTorqeConverterTorqueRatioMap(SWIGTYPE_p_std__shared_ptrT_ChFunctionInterp_t map) {
    chrono_vehiclePINVOKE.M113_AutomaticTransmissionShafts_SetTorqeConverterTorqueRatioMap(swigCPtr, SWIGTYPE_p_std__shared_ptrT_ChFunctionInterp_t.getCPtr(map));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
