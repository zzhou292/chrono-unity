//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTrackCustomContact : ChLoadContainer {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTrackCustomContact(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chrono_vehiclePINVOKE.ChTrackCustomContact_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTrackCustomContact obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chrono_vehiclePINVOKE.delete_ChTrackCustomContact(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public virtual bool OverridesIdlerContact() {
    bool ret = chrono_vehiclePINVOKE.ChTrackCustomContact_OverridesIdlerContact(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool OverridesWheelContact() {
    bool ret = chrono_vehiclePINVOKE.ChTrackCustomContact_OverridesWheelContact(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool OverridesGroundContact() {
    bool ret = chrono_vehiclePINVOKE.ChTrackCustomContact_OverridesGroundContact(swigCPtr);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ComputeIdlerContactForce(ChCollisionInfo cinfo, ChBody idlerBody, ChBody shoeBody, ChVector3d forceShoe) {
    chrono_vehiclePINVOKE.ChTrackCustomContact_ComputeIdlerContactForce(swigCPtr, ChCollisionInfo.getCPtr(cinfo), ChBody.getCPtr(idlerBody), ChBody.getCPtr(shoeBody), ChVector3d.getCPtr(forceShoe));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ComputeWheelContactForce(ChCollisionInfo cinfo, ChBody wheelBody, ChBody shoeBody, ChVector3d forceShoe) {
    chrono_vehiclePINVOKE.ChTrackCustomContact_ComputeWheelContactForce(swigCPtr, ChCollisionInfo.getCPtr(cinfo), ChBody.getCPtr(wheelBody), ChBody.getCPtr(shoeBody), ChVector3d.getCPtr(forceShoe));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ComputeGroundContactForce(ChCollisionInfo cinfo, ChBody groundBody, ChBody shoeBody, ChVector3d forceShoe) {
    chrono_vehiclePINVOKE.ChTrackCustomContact_ComputeGroundContactForce(swigCPtr, ChCollisionInfo.getCPtr(cinfo), ChBody.getCPtr(groundBody), ChBody.getCPtr(shoeBody), ChVector3d.getCPtr(forceShoe));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTrackCustomContact() : this(chrono_vehiclePINVOKE.new_ChTrackCustomContact(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
