//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChMapData : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChMapData(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChMapData obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChMapData() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chrono_vehiclePINVOKE.delete_ChMapData(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChMapData() : this(chrono_vehiclePINVOKE.new_ChMapData(), true) {
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Read(SWIGTYPE_p_rapidjson__Value a) {
    chrono_vehiclePINVOKE.ChMapData_Read(swigCPtr, SWIGTYPE_p_rapidjson__Value.getCPtr(a));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(SWIGTYPE_p_ChFunctionInterp map, double x_factor, double y_factor) {
    chrono_vehiclePINVOKE.ChMapData_Set__SWIG_0(swigCPtr, SWIGTYPE_p_ChFunctionInterp.getCPtr(map), x_factor, y_factor);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(SWIGTYPE_p_ChFunctionInterp map, double x_factor) {
    chrono_vehiclePINVOKE.ChMapData_Set__SWIG_1(swigCPtr, SWIGTYPE_p_ChFunctionInterp.getCPtr(map), x_factor);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(SWIGTYPE_p_ChFunctionInterp map) {
    chrono_vehiclePINVOKE.ChMapData_Set__SWIG_2(swigCPtr, SWIGTYPE_p_ChFunctionInterp.getCPtr(map));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t vec, double x_factor, double y_factor) {
    chrono_vehiclePINVOKE.ChMapData_Set__SWIG_3(swigCPtr, SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t.getCPtr(vec), x_factor, y_factor);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t vec, double x_factor) {
    chrono_vehiclePINVOKE.ChMapData_Set__SWIG_4(swigCPtr, SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t.getCPtr(vec), x_factor);
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

  public void Set(SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t vec) {
    chrono_vehiclePINVOKE.ChMapData_Set__SWIG_5(swigCPtr, SWIGTYPE_p_std__vectorT_std__pairT_double_double_t_t.getCPtr(vec));
    if (chrono_vehiclePINVOKE.SWIGPendingException.Pending) throw chrono_vehiclePINVOKE.SWIGPendingException.Retrieve();
  }

}
