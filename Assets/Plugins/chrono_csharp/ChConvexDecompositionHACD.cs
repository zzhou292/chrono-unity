//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChConvexDecompositionHACD : ChConvexDecomposition {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal ChConvexDecompositionHACD(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChConvexDecompositionHACD_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChConvexDecompositionHACD obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          chronoPINVOKE.delete_ChConvexDecompositionHACD(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChConvexDecompositionHACD() : this(chronoPINVOKE.new_ChConvexDecompositionHACD(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Reset() {
    chronoPINVOKE.ChConvexDecompositionHACD_Reset(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool AddTriangle(ChVector3d v1, ChVector3d v2, ChVector3d v3) {
    bool ret = chronoPINVOKE.ChConvexDecompositionHACD_AddTriangle(swigCPtr, ChVector3d.getCPtr(v1), ChVector3d.getCPtr(v2), ChVector3d.getCPtr(v3));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool AddTriangleMesh(ChTriangleMesh tm) {
    bool ret = chronoPINVOKE.ChConvexDecompositionHACD_AddTriangleMesh(swigCPtr, ChTriangleMesh.getCPtr(tm));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetParameters(uint nClusters, uint targetDecimation, double smallClusterThreshold, bool addFacesPoints, bool addExtraDistPoints, double concavity, double ccConnectDist, double volumeWeight, double compacityAlpha, uint nVerticesPerCH) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_0(swigCPtr, nClusters, targetDecimation, smallClusterThreshold, addFacesPoints, addExtraDistPoints, concavity, ccConnectDist, volumeWeight, compacityAlpha, nVerticesPerCH);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters, uint targetDecimation, double smallClusterThreshold, bool addFacesPoints, bool addExtraDistPoints, double concavity, double ccConnectDist, double volumeWeight, double compacityAlpha) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_1(swigCPtr, nClusters, targetDecimation, smallClusterThreshold, addFacesPoints, addExtraDistPoints, concavity, ccConnectDist, volumeWeight, compacityAlpha);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters, uint targetDecimation, double smallClusterThreshold, bool addFacesPoints, bool addExtraDistPoints, double concavity, double ccConnectDist, double volumeWeight) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_2(swigCPtr, nClusters, targetDecimation, smallClusterThreshold, addFacesPoints, addExtraDistPoints, concavity, ccConnectDist, volumeWeight);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters, uint targetDecimation, double smallClusterThreshold, bool addFacesPoints, bool addExtraDistPoints, double concavity, double ccConnectDist) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_3(swigCPtr, nClusters, targetDecimation, smallClusterThreshold, addFacesPoints, addExtraDistPoints, concavity, ccConnectDist);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters, uint targetDecimation, double smallClusterThreshold, bool addFacesPoints, bool addExtraDistPoints, double concavity) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_4(swigCPtr, nClusters, targetDecimation, smallClusterThreshold, addFacesPoints, addExtraDistPoints, concavity);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters, uint targetDecimation, double smallClusterThreshold, bool addFacesPoints, bool addExtraDistPoints) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_5(swigCPtr, nClusters, targetDecimation, smallClusterThreshold, addFacesPoints, addExtraDistPoints);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters, uint targetDecimation, double smallClusterThreshold, bool addFacesPoints) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_6(swigCPtr, nClusters, targetDecimation, smallClusterThreshold, addFacesPoints);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters, uint targetDecimation, double smallClusterThreshold) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_7(swigCPtr, nClusters, targetDecimation, smallClusterThreshold);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters, uint targetDecimation) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_8(swigCPtr, nClusters, targetDecimation);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters(uint nClusters) {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_9(swigCPtr, nClusters);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetParameters() {
    chronoPINVOKE.ChConvexDecompositionHACD_SetParameters__SWIG_10(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override int ComputeConvexDecomposition() {
    int ret = chronoPINVOKE.ChConvexDecompositionHACD_ComputeConvexDecomposition(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetHullCount() {
    uint ret = chronoPINVOKE.ChConvexDecompositionHACD_GetHullCount(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool GetConvexHullResult(uint hullIndex, ChTriangleMesh convextrimesh) {
    bool ret = chronoPINVOKE.ChConvexDecompositionHACD_GetConvexHullResult__SWIG_0(swigCPtr, hullIndex, ChTriangleMesh.getCPtr(convextrimesh));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool GetConvexHullResult(uint hullIndex, vector_ChVector3d convexhull) {
    bool ret = chronoPINVOKE.ChConvexDecompositionHACD_GetConvexHullResult__SWIG_1(swigCPtr, hullIndex, vector_ChVector3d.getCPtr(convexhull));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void WriteConvexHullsAsWavefrontObj(SWIGTYPE_p_std__ostream mstream) {
    chronoPINVOKE.ChConvexDecompositionHACD_WriteConvexHullsAsWavefrontObj(swigCPtr, SWIGTYPE_p_std__ostream.getCPtr(mstream));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
