//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChAssemblyAnalysis : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChAssemblyAnalysis(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChAssemblyAnalysis obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChAssemblyAnalysis() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChAssemblyAnalysis(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChAssemblyAnalysis(ChIntegrableIIorder mintegrable) : this(chronoPINVOKE.new_ChAssemblyAnalysis(ChIntegrableIIorder.getCPtr(mintegrable)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ExitFlag AssemblyAnalysis(int action, double dt) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChAssemblyAnalysis_AssemblyAnalysis__SWIG_0(swigCPtr, action, dt);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ExitFlag AssemblyAnalysis(int action) {
    ExitFlag ret = (ExitFlag)chronoPINVOKE.ChAssemblyAnalysis_AssemblyAnalysis__SWIG_1(swigCPtr, action);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetMaxAssemblyIters(int mi) {
    chronoPINVOKE.ChAssemblyAnalysis_SetMaxAssemblyIters(swigCPtr, mi);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public int GetMaxAssemblyIters() {
    int ret = chronoPINVOKE.ChAssemblyAnalysis_GetMaxAssemblyIters(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRelToleranceUpdate(double tol) {
    chronoPINVOKE.ChAssemblyAnalysis_SetRelToleranceUpdate(swigCPtr, tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetRelToleranceUpdate() {
    double ret = chronoPINVOKE.ChAssemblyAnalysis_GetRelToleranceUpdate(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAbsToleranceUpdate(double tol) {
    chronoPINVOKE.ChAssemblyAnalysis_SetAbsToleranceUpdate(swigCPtr, tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetAbsToleranceUpdate() {
    double ret = chronoPINVOKE.ChAssemblyAnalysis_GetAbsToleranceUpdate(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetAbsToleranceResidual(double tol) {
    chronoPINVOKE.ChAssemblyAnalysis_SetAbsToleranceResidual(swigCPtr, tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetAbsToleranceResidual() {
    double ret = chronoPINVOKE.ChAssemblyAnalysis_GetAbsToleranceResidual(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetLastResidualNorm() {
    double ret = chronoPINVOKE.ChAssemblyAnalysis_GetLastResidualNorm(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetLastUpdateNorm() {
    double ret = chronoPINVOKE.ChAssemblyAnalysis_GetLastUpdateNorm(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetLastIters() {
    uint ret = chronoPINVOKE.ChAssemblyAnalysis_GetLastIters(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChIntegrable GetIntegrable() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChAssemblyAnalysis_GetIntegrable(swigCPtr);
    ChIntegrable ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChIntegrable(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd GetLagrangeMultipliers() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChAssemblyAnalysis_GetLagrangeMultipliers(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChState GetStatePos() {
    ChState ret = new ChState(chronoPINVOKE.ChAssemblyAnalysis_GetStatePos(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChStateDelta GetStateVel() {
    ChStateDelta ret = new ChStateDelta(chronoPINVOKE.ChAssemblyAnalysis_GetStateVel(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChStateDelta GetStateAcc() {
    ChStateDelta ret = new ChStateDelta(chronoPINVOKE.ChAssemblyAnalysis_GetStateAcc(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

}
