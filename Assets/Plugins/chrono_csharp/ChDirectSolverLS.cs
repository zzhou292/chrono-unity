//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChDirectSolverLS : ChSolverLS {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChDirectSolverLS(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChDirectSolverLS_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChDirectSolverLS obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChDirectSolverLS(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public void LockSparsityPattern(bool val) {
    chronoPINVOKE.ChDirectSolverLS_LockSparsityPattern(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UseSparsityPatternLearner(bool val) {
    chronoPINVOKE.ChDirectSolverLS_UseSparsityPatternLearner(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ForceSparsityPatternUpdate() {
    chronoPINVOKE.ChDirectSolverLS_ForceSparsityPatternUpdate(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetSparsityEstimate(double sparsity) {
    chronoPINVOKE.ChDirectSolverLS_SetSparsityEstimate(swigCPtr, sparsity);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetMatrixSymmetryType(ChDirectSolverLS.MatrixSymmetryType symmetry) {
    chronoPINVOKE.ChDirectSolverLS_SetMatrixSymmetryType(swigCPtr, (int)symmetry);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void UsePermutationVector(bool val) {
    chronoPINVOKE.ChDirectSolverLS_UsePermutationVector(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void LeverageRhsSparsity(bool val) {
    chronoPINVOKE.ChDirectSolverLS_LeverageRhsSparsity(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void EnableNullPivotDetection(bool val, double threshold) {
    chronoPINVOKE.ChDirectSolverLS_EnableNullPivotDetection__SWIG_0(swigCPtr, val, threshold);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void EnableNullPivotDetection(bool val) {
    chronoPINVOKE.ChDirectSolverLS_EnableNullPivotDetection__SWIG_1(swigCPtr, val);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ResetTimers() {
    chronoPINVOKE.ChDirectSolverLS_ResetTimers(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public double GetTimeSolve_Assembly() {
    double ret = chronoPINVOKE.ChDirectSolverLS_GetTimeSolve_Assembly(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTimeSolve_SolverCall() {
    double ret = chronoPINVOKE.ChDirectSolverLS_GetTimeSolve_SolverCall(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTimeSetup_Assembly() {
    double ret = chronoPINVOKE.ChDirectSolverLS_GetTimeSetup_Assembly(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetTimeSetup_SolverCall() {
    double ret = chronoPINVOKE.ChDirectSolverLS_GetTimeSetup_SolverCall(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumSetupCalls() {
    uint ret = chronoPINVOKE.ChDirectSolverLS_GetNumSetupCalls(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumSolveCalls() {
    uint ret = chronoPINVOKE.ChDirectSolverLS_GetNumSolveCalls(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t GetMatrix() {
    SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t ret = new SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t(chronoPINVOKE.ChDirectSolverLS_GetMatrix(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t A() {
    SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t ret = new SWIGTYPE_p_Eigen__SparseMatrixT_double_Eigen__RowMajor_int_t(chronoPINVOKE.ChDirectSolverLS_A(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd x() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChDirectSolverLS_x(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVectorDynamicd b() {
    ChVectorDynamicd ret = new ChVectorDynamicd(chronoPINVOKE.ChDirectSolverLS_b(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool Setup(SWIGTYPE_p_ChSystemDescriptor sysd) {
    bool ret = chronoPINVOKE.ChDirectSolverLS_Setup(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(sysd));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double Solve(SWIGTYPE_p_ChSystemDescriptor sysd) {
    double ret = chronoPINVOKE.ChDirectSolverLS_Solve(swigCPtr, SWIGTYPE_p_ChSystemDescriptor.getCPtr(sysd));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool SetupCurrent() {
    bool ret = chronoPINVOKE.ChDirectSolverLS_SetupCurrent(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double SolveCurrent() {
    double ret = chronoPINVOKE.ChDirectSolverLS_SolveCurrent(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChDirectSolverLS_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChDirectSolverLS_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum MatrixSymmetryType {
    GENERAL,
    SYMMETRIC_POSDEF,
    SYMMETRIC_INDEF,
    STRUCTURAL_SYMMETRIC
  }

}
