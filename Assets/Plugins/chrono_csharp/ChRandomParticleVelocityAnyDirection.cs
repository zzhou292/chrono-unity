//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChRandomParticleVelocityAnyDirection : ChRandomParticleVelocity {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChRandomParticleVelocityAnyDirection(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChRandomParticleVelocityAnyDirection_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChRandomParticleVelocityAnyDirection obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChRandomParticleVelocityAnyDirection(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChRandomParticleVelocityAnyDirection() : this(chronoPINVOKE.new_ChRandomParticleVelocityAnyDirection(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChVector3d RandomVelocity() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChRandomParticleVelocityAnyDirection_RandomVelocity(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetModulusDistribution(ChDistribution mdistr) {
    chronoPINVOKE.ChRandomParticleVelocityAnyDirection_SetModulusDistribution__SWIG_0(swigCPtr, ChDistribution.getCPtr(mdistr));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetModulusDistribution(double mval) {
    chronoPINVOKE.ChRandomParticleVelocityAnyDirection_SetModulusDistribution__SWIG_1(swigCPtr, mval);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
