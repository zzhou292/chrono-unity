//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChTriangleMeshConnected : ChTriangleMesh {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChTriangleMeshConnected(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChTriangleMeshConnected_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChTriangleMeshConnected obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChTriangleMeshConnected(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChTriangleMeshConnected() : this(chronoPINVOKE.new_ChTriangleMeshConnected__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChTriangleMeshConnected(ChTriangleMeshConnected source) : this(chronoPINVOKE.new_ChTriangleMeshConnected__SWIG_1(ChTriangleMeshConnected.getCPtr(source)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChGeometry Clone() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_Clone(swigCPtr);
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3d GetCoordsVertices() {
    vector_ChVector3d ret = new vector_ChVector3d(chronoPINVOKE.ChTriangleMeshConnected_GetCoordsVertices__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3d GetCoordsNormals() {
    vector_ChVector3d ret = new vector_ChVector3d(chronoPINVOKE.ChTriangleMeshConnected_GetCoordsNormals__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ChVector2d_t GetCoordsUV() {
    SWIGTYPE_p_std__vectorT_ChVector2d_t ret = new SWIGTYPE_p_std__vectorT_ChVector2d_t(chronoPINVOKE.ChTriangleMeshConnected_GetCoordsUV__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ChColor_t GetCoordsColors() {
    SWIGTYPE_p_std__vectorT_ChColor_t ret = new SWIGTYPE_p_std__vectorT_ChColor_t(chronoPINVOKE.ChTriangleMeshConnected_GetCoordsColors__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3i GetIndicesVertexes() {
    vector_ChVector3i ret = new vector_ChVector3i(chronoPINVOKE.ChTriangleMeshConnected_GetIndicesVertexes__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3i GetIndicesNormals() {
    vector_ChVector3i ret = new vector_ChVector3i(chronoPINVOKE.ChTriangleMeshConnected_GetIndicesNormals__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3i GetIndicesUV() {
    vector_ChVector3i ret = new vector_ChVector3i(chronoPINVOKE.ChTriangleMeshConnected_GetIndicesUV__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3i GetIndicesColors() {
    vector_ChVector3i ret = new vector_ChVector3i(chronoPINVOKE.ChTriangleMeshConnected_GetIndicesColors__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_int_t GetIndicesMaterials() {
    SWIGTYPE_p_std__vectorT_int_t ret = new SWIGTYPE_p_std__vectorT_int_t(chronoPINVOKE.ChTriangleMeshConnected_GetIndicesMaterials__SWIG_0(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ChProperty_p_t GetPropertiesPerVertex() {
    SWIGTYPE_p_std__vectorT_ChProperty_p_t ret = new SWIGTYPE_p_std__vectorT_ChProperty_p_t(chronoPINVOKE.ChTriangleMeshConnected_GetPropertiesPerVertex(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ChProperty_p_t GetPropertiesPerFace() {
    SWIGTYPE_p_std__vectorT_ChProperty_p_t ret = new SWIGTYPE_p_std__vectorT_ChProperty_p_t(chronoPINVOKE.ChTriangleMeshConnected_GetPropertiesPerFace(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void AddPropertyPerVertex(SWIGTYPE_p_ChProperty mprop) {
    chronoPINVOKE.ChTriangleMeshConnected_AddPropertyPerVertex(swigCPtr, SWIGTYPE_p_ChProperty.getCPtr(mprop));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void AddPropertyPerFace(SWIGTYPE_p_ChProperty mprop) {
    chronoPINVOKE.ChTriangleMeshConnected_AddPropertyPerFace(swigCPtr, SWIGTYPE_p_ChProperty.getCPtr(mprop));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChTriangleMeshConnected CreateFromWavefrontFile(string filename, bool load_normals, bool load_uv) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_CreateFromWavefrontFile__SWIG_0(filename, load_normals, load_uv);
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshConnected CreateFromWavefrontFile(string filename, bool load_normals) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_CreateFromWavefrontFile__SWIG_1(filename, load_normals);
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshConnected CreateFromWavefrontFile(string filename) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_CreateFromWavefrontFile__SWIG_2(filename);
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadWavefrontMesh(string filename, bool load_normals, bool load_uv) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_LoadWavefrontMesh__SWIG_0(swigCPtr, filename, load_normals, load_uv);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadWavefrontMesh(string filename, bool load_normals) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_LoadWavefrontMesh__SWIG_1(swigCPtr, filename, load_normals);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadWavefrontMesh(string filename) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_LoadWavefrontMesh__SWIG_2(swigCPtr, filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshConnected CreateFromSTLFile(string filename, bool load_normals) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_CreateFromSTLFile__SWIG_0(filename, load_normals);
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChTriangleMeshConnected CreateFromSTLFile(string filename) {
    global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_CreateFromSTLFile__SWIG_1(filename);
    ChTriangleMeshConnected ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChTriangleMeshConnected(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadSTLMesh(string filename, bool load_normals) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_LoadSTLMesh__SWIG_0(swigCPtr, filename, load_normals);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool LoadSTLMesh(string filename) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_LoadSTLMesh__SWIG_1(swigCPtr, filename);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void WriteWavefront(string filename, ChTriangleMeshConnected_list meshes) {
    chronoPINVOKE.ChTriangleMeshConnected_WriteWavefront(filename, ChTriangleMeshConnected_list.getCPtr(meshes));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public static ChTriangleMeshConnected Merge(ChTriangleMeshConnected_list meshes) {
    ChTriangleMeshConnected ret = new ChTriangleMeshConnected(chronoPINVOKE.ChTriangleMeshConnected_Merge(ChTriangleMeshConnected_list.getCPtr(meshes)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void AddTriangle(ChVector3d vertex0, ChVector3d vertex1, ChVector3d vertex2) {
    chronoPINVOKE.ChTriangleMeshConnected_AddTriangle__SWIG_0(swigCPtr, ChVector3d.getCPtr(vertex0), ChVector3d.getCPtr(vertex1), ChVector3d.getCPtr(vertex2));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void AddTriangle(ChTriangle atriangle) {
    chronoPINVOKE.ChTriangleMeshConnected_AddTriangle__SWIG_1(swigCPtr, ChTriangle.getCPtr(atriangle));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public uint GetNumVertices() {
    uint ret = chronoPINVOKE.ChTriangleMeshConnected_GetNumVertices(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint GetNumNormals() {
    uint ret = chronoPINVOKE.ChTriangleMeshConnected_GetNumNormals(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override uint GetNumTriangles() {
    uint ret = chronoPINVOKE.ChTriangleMeshConnected_GetNumTriangles(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChTriangle GetTriangle(uint index) {
    ChTriangle ret = new ChTriangle(chronoPINVOKE.ChTriangleMeshConnected_GetTriangle(swigCPtr, index), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Clear() {
    chronoPINVOKE.ChTriangleMeshConnected_Clear(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChAABB GetBoundingBox() {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChTriangleMeshConnected_GetBoundingBox__SWIG_0(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void ComputeMassProperties(bool bodyCoords, SWIGTYPE_p_double mass, ChVector3d center, ChMatrix33d inertia) {
    chronoPINVOKE.ChTriangleMeshConnected_ComputeMassProperties(swigCPtr, bodyCoords, SWIGTYPE_p_double.getCPtr(mass), ChVector3d.getCPtr(center), ChMatrix33d.getCPtr(inertia));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public string GetFileName() {
    string ret = chronoPINVOKE.ChTriangleMeshConnected_GetFileName(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void Transform(ChVector3d displ, ChMatrix33d rotscale) {
    chronoPINVOKE.ChTriangleMeshConnected_Transform(swigCPtr, ChVector3d.getCPtr(displ), ChMatrix33d.getCPtr(rotscale));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public bool ComputeNeighbouringTriangleMap(SWIGTYPE_p_std__vectorT_std__arrayT_int_4_t_t tri_map) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_ComputeNeighbouringTriangleMap(swigCPtr, SWIGTYPE_p_std__vectorT_std__arrayT_int_4_t_t.getCPtr(tri_map));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeWingedEdges(SWIGTYPE_p_std__mapT_std__pairT_int_int_t_std__pairT_int_int_t_t winged_edges, bool allow_single_wing) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_ComputeWingedEdges__SWIG_0(swigCPtr, SWIGTYPE_p_std__mapT_std__pairT_int_int_t_std__pairT_int_int_t_t.getCPtr(winged_edges), allow_single_wing);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool ComputeWingedEdges(SWIGTYPE_p_std__mapT_std__pairT_int_int_t_std__pairT_int_int_t_t winged_edges) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_ComputeWingedEdges__SWIG_1(swigCPtr, SWIGTYPE_p_std__mapT_std__pairT_int_int_t_std__pairT_int_int_t_t.getCPtr(winged_edges));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int RepairDuplicateVertexes(double tolerance) {
    int ret = chronoPINVOKE.ChTriangleMeshConnected_RepairDuplicateVertexes__SWIG_0(swigCPtr, tolerance);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int RepairDuplicateVertexes() {
    int ret = chronoPINVOKE.ChTriangleMeshConnected_RepairDuplicateVertexes__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool MakeOffset(double offset) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_MakeOffset(swigCPtr, offset);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__pairT_int_int_t GetTriangleEdgeIndexes(ChVector3i face_indices, int nedge, bool unique) {
    SWIGTYPE_p_std__pairT_int_int_t ret = new SWIGTYPE_p_std__pairT_int_int_t(chronoPINVOKE.ChTriangleMeshConnected_GetTriangleEdgeIndexes(swigCPtr, ChVector3i.getCPtr(face_indices), nedge, unique), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool SplitEdge(int itA, int itB, int neA, int neB, SWIGTYPE_p_int itA_1, SWIGTYPE_p_int itA_2, SWIGTYPE_p_int itB_1, SWIGTYPE_p_int itB_2, SWIGTYPE_p_std__vectorT_std__arrayT_int_4_t_t tri_map, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_p_t aux_data_double, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_p_t aux_data_int, SWIGTYPE_p_std__vectorT_std__vectorT_bool_t_p_t aux_data_bool, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVector3T_double_t_t_p_t aux_data_vect) {
    bool ret = chronoPINVOKE.ChTriangleMeshConnected_SplitEdge(swigCPtr, itA, itB, neA, neB, SWIGTYPE_p_int.getCPtr(itA_1), SWIGTYPE_p_int.getCPtr(itA_2), SWIGTYPE_p_int.getCPtr(itB_1), SWIGTYPE_p_int.getCPtr(itB_2), SWIGTYPE_p_std__vectorT_std__arrayT_int_4_t_t.getCPtr(tri_map), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_p_t.getCPtr(aux_data_double), SWIGTYPE_p_std__vectorT_std__vectorT_int_t_p_t.getCPtr(aux_data_int), SWIGTYPE_p_std__vectorT_std__vectorT_bool_t_p_t.getCPtr(aux_data_bool), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVector3T_double_t_t_p_t.getCPtr(aux_data_vect));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void RefineMeshEdges(SWIGTYPE_p_std__vectorT_int_t marked_tris, double edge_maxlen, ChRefineEdgeCriterion criterion, SWIGTYPE_p_std__vectorT_std__arrayT_int_4_t_t atri_map, SWIGTYPE_p_std__vectorT_std__vectorT_double_t_p_t aux_data_double, SWIGTYPE_p_std__vectorT_std__vectorT_int_t_p_t aux_data_int, SWIGTYPE_p_std__vectorT_std__vectorT_bool_t_p_t aux_data_bool, SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVector3T_double_t_t_p_t aux_data_vect) {
    chronoPINVOKE.ChTriangleMeshConnected_RefineMeshEdges(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(marked_tris), edge_maxlen, ChRefineEdgeCriterion.getCPtr(criterion), SWIGTYPE_p_std__vectorT_std__arrayT_int_4_t_t.getCPtr(atri_map), SWIGTYPE_p_std__vectorT_std__vectorT_double_t_p_t.getCPtr(aux_data_double), SWIGTYPE_p_std__vectorT_std__vectorT_int_t_p_t.getCPtr(aux_data_int), SWIGTYPE_p_std__vectorT_std__vectorT_bool_t_p_t.getCPtr(aux_data_bool), SWIGTYPE_p_std__vectorT_std__vectorT_chrono__ChVector3T_double_t_t_p_t.getCPtr(aux_data_vect));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public vector_ChVector3d getFaceVertices() {
    vector_ChVector3d ret = new vector_ChVector3d(chronoPINVOKE.ChTriangleMeshConnected_getFaceVertices(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3d getFaceNormals() {
    vector_ChVector3d ret = new vector_ChVector3d(chronoPINVOKE.ChTriangleMeshConnected_getFaceNormals(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_std__vectorT_ChColor_t getFaceColors() {
    SWIGTYPE_p_std__vectorT_ChColor_t ret = new SWIGTYPE_p_std__vectorT_ChColor_t(chronoPINVOKE.ChTriangleMeshConnected_getFaceColors(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public vector_ChVector3d getAverageNormals() {
    vector_ChVector3d ret = new vector_ChVector3d(chronoPINVOKE.ChTriangleMeshConnected_getAverageNormals(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual new ChGeometry.Type GetType() {
    ChGeometry.Type ret = (ChGeometry.Type)chronoPINVOKE.ChTriangleMeshConnected_GetType(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ChAABB GetBoundingBox(vector_ChVector3d vertices) {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChTriangleMeshConnected_GetBoundingBox__SWIG_1(vector_ChVector3d.getCPtr(vertices)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChTriangleMeshConnected_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChTriangleMeshConnected_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public vector_ChVector3d m_vertices {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_vertices_set(swigCPtr, vector_ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_vertices_get(swigCPtr);
      vector_ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVector3d m_normals {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_normals_set(swigCPtr, vector_ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_normals_get(swigCPtr);
      vector_ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ChVector2d_t m_UV {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_UV_set(swigCPtr, SWIGTYPE_p_std__vectorT_ChVector2d_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_UV_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ChVector2d_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ChVector2d_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ChColor_t m_colors {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_colors_set(swigCPtr, SWIGTYPE_p_std__vectorT_ChColor_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_colors_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ChColor_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ChColor_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVector3i m_face_v_indices {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_face_v_indices_set(swigCPtr, vector_ChVector3i.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_face_v_indices_get(swigCPtr);
      vector_ChVector3i ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3i(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVector3i m_face_n_indices {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_face_n_indices_set(swigCPtr, vector_ChVector3i.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_face_n_indices_get(swigCPtr);
      vector_ChVector3i ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3i(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVector3i m_face_uv_indices {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_face_uv_indices_set(swigCPtr, vector_ChVector3i.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_face_uv_indices_get(swigCPtr);
      vector_ChVector3i ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3i(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVector3i m_face_col_indices {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_face_col_indices_set(swigCPtr, vector_ChVector3i.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_face_col_indices_get(swigCPtr);
      vector_ChVector3i ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3i(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_int_t m_face_mat_indices {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_face_mat_indices_set(swigCPtr, SWIGTYPE_p_std__vectorT_int_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_face_mat_indices_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_int_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_int_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public string m_filename {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_filename_set(swigCPtr, value);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      string ret = chronoPINVOKE.ChTriangleMeshConnected_m_filename_get(swigCPtr);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ChProperty_p_t m_properties_per_vertex {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_properties_per_vertex_set(swigCPtr, SWIGTYPE_p_std__vectorT_ChProperty_p_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_properties_per_vertex_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ChProperty_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ChProperty_p_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ChProperty_p_t m_properties_per_face {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_properties_per_face_set(swigCPtr, SWIGTYPE_p_std__vectorT_ChProperty_p_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_properties_per_face_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ChProperty_p_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ChProperty_p_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public vector_ChVector3d m_tmp_vectors {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_tmp_vectors_set(swigCPtr, vector_ChVector3d.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_tmp_vectors_get(swigCPtr);
      vector_ChVector3d ret = (cPtr == global::System.IntPtr.Zero) ? null : new vector_ChVector3d(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

  public SWIGTYPE_p_std__vectorT_ChColor_t m_tmp_colors {
    set {
      chronoPINVOKE.ChTriangleMeshConnected_m_tmp_colors_set(swigCPtr, SWIGTYPE_p_std__vectorT_ChColor_t.getCPtr(value));
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    } 
    get {
      global::System.IntPtr cPtr = chronoPINVOKE.ChTriangleMeshConnected_m_tmp_colors_get(swigCPtr);
      SWIGTYPE_p_std__vectorT_ChColor_t ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_std__vectorT_ChColor_t(cPtr, false);
      if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
      return ret;
    } 
  }

}
