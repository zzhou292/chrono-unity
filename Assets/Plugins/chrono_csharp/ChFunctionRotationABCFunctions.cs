//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionRotationABCFunctions : ChFunctionRotation {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunctionRotationABCFunctions(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChFunctionRotationABCFunctions_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionRotationABCFunctions obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChFunctionRotationABCFunctions(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunctionRotationABCFunctions() : this(chronoPINVOKE.new_ChFunctionRotationABCFunctions__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionRotationABCFunctions(ChFunctionRotationABCFunctions other) : this(chronoPINVOKE.new_ChFunctionRotationABCFunctions__SWIG_1(ChFunctionRotationABCFunctions.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetFunctionAngleA(ChFunction angle_function) {
    chronoPINVOKE.ChFunctionRotationABCFunctions_SetFunctionAngleA(swigCPtr, ChFunction.getCPtr(angle_function));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetFunctionAngleA() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionRotationABCFunctions_GetFunctionAngleA(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFunctionAngleB(ChFunction angle_function) {
    chronoPINVOKE.ChFunctionRotationABCFunctions_SetFunctionAngleB(swigCPtr, ChFunction.getCPtr(angle_function));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetFunctionAngleB() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionRotationABCFunctions_GetFunctionAngleB(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetFunctionAngleC(ChFunction angle_function) {
    chronoPINVOKE.ChFunctionRotationABCFunctions_SetFunctionAngleC(swigCPtr, ChFunction.getCPtr(angle_function));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunction GetFunctionAngleC() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChFunctionRotationABCFunctions_GetFunctionAngleC(swigCPtr);
    ChFunction ret = (cPtr == global::System.IntPtr.Zero) ? null : new ChFunction(cPtr, true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetRotationRepresentation(RotRepresentation rot_rep) {
    chronoPINVOKE.ChFunctionRotationABCFunctions_SetRotationRepresentation(swigCPtr, (int)rot_rep);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public RotRepresentation GetRotationRepresentation() {
    RotRepresentation ret = (RotRepresentation)chronoPINVOKE.ChFunctionRotationABCFunctions_GetRotationRepresentation(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChQuaterniond GetQuat(double s) {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChFunctionRotationABCFunctions_GetQuat(swigCPtr, s), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChFunctionRotationABCFunctions_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChFunctionRotationABCFunctions_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
