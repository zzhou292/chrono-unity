//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFramed : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnBase;

  internal ChFramed(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwnBase = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFramed obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChFramed() {
    Dispose(false);
  }

  public void Dispose() {
    Dispose(true);
    global::System.GC.SuppressFinalize(this);
  }

  protected virtual void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnBase) {
          swigCMemOwnBase = false;
          chronoPINVOKE.delete_ChFramed(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
    }
  }

  public ChFramed() : this(chronoPINVOKE.new_ChFramed__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed(ChVector3d v, ChQuaterniond q) : this(chronoPINVOKE.new_ChFramed__SWIG_1(ChVector3d.getCPtr(v), ChQuaterniond.getCPtr(q)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed(ChVector3d v) : this(chronoPINVOKE.new_ChFramed__SWIG_2(ChVector3d.getCPtr(v)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed(ChVector3d v, ChMatrix33d R) : this(chronoPINVOKE.new_ChFramed__SWIG_3(ChVector3d.getCPtr(v), ChMatrix33d.getCPtr(R)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed(ChVector3d v, double angle, ChVector3d u) : this(chronoPINVOKE.new_ChFramed__SWIG_4(ChVector3d.getCPtr(v), angle, ChVector3d.getCPtr(u)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed(ChCoordsysd C) : this(chronoPINVOKE.new_ChFramed__SWIG_5(ChCoordsysd.getCPtr(C)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed(ChFramed other) : this(chronoPINVOKE.new_ChFramed__SWIG_6(ChFramed.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChCoordsysd GetCoordsys() {
    ChCoordsysd ret = new ChCoordsysd(chronoPINVOKE.ChFramed_GetCoordsys(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetPos() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFramed_GetPos(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChQuaterniond GetRot() {
    ChQuaterniond ret = new ChQuaterniond(chronoPINVOKE.ChFramed_GetRot(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChMatrix33d GetRotMat() {
    ChMatrix33d ret = new ChMatrix33d(chronoPINVOKE.ChFramed_GetRotMat(swigCPtr), false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d GetRotAxis() {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFramed_GetRotAxis(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public double GetRotAngle() {
    double ret = chronoPINVOKE.ChFramed_GetRotAngle(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void SetCoordsys(ChCoordsysd C) {
    chronoPINVOKE.ChFramed_SetCoordsys__SWIG_0(swigCPtr, ChCoordsysd.getCPtr(C));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetCoordsys(ChVector3d v, ChQuaterniond q) {
    chronoPINVOKE.ChFramed_SetCoordsys__SWIG_1(swigCPtr, ChVector3d.getCPtr(v), ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRot(ChQuaterniond q) {
    chronoPINVOKE.ChFramed_SetRot__SWIG_0(swigCPtr, ChQuaterniond.getCPtr(q));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetRot(ChMatrix33d R) {
    chronoPINVOKE.ChFramed_SetRot__SWIG_1(swigCPtr, ChMatrix33d.getCPtr(R));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void SetPos(ChVector3d pos) {
    chronoPINVOKE.ChFramed_SetPos(swigCPtr, ChVector3d.getCPtr(pos));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConcatenatePreTransformation(ChFramed F) {
    chronoPINVOKE.ChFramed_ConcatenatePreTransformation(swigCPtr, ChFramed.getCPtr(F));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void ConcatenatePostTransformation(ChFramed F) {
    chronoPINVOKE.ChFramed_ConcatenatePostTransformation(swigCPtr, ChFramed.getCPtr(F));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Move(ChVector3d v) {
    chronoPINVOKE.ChFramed_Move__SWIG_0(swigCPtr, ChVector3d.getCPtr(v));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Move(ChCoordsysd C) {
    chronoPINVOKE.ChFramed_Move__SWIG_1(swigCPtr, ChCoordsysd.getCPtr(C));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChVector3d TransformPointLocalToParent(ChVector3d v) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFramed_TransformPointLocalToParent(swigCPtr, ChVector3d.getCPtr(v)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d TransformPointParentToLocal(ChVector3d v) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFramed_TransformPointParentToLocal(swigCPtr, ChVector3d.getCPtr(v)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d TransformDirectionLocalToParent(ChVector3d d) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFramed_TransformDirectionLocalToParent(swigCPtr, ChVector3d.getCPtr(d)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChVector3d TransformDirectionParentToLocal(ChVector3d d) {
    ChVector3d ret = new ChVector3d(chronoPINVOKE.ChFramed_TransformDirectionParentToLocal(swigCPtr, ChVector3d.getCPtr(d)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWrenchd TransformWrenchLocalToParent(ChWrenchd w) {
    ChWrenchd ret = new ChWrenchd(chronoPINVOKE.ChFramed_TransformWrenchLocalToParent(swigCPtr, ChWrenchd.getCPtr(w)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChWrenchd TransformWrenchParentToLocal(ChWrenchd w) {
    ChWrenchd ret = new ChWrenchd(chronoPINVOKE.ChFramed_TransformWrenchParentToLocal(swigCPtr, ChWrenchd.getCPtr(w)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFramed TransformLocalToParent(ChFramed F) {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChFramed_TransformLocalToParent(swigCPtr, ChFramed.getCPtr(F)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public ChFramed TransformParentToLocal(ChFramed F) {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChFramed_TransformParentToLocal(swigCPtr, ChFramed.getCPtr(F)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChFramed other) {
    bool ret = chronoPINVOKE.ChFramed_Equals__SWIG_0(swigCPtr, ChFramed.getCPtr(other));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool Equals(ChFramed other, double tol) {
    bool ret = chronoPINVOKE.ChFramed_Equals__SWIG_1(swigCPtr, ChFramed.getCPtr(other), tol);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Normalize() {
    chronoPINVOKE.ChFramed_Normalize(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetIdentity() {
    chronoPINVOKE.ChFramed_SetIdentity(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void Invert() {
    chronoPINVOKE.ChFramed_Invert(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFramed GetInverse() {
    ChFramed ret = new ChFramed(chronoPINVOKE.ChFramed_GetInverse(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive) {
    chronoPINVOKE.ChFramed_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive) {
    chronoPINVOKE.ChFramed_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
