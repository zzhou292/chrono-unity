//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChCollisionSystemBullet : ChCollisionSystem {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChCollisionSystemBullet(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChCollisionSystemBullet_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChCollisionSystemBullet obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChCollisionSystemBullet(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChCollisionSystemBullet() : this(chronoPINVOKE.new_ChCollisionSystemBullet(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Clear() {
    chronoPINVOKE.ChCollisionSystemBullet_Clear(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Add(ChCollisionModel model) {
    chronoPINVOKE.ChCollisionSystemBullet_Add(swigCPtr, ChCollisionModel.getCPtr(model));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Remove(ChCollisionModel model) {
    chronoPINVOKE.ChCollisionSystemBullet_Remove(swigCPtr, ChCollisionModel.getCPtr(model));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void SetNumThreads(int nthreads) {
    chronoPINVOKE.ChCollisionSystemBullet_SetNumThreads(swigCPtr, nthreads);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Run() {
    chronoPINVOKE.ChCollisionSystemBullet_Run(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChAABB GetBoundingBox() {
    ChAABB ret = new ChAABB(chronoPINVOKE.ChCollisionSystemBullet_GetBoundingBox(swigCPtr), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ResetTimers() {
    chronoPINVOKE.ChCollisionSystemBullet_ResetTimers(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override double GetTimerCollisionBroad() {
    double ret = chronoPINVOKE.ChCollisionSystemBullet_GetTimerCollisionBroad(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override double GetTimerCollisionNarrow() {
    double ret = chronoPINVOKE.ChCollisionSystemBullet_GetTimerCollisionNarrow(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ReportContacts(ChContactContainer mcontactcontainer) {
    chronoPINVOKE.ChCollisionSystemBullet_ReportContacts(swigCPtr, ChContactContainer.getCPtr(mcontactcontainer));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ReportProximities(ChProximityContainer mproximitycontainer) {
    chronoPINVOKE.ChCollisionSystemBullet_ReportProximities(swigCPtr, ChProximityContainer.getCPtr(mproximitycontainer));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override bool RayHit(ChVector3d from, ChVector3d to, ChRayhitResult result) {
    bool ret = chronoPINVOKE.ChCollisionSystemBullet_RayHit__SWIG_0(swigCPtr, ChVector3d.getCPtr(from), ChVector3d.getCPtr(to), ChRayhitResult.getCPtr(result));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override bool RayHit(ChVector3d from, ChVector3d to, ChCollisionModel model, ChRayhitResult result) {
    bool ret = chronoPINVOKE.ChCollisionSystemBullet_RayHit__SWIG_1(swigCPtr, ChVector3d.getCPtr(from), ChVector3d.getCPtr(to), ChCollisionModel.getCPtr(model), ChRayhitResult.getCPtr(result));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void RegisterVisualizationCallback(VisualizationCallback callback) {
    chronoPINVOKE.ChCollisionSystemBullet_RegisterVisualizationCallback(swigCPtr, VisualizationCallback.getCPtr(callback));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void Visualize(int flags) {
    chronoPINVOKE.ChCollisionSystemBullet_Visualize(swigCPtr, flags);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_cbtCollisionWorld GetBulletCollisionWorld() {
    global::System.IntPtr cPtr = chronoPINVOKE.ChCollisionSystemBullet_GetBulletCollisionWorld(swigCPtr);
    SWIGTYPE_p_cbtCollisionWorld ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_cbtCollisionWorld(cPtr, false);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void SetContactBreakingThreshold(double threshold) {
    chronoPINVOKE.ChCollisionSystemBullet_SetContactBreakingThreshold(threshold);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    chronoPINVOKE.ChCollisionSystemBullet_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    chronoPINVOKE.ChCollisionSystemBullet_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

}
