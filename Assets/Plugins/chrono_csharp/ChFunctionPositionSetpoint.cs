//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 4.0.2
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class ChFunctionPositionSetpoint : ChFunctionPosition {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  private bool swigCMemOwnDerived;

  internal ChFunctionPositionSetpoint(global::System.IntPtr cPtr, bool cMemoryOwn) : base(chronoPINVOKE.ChFunctionPositionSetpoint_SWIGSmartPtrUpcast(cPtr), true) {
    swigCMemOwnDerived = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(ChFunctionPositionSetpoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  protected override void Dispose(bool disposing) {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwnDerived) {
          swigCMemOwnDerived = false;
          chronoPINVOKE.delete_ChFunctionPositionSetpoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      base.Dispose(disposing);
    }
  }

  public ChFunctionPositionSetpoint() : this(chronoPINVOKE.new_ChFunctionPositionSetpoint__SWIG_0(), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public ChFunctionPositionSetpoint(ChFunctionPositionSetpoint other) : this(chronoPINVOKE.new_ChFunctionPositionSetpoint__SWIG_1(ChFunctionPositionSetpoint.getCPtr(other)), true) {
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    SwigDirectorConnect();
  }

  public void SetMode(ChFunctionPositionSetpoint.eChSetpointMode mmode) {
    chronoPINVOKE.ChFunctionPositionSetpoint_SetMode(swigCPtr, (int)mmode);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public ChFunctionPositionSetpoint.eChSetpointMode GetMode() {
    ChFunctionPositionSetpoint.eChSetpointMode ret = (ChFunctionPositionSetpoint.eChSetpointMode)chronoPINVOKE.ChFunctionPositionSetpoint_GetMode(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void Reset(double ms) {
    chronoPINVOKE.ChFunctionPositionSetpoint_Reset__SWIG_0(swigCPtr, ms);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public void Reset() {
    chronoPINVOKE.ChFunctionPositionSetpoint_Reset__SWIG_1(swigCPtr);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSetpoint(ChVector3d p_setpoint, double s) {
    if (SwigDerivedClassHasMethod("SetSetpoint", swigMethodTypes6)) chronoPINVOKE.ChFunctionPositionSetpoint_SetSetpointSwigExplicitChFunctionPositionSetpoint(swigCPtr, ChVector3d.getCPtr(p_setpoint), s); else chronoPINVOKE.ChFunctionPositionSetpoint_SetSetpoint(swigCPtr, ChVector3d.getCPtr(p_setpoint), s);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void SetSetpointAndDerivatives(ChVector3d p_setpoint, ChVector3d p_setpoint_ds, ChVector3d p_setpoint_dsds) {
    if (SwigDerivedClassHasMethod("SetSetpointAndDerivatives", swigMethodTypes7)) chronoPINVOKE.ChFunctionPositionSetpoint_SetSetpointAndDerivativesSwigExplicitChFunctionPositionSetpoint(swigCPtr, ChVector3d.getCPtr(p_setpoint), ChVector3d.getCPtr(p_setpoint_ds), ChVector3d.getCPtr(p_setpoint_dsds)); else chronoPINVOKE.ChFunctionPositionSetpoint_SetSetpointAndDerivatives(swigCPtr, ChVector3d.getCPtr(p_setpoint), ChVector3d.getCPtr(p_setpoint_ds), ChVector3d.getCPtr(p_setpoint_dsds));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override ChVector3d GetPos(double s) {
    ChVector3d ret = new ChVector3d((SwigDerivedClassHasMethod("GetPos", swigMethodTypes0) ? chronoPINVOKE.ChFunctionPositionSetpoint_GetPosSwigExplicitChFunctionPositionSetpoint(swigCPtr, s) : chronoPINVOKE.ChFunctionPositionSetpoint_GetPos(swigCPtr, s)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d GetLinVel(double s) {
    ChVector3d ret = new ChVector3d((SwigDerivedClassHasMethod("GetLinVel", swigMethodTypes1) ? chronoPINVOKE.ChFunctionPositionSetpoint_GetLinVelSwigExplicitChFunctionPositionSetpoint(swigCPtr, s) : chronoPINVOKE.ChFunctionPositionSetpoint_GetLinVel(swigCPtr, s)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override ChVector3d GetLinAcc(double s) {
    ChVector3d ret = new ChVector3d((SwigDerivedClassHasMethod("GetLinAcc", swigMethodTypes2) ? chronoPINVOKE.ChFunctionPositionSetpoint_GetLinAccSwigExplicitChFunctionPositionSetpoint(swigCPtr, s) : chronoPINVOKE.ChFunctionPositionSetpoint_GetLinAcc(swigCPtr, s)), true);
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public override void ArchiveOut(SWIGTYPE_p_chrono__ChArchiveOut archive_out) {
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes4)) chronoPINVOKE.ChFunctionPositionSetpoint_ArchiveOutSwigExplicitChFunctionPositionSetpoint(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out)); else chronoPINVOKE.ChFunctionPositionSetpoint_ArchiveOut(swigCPtr, SWIGTYPE_p_chrono__ChArchiveOut.getCPtr(archive_out));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  public override void ArchiveIn(SWIGTYPE_p_chrono__ChArchiveIn archive_in) {
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes5)) chronoPINVOKE.ChFunctionPositionSetpoint_ArchiveInSwigExplicitChFunctionPositionSetpoint(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in)); else chronoPINVOKE.ChFunctionPositionSetpoint_ArchiveIn(swigCPtr, SWIGTYPE_p_chrono__ChArchiveIn.getCPtr(archive_in));
    if (chronoPINVOKE.SWIGPendingException.Pending) throw chronoPINVOKE.SWIGPendingException.Retrieve();
  }

  private void SwigDirectorConnect() {
    if (SwigDerivedClassHasMethod("GetPos", swigMethodTypes0))
      swigDelegate0 = new SwigDelegateChFunctionPositionSetpoint_0(SwigDirectorMethodGetPos);
    if (SwigDerivedClassHasMethod("GetLinVel", swigMethodTypes1))
      swigDelegate1 = new SwigDelegateChFunctionPositionSetpoint_1(SwigDirectorMethodGetLinVel);
    if (SwigDerivedClassHasMethod("GetLinAcc", swigMethodTypes2))
      swigDelegate2 = new SwigDelegateChFunctionPositionSetpoint_2(SwigDirectorMethodGetLinAcc);
    if (SwigDerivedClassHasMethod("Update", swigMethodTypes3))
      swigDelegate3 = new SwigDelegateChFunctionPositionSetpoint_3(SwigDirectorMethodUpdate);
    if (SwigDerivedClassHasMethod("ArchiveOut", swigMethodTypes4))
      swigDelegate4 = new SwigDelegateChFunctionPositionSetpoint_4(SwigDirectorMethodArchiveOut);
    if (SwigDerivedClassHasMethod("ArchiveIn", swigMethodTypes5))
      swigDelegate5 = new SwigDelegateChFunctionPositionSetpoint_5(SwigDirectorMethodArchiveIn);
    if (SwigDerivedClassHasMethod("SetSetpoint", swigMethodTypes6))
      swigDelegate6 = new SwigDelegateChFunctionPositionSetpoint_6(SwigDirectorMethodSetSetpoint);
    if (SwigDerivedClassHasMethod("SetSetpointAndDerivatives", swigMethodTypes7))
      swigDelegate7 = new SwigDelegateChFunctionPositionSetpoint_7(SwigDirectorMethodSetSetpointAndDerivatives);
    chronoPINVOKE.ChFunctionPositionSetpoint_director_connect(swigCPtr, swigDelegate0, swigDelegate1, swigDelegate2, swigDelegate3, swigDelegate4, swigDelegate5, swigDelegate6, swigDelegate7);
  }

  private bool SwigDerivedClassHasMethod(string methodName, global::System.Type[] methodTypes) {
    global::System.Reflection.MethodInfo methodInfo = this.GetType().GetMethod(methodName, global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, methodTypes, null);
    bool hasDerivedMethod = methodInfo.DeclaringType.IsSubclassOf(typeof(ChFunctionPositionSetpoint));
    return hasDerivedMethod;
  }

  private global::System.IntPtr SwigDirectorMethodGetPos(double s) {
    return ChVector3d.getCPtr(GetPos(s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGetLinVel(double s) {
    return ChVector3d.getCPtr(GetLinVel(s)).Handle;
  }

  private global::System.IntPtr SwigDirectorMethodGetLinAcc(double s) {
    return ChVector3d.getCPtr(GetLinAcc(s)).Handle;
  }

  private void SwigDirectorMethodUpdate(double t) {
    Update(t);
  }

  private void SwigDirectorMethodArchiveOut(global::System.IntPtr archive_out) {
    ArchiveOut(new SWIGTYPE_p_chrono__ChArchiveOut(archive_out, false));
  }

  private void SwigDirectorMethodArchiveIn(global::System.IntPtr archive_in) {
    ArchiveIn(new SWIGTYPE_p_chrono__ChArchiveIn(archive_in, false));
  }

  private void SwigDirectorMethodSetSetpoint(global::System.IntPtr p_setpoint, double s) {
    SetSetpoint(new ChVector3d(p_setpoint, true), s);
  }

  private void SwigDirectorMethodSetSetpointAndDerivatives(global::System.IntPtr p_setpoint, global::System.IntPtr p_setpoint_ds, global::System.IntPtr p_setpoint_dsds) {
    SetSetpointAndDerivatives(new ChVector3d(p_setpoint, true), new ChVector3d(p_setpoint_ds, true), new ChVector3d(p_setpoint_dsds, true));
  }

  public delegate global::System.IntPtr SwigDelegateChFunctionPositionSetpoint_0(double s);
  public delegate global::System.IntPtr SwigDelegateChFunctionPositionSetpoint_1(double s);
  public delegate global::System.IntPtr SwigDelegateChFunctionPositionSetpoint_2(double s);
  public delegate void SwigDelegateChFunctionPositionSetpoint_3(double t);
  public delegate void SwigDelegateChFunctionPositionSetpoint_4(global::System.IntPtr archive_out);
  public delegate void SwigDelegateChFunctionPositionSetpoint_5(global::System.IntPtr archive_in);
  public delegate void SwigDelegateChFunctionPositionSetpoint_6(global::System.IntPtr p_setpoint, double s);
  public delegate void SwigDelegateChFunctionPositionSetpoint_7(global::System.IntPtr p_setpoint, global::System.IntPtr p_setpoint_ds, global::System.IntPtr p_setpoint_dsds);

  private SwigDelegateChFunctionPositionSetpoint_0 swigDelegate0;
  private SwigDelegateChFunctionPositionSetpoint_1 swigDelegate1;
  private SwigDelegateChFunctionPositionSetpoint_2 swigDelegate2;
  private SwigDelegateChFunctionPositionSetpoint_3 swigDelegate3;
  private SwigDelegateChFunctionPositionSetpoint_4 swigDelegate4;
  private SwigDelegateChFunctionPositionSetpoint_5 swigDelegate5;
  private SwigDelegateChFunctionPositionSetpoint_6 swigDelegate6;
  private SwigDelegateChFunctionPositionSetpoint_7 swigDelegate7;

  private static global::System.Type[] swigMethodTypes0 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes1 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes2 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes3 = new global::System.Type[] { typeof(double) };
  private static global::System.Type[] swigMethodTypes4 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveOut) };
  private static global::System.Type[] swigMethodTypes5 = new global::System.Type[] { typeof(SWIGTYPE_p_chrono__ChArchiveIn) };
  private static global::System.Type[] swigMethodTypes6 = new global::System.Type[] { typeof(ChVector3d), typeof(double) };
  private static global::System.Type[] swigMethodTypes7 = new global::System.Type[] { typeof(ChVector3d), typeof(ChVector3d), typeof(ChVector3d) };
  public enum eChSetpointMode {
    ZERO_ORDER_HOLD,
    FIRST_ORDER_HOLD,
    SOH,
    OVERRIDE
  }

}
